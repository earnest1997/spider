{
  "searchResList": [
    {
      "detail": "<p>Tic-tac, tic-tac, tic-tac...</p><p>La aguja del reloj</p><p>no paraba de deslizarse en el incómodo silencio reinante de su cuarto.</p><p>Exasperada, comprobó otra vez el móvil pero no había ninguna llamada ni</p><p>mensaje suyo. Soltó un largo sus..."
    },
    {
      "detail": "<p>Les «Mémoires» de Simone de Beauvoir, journal intime de son temps</p><p><a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.slate.fr%2Fsource%2F28527%2Fjean-marc-proust\" target=\"_blank\" rel=\"nofollow\">Jean-Marc Proust</a> — 17 mai 2018 à 14h50 — ..."
    },
    {
      "detail": "<h2>El Resumen del Autor:<br>\n</h2><p>Qian Zuoyang, nombre original Qian Yi. Novelista, poeta, guionista, ha estudiado en Singapur, Japón, etc. Es miembro de la Asociación de Escritores de Shanghai, miembro de la Sociedad de Poesía de Shanghai, miemb..."
    },
    {
      "detail": "<p>Política de privacidad</p><p>Persecución de carreras respeta y protege la privacidad de todos los usuarios que utilizan el servicio. Con el fin de brindarle servicios más precisos y personalizados, Persecución de carreras utilizará y divulgará su ..."
    },
    {
      "detail": "<p>背景：今年开发或经手的小程序也有三个了，每个小程序之间都有一些相同的组件要写，虽然市面上有很多优秀的小程序组件库可以使用，但我更倾向于自己动手去开发这些组件。每次开发新的小程序总要翻出旧项目，将里面的组件拿出来，修修改改放在新项目里面继续使用。</p>\n<p>目的：将自己写过的一些小程序组件集中起来，并新写一些常用组件，统一整理成这个小程序UI库，方便以后再开发小程序时使用。目前还比较简陋，日后会慢慢补充。</p>\n<h2 class=\"heading\" data-id=\"heading-..."
    },
    {
      "detail": "<p>本次给大家带来.NET Reactor学习系列.NET Reactor针对De4Dot脱壳工具的应对，需要的朋友可以收藏哦~</p><p> De4Dot是一个专门反混淆.NET程序的一个工具，支持对于以下工具混淆过的代码的清理：</p><ul><li>Agile.NET (aka CliSecure)</li><li>Babel.NET</li><li>CodeFort</li><li>CodeVeil</li><li>CodeWall</li><li>CryptoObfuscator</..."
    }
  ],
  "hotArticleDetailList": [
    {
      "content": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<blockquote>\n<p>是时候撸一波 JS 基础啦,撸熟了,银十速拿 offer;<br>\n本文不从传统的问答方式梳理,而是从知识维度梳理,以便形成知识网络;<br>\n包括函数,数组,对象,数据结构,算法,设计模式和 http.</p>\n</blockquote>\n<h1 class=\"heading\" data-id=\"heading-1\">1. 函数</h1>\n<h2 class=\"heading\" data-id=\"heading-2\">1.1函数的3种定义方法</h2>\n<h3 class=\"heading\" data-id=\"heading-3\">1.1.1 函数声明</h3>\n<pre><code class=\"copyable\">//ES5\nfunction getSum(){}\nfunction (){}//匿名函数\n//ES6\n()=>{}//如果{}内容只有一行{}和return关键字可省,\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-4\">1.1.2 函数表达式(函数字面量)</h3>\n<pre><code class=\"copyable\">//ES5\nvar sum=function(){}\n//ES6\nlet sum=()=>{}//如果{}内容只有一行{}和return关键字可省,\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-5\">1.1.3 构造函数</h3>\n<pre><code class=\"copyable\">const sum = new Function('a', 'b' , 'return a + b')\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-6\">1.1.4 三种方法的对比</h3>\n<p>1.函数声明有预解析,而且函数声明的优先级高于变量;\n2.使用Function构造函数定义函数的方式是一个函数表达式,这种方式会导致解析两次代码，影响性能。第一次解析常规的JavaScript代码，第二次解析传入构造函数的字符串</p>\n<h2 class=\"heading\" data-id=\"heading-7\">1.2.ES5中函数的4种调用</h2>\n<p>在ES5中函数内容的this指向和调用方法有关</p>\n<h3 class=\"heading\" data-id=\"heading-8\">1.2.1 函数调用模式</h3>\n<p>包括函数名()和匿名函数调用,this指向window</p>\n<pre><code class=\"copyable\"> function getSum() {\n    console.log(this) //这个属于函数名调用，this指向window\n }\n getSum()\n \n (function() {\n    console.log(this) //匿名函数调用，this指向window\n })()\n \n var getSum=function() {\n    console.log(this) //实际上也是函数名调用，window\n }\n getSum()\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-9\">1.2.2 方法调用</h3>\n<p>对象.方法名(),this指向对象</p>\n<pre><code class=\"copyable\">var objList = {\n   name: 'methods',\n   getSum: function() {\n     console.log(this) //objList对象\n   }\n}\nobjList.getSum()\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-10\">1.2.3 构造器调用</h3>\n<p>new 构造函数名(),this指向实例化的对象</p>\n<pre><code class=\"copyable\">function Person() {\n  console.log(this); //是构造函数调用，指向实例化的对象personOne\n}\nvar personOne = new Person();\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-11\">1.2.4 间接调用</h3>\n<p>利用call和apply来实现,this就是call和apply对应的第一个参数,如果不传值或者第一个值为null,undefined时this指向window</p>\n<pre><code class=\"copyable\">function foo() {\n   console.log(this);\n}\nfoo.apply('我是apply改变的this值');//我是apply改变的this值\nfoo.call('我是call改变的this值');//我是call改变的this值\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-12\">1.3 ES6中函数的调用</h2>\n<p>箭头函数不可以当作构造函数使用，也就是不能用new命令实例化一个对象，否则会抛出一个错误\n箭头函数的this是和定义时有关和调用无关\n调用就是函数调用模式</p>\n<pre><code class=\"copyable\">(() => {\n   console.log(this)//window\n})()\n\nlet arrowFun = () => {\n  console.log(this)//window\n}\narrowFun()\n\nlet arrowObj = {\n  arrFun: function() {\n   (() => {\n     console.log(this)//this指向的是arrowObj对象\n   })()\n   }\n }\n arrowObj.arrFun();\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-13\">1.4.call,apply和bind</h2>\n<p>1.IE5之前不支持call和apply,bind是ES5出来的;\n2.call和apply可以调用函数,改变this,实现继承和借用别的对象的方法;</p>\n<h3 class=\"heading\" data-id=\"heading-14\">1.4.1 call和apply定义</h3>\n<p>调用方法,用一个对象替换掉另一个对象(this)\n对象.call(新this对象,实参1,实参2,实参3.....)\n对象.apply(新this对象,[实参1,实参2,实参3.....])</p>\n<h3 class=\"heading\" data-id=\"heading-15\">1.4.2 call和apply用法</h3>\n<p>1.间接调用函数,改变作用域的this值\n2.劫持其他对象的方法</p>\n<pre><code class=\"copyable\">var foo = {\n  name:\"张三\",\n  logName:function(){\n    console.log(this.name);\n  }\n}\nvar bar={\n  name:\"李四\"\n};\nfoo.logName.call(bar);//李四\n实质是call改变了foo的this指向为bar,并调用该函数\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>3.两个函数实现继承</p>\n<pre><code class=\"copyable\">function Animal(name){   \n  this.name = name;   \n  this.showName = function(){   \n    console.log(this.name);   \n  }   \n}   \nfunction Cat(name){  \n  Animal.call(this, name);  \n}    \nvar cat = new Cat(\"Black Cat\");   \ncat.showName(); //Black Cat\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>4.为类数组(arguments和nodeList)添加数组方法push,pop</p>\n<pre><code class=\"copyable\">(function(){\n  Array.prototype.push.call(arguments,'王五');\n  console.log(arguments);//['张三','李四','王五']\n})('张三','李四')\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>5.合并数组</p>\n<pre><code class=\"copyable\">let arr1=[1,2,3]; \nlet arr2=[4,5,6]; \nArray.prototype.push.apply(arr1,arr2); //将arr2合并到了arr1中\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>6.求数组最大值</p>\n<pre><code class=\"copyable\">Math.max.apply(null,arr)\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>7.判断字符类型</p>\n<pre><code class=\"copyable\">Object.prototype.toString.call({})\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-16\">1.4.3 bind</h3>\n<p>bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向,不会调用方法,不兼容IE8</p>\n<pre><code class=\"copyable\">var name = '李四'\n var foo = {\n   name: \"张三\",\n   logName: function(age) {\n   console.log(this.name, age);\n   }\n }\n var fooNew = foo.logName;\n var fooNewBind = foo.logName.bind(foo);\n fooNew(10)//李四,10\n fooNewBind(11)//张三,11  因为bind改变了fooNewBind里面的this指向\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-17\">1.4.4 call,apply和bind原生实现</h3>\n<p>call实现:</p>\n<pre><code class=\"copyable\">Function.prototype.newCall = function(context, ...parameter) {\n if (typeof context === 'object' || typeof context === 'function') {\n    context = context || window\n} else {\n    context = Object.create(null)\n}\n  context.fn = this;  \n  context.fn(...parameter);\n  delete context.fn;\n}\nlet person = {\n  name: 'Abiel'\n}\nfunction sayHi(age,sex) {\n  console.log(this.name, age, sex);\n}\nsayHi.newCall (person, 25, '男'); // Abiel 25 男\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>apply实现:</p>\n<pre><code class=\"copyable\">Function.prototype.newApply = function(context, parameter) {\n  if (typeof context === 'object' || typeof context === 'function') {\n    context = context || window\n  } else {\n    context = Object.create(null)\n  }\n  let fn = Symbol()\n  context[fn] = this\n  context[fn](parameter);\n  delete context[fn]\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>bind实现:</p>\n<pre><code class=\"copyable\">Function.prototype.bind = function (context,...innerArgs) {\n  var me = this\n  return function (...finnalyArgs) {\n    return me.call(context,...innerArgs,...finnalyArgs)\n  }\n}\nlet person = {\n  name: 'Abiel'\n}\nfunction sayHi(age,sex) {\n  console.log(this.name, age, sex);\n}\nlet personSayHi = sayHi.bind(person, 25)\npersonSayHi('男')\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-18\">1.4.5 三者异同</h3>\n<p>同:都是改变this指向,都可接收参数\n异:bind和call是接收单个参数,apply是接收数组</p>\n<h2 class=\"heading\" data-id=\"heading-19\">1.5.函数的节流和防抖</h2>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>概念</th>\n<th>应用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>节流</td>\n<td>事件触发后每隔一段时间触发一次,可触发多次</td>\n<td>scroll,resize事件一段时间触发多次</td>\n</tr>\n<tr>\n<td>防抖</td>\n<td>事件触发动作完成后一段时间触发一次</td>\n<td>scroll,resize事件触发完后一段时间触发</td>\n</tr>\n</tbody>\n</table>\n<p>节流:</p>\n<h3 class=\"heading\" data-id=\"heading-20\">1.5.1 节流</h3>\n<pre><code class=\"copyable\">let throttle = function(func, delay) {\n    let timer = null;\n    return ()=> {\n      if (!timer) {\n        timer = setTimeout(function() {\n          func.apply(this, arguments);\n          timer = null;\n        }, delay);\n      }\n    };\n  };\n  function handle() {\n    console.log(Math.random());\n  }\n  window.addEventListener(\"scroll\", throttle(handle, 1000)); //事件处理函数\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-21\">1.5.2 防抖</h3>\n<pre><code class=\"copyable\">function debounce(fn, wait) {\n    var timeout = null;\n    return function() {\n      if (timeout !== null) clearTimeout(timeout);//如果多次触发将上次记录延迟清除掉\n      timeout = setTimeout(()=> {\n          fn.apply(this, arguments);\n          timeout = null;\n        }, wait);\n    };\n  }\n  // 处理函数\n  function handle() {\n    console.log(Math.random());\n  }\n  // 滚动事件\n  window.addEventListener(\"scroll\", debounce(handle, 1000));\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-22\">1.6.原型链</h2>\n<h3 class=\"heading\" data-id=\"heading-23\">1.6.1 定义</h3>\n<p>对象继承属性的一个链条</p>\n<h3 class=\"heading\" data-id=\"heading-24\">1.6.2构造函数,实例与原型对象的关系</h3>\n<p></p><figure><img alt=\"图片描述\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/22/16df35ccb827f1e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"638\" data-height=\"241\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"638\" height=\"241\"></svg>\"><figcaption></figcaption></figure><p></p>\n<pre><code class=\"copyable\">var Person = function (name) { this.name = name; }//person是构造函数\nvar o3personTwo = new Person('personTwo')//personTwo是实例\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p></p><figure><img alt=\"图片描述\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/22/16df35d0ab151801?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"534\" data-height=\"333\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"534\" height=\"333\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>原型对象都有一个默认的constructor属性指向构造函数</p>\n<h3 class=\"heading\" data-id=\"heading-25\">1.6.3 创建实例的方法</h3>\n<p>1.字面量</p>\n<pre><code class=\"copyable\">let obj={'name':'张三'}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.Object构造函数创建</p>\n<pre><code class=\"copyable\">let Obj=new Object()\nObj.name='张三'\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>3.使用工厂模式创建对象</p>\n<pre><code class=\"copyable\">function createPerson(name){\n var o = new Object();\n o.name = name;\n return o; \n}\nvar person1 = createPerson('张三');\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>4.使用构造函数创建对象</p>\n<pre><code class=\"copyable\">function Person(name){\n this.name = name;\n}\nvar person1 = new Person('张三');\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-26\">1.6.4 new运算符</h3>\n<p>1.创了一个新对象;<br>\n2.this指向构造函数;<br>\n3.构造函数有返回,会替换new出来的对象,如果没有就是new出来的对象<br>\n4.手动封装一个new运算符</p>\n<pre><code class=\"copyable\">var new2 = function (func) {\n    var o = Object.create(func.prototype);//创建对象\n    var k = func.call(o);//改变this指向，把结果付给k\n    if (k && typeof k === 'object') {//判断k的类型是不是对象\n        return k;&emsp;//是，返回k\n    } else {\n        return o;//不是返回返回构造函数的执行结果\n    }\n}  \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-27\">1.6.5 对象的原型链</h3>\n<p></p><figure><img alt=\"图片描述\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/22/16df35e34dc568b9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"570\" data-height=\"709\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"570\" height=\"709\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-28\">1.7 继承的方式</h2>\n<p>JS是一门弱类型动态语言,封装和继承是他的两大特性</p>\n<h3 class=\"heading\" data-id=\"heading-29\">1.7.1 原型链继承</h3>\n<p>将父类的实例作为子类的原型\n1.代码实现\n定义父类:</p>\n<pre><code class=\"copyable\">// 定义一个动物类\nfunction Animal (name) {\n  // 属性\n  this.name = name || 'Animal';\n  // 实例方法\n  this.sleep = function(){\n    console.log(this.name + '正在睡觉！');\n  }\n}\n// 原型方法\nAnimal.prototype.eat = function(food) {\n  console.log(this.name + '正在吃：' + food);\n};\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>子类:</p>\n<pre><code class=\"copyable\">function Cat(){ \n}\nCat.prototype = new Animal();\nCat.prototype.name = 'cat';\n\n//&emsp;Test Code\nvar cat = new Cat();\nconsole.log(cat.name);//cat\nconsole.log(cat.eat('fish'));//cat正在吃：fish  undefined\nconsole.log(cat.sleep());//cat正在睡觉！ undefined\nconsole.log(cat instanceof Animal); //true \nconsole.log(cat instanceof Cat); //true\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.优缺点\n简单易于实现,但是要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行,无法实现多继承</p>\n<h3 class=\"heading\" data-id=\"heading-30\">1.7.2 构造继承</h3>\n<p>实质是利用call来改变Cat中的this指向\n1.代码实现\n子类:</p>\n<pre><code class=\"copyable\">function Cat(name){\n  Animal.call(this);\n  this.name = name || 'Tom';\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.优缺点\n可以实现多继承,不能继承原型属性/方法</p>\n<h3 class=\"heading\" data-id=\"heading-31\">1.7.3 实例继承</h3>\n<p>为父类实例添加新特性，作为子类实例返回\n1.代码实现\n子类</p>\n<pre><code class=\"copyable\">function Cat(name){\n  var instance = new Animal();\n  instance.name = name || 'Tom';\n  return instance;\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.优缺点\n不限制调用方式,但不能实现多继承</p>\n<h3 class=\"heading\" data-id=\"heading-32\">1.7.4 拷贝继承</h3>\n<p>将父类的属性和方法拷贝一份到子类中\n1.子类:</p>\n<pre><code class=\"copyable\">function Cat(name){\n  var animal = new Animal();\n  for(var p in animal){\n    Cat.prototype[p] = animal[p];\n  }\n  Cat.prototype.name = name || 'Tom';\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.优缺点\n支持多继承,但是效率低占用内存</p>\n<h3 class=\"heading\" data-id=\"heading-33\">1.7.5 组合继承</h3>\n<p>通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用\n1.子类:</p>\n<pre><code class=\"copyable\">function Cat(name){\n  Animal.call(this);\n  this.name = name || 'Tom';\n}\nCat.prototype = new Animal();\nCat.prototype.constructor = Cat;\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-34\">1.7.6 寄生组合继承</h3>\n<pre><code class=\"copyable\">function Cat(name){\n  Animal.call(this);\n  this.name = name || 'Tom';\n}\n(function(){\n  // 创建一个没有实例方法的类\n  var Super = function(){};\n  Super.prototype = Animal.prototype;\n  //将实例作为子类的原型\n  Cat.prototype = new Super();\n})();\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-35\">1.7.7 ES6的extends继承</h3>\n<p>ES6 的继承机制是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this</p>\n<pre><code class=\"copyable\">//父类\nclass Person {\n    //constructor是构造方法\n    constructor(skin, language) {\n        this.skin = skin;\n        this.language = language;\n    }\n    say() {\n        console.log('我是父类')\n    }\n}\n\n//子类\nclass Chinese extends Person {\n    constructor(skin, language, positon) {\n        //console.log(this);//报错\n        super(skin, language);\n        //super();相当于父类的构造函数\n        //console.log(this);调用super后得到了this，不报错，this指向子类，相当于调用了父类.prototype.constructor.call(this)\n        this.positon = positon;\n    }\n    aboutMe() {\n        console.log(`${this.skin} ${this.language}  ${this.positon}`);\n    }\n}\n\n\n//调用只能通过new的方法得到实例,再调用里面的方法\nlet obj = new Chinese('红色', '中文', '香港');\nobj.aboutMe();\nobj.say();\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-36\">1.8.高阶函数</h2>\n<h3 class=\"heading\" data-id=\"heading-37\">1.8.1定义</h3>\n<p>函数的参数是函数或返回函数</p>\n<h3 class=\"heading\" data-id=\"heading-38\">1.8.2 常见的高阶函数</h3>\n<p>map,reduce,filter,sort</p>\n<h3 class=\"heading\" data-id=\"heading-39\">1.8.3 柯里化</h3>\n<p>1.定义:只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</p>\n<pre><code class=\"copyable\">fn(a,b,c,d)=>fn(a)(b)(c)(d)\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.代码实现:</p>\n<pre><code class=\"copyable\">const currying = fn => {\nconst len = fn.length\nreturn function curr (...args1) {\n    if (args1.length >= len) {\n         return fn(...args1)\n    }\n    return (...args2) => curr(...args1, ...args2)\n    }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-40\">1.8.4 反柯里化</h3>\n<p>1.定义:</p>\n<pre><code class=\"copyable\">obj.func(arg1, arg2)=>func(obj, arg1, arg2)\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.代码实现:</p>\n<pre><code class=\"copyable\">Function.prototype.uncurrying = function() {\n  var that = this;\n  return function() {\n    return Function.prototype.call.apply(that, arguments);\n  }\n};\n \nfunction sayHi () {\n  return \"Hello \" + this.value +\" \"+[].slice.call(arguments);\n}\nlet sayHiuncurrying=sayHi.uncurrying();\nconsole.log(sayHiuncurrying({value:'world'},\"hahaha\"));\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-41\">1.8.5偏函数</h3>\n<p>1.定义:指定部分参数来返回一个新的定制函数的形式\n2.例子:</p>\n<pre><code class=\"copyable\">function foo(a, b, c) {\n  return a + b + c;\n}\nfunction func(a, b) {\n  return foo(a,b,8);\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-42\">2.对象</h1>\n<h2 class=\"heading\" data-id=\"heading-43\">2.1.对象的声明方法</h2>\n<h3 class=\"heading\" data-id=\"heading-44\">2.1.1 字面量</h3>\n<pre><code class=\"copyable\">var test2 = {x:123,y:345};\nconsole.log(test2);//{x:123,y:345};\nconsole.log(test2.x);//123\nconsole.log(test2.__proto__.x);//undefined\nconsole.log(test2.__proto__.x === test2.x);//false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-45\">2.1.2 构造函数</h3>\n<pre><code class=\"copyable\">var test1 = new Object({x:123,y:345});\nconsole.log(test1);//{x:123,y:345}\nconsole.log(test1.x);//123\nconsole.log(test1.__proto__.x);//undefined\nconsole.log(test1.__proto__.x === test1.x);//false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>new的作用:\n1.创了一个新对象;\n2.this指向构造函数;\n3.构造函数有返回,会替换new出来的对象,如果没有就是new出来的对象</p>\n<h3 class=\"heading\" data-id=\"heading-46\">2.1.3 内置方法</h3>\n<p>Obejct.create(obj,descriptor),obj是对象,describe描述符属性(可选)</p>\n<pre><code class=\"copyable\">let test = Object.create({x:123,y:345});\nconsole.log(test);//{}\nconsole.log(test.x);//123\nconsole.log(test.__proto__.x);//3\nconsole.log(test.__proto__.x === test.x);//true\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-47\">2.1.4 三种方法的优缺点</h3>\n<p>1.功能:都能实现对象的声明,并能够赋值和取值<br>\n2.继承性:内置方法创建的对象继承到__proto__属性上<br>\n3.隐藏属性:三种声明方法会默认为内部的每个成员（属性或方法）生成一些隐藏属性，这些隐藏属性是可以读取和可配置的,属性分类见下面<br>\n4.属性读取:Object.getOwnPropertyDescriptor()或getOwnPropertyDescriptor()<br>\n5.属性设置:Object.definePropertype或Object.defineProperties</p>\n<h2 class=\"heading\" data-id=\"heading-48\">2.2.对象的属性</h2>\n<h3 class=\"heading\" data-id=\"heading-49\">2.2.1 属性分类</h3>\n<p>1.数据属性4个特性:\nconfigurable(可配置),enumerable(可枚举),writable(可修改),value(属性值)</p>\n<p>2.访问器属性2个特性:\nget(获取),set(设置)</p>\n<p>3.内部属性\n由JavaScript引擎内部使用的属性;\n不能直接访问,但是可以通过对象内置方法间接访问,如:[[Prototype]]可以通过                Object.getPrototypeOf()访问;\n内部属性用[[]]包围表示,是一个抽象操作,没有对应字符串类型的属性名,如[[Prototype]].</p>\n<h3 class=\"heading\" data-id=\"heading-50\">2.2.2 属性描述符</h3>\n<p>1.定义:将一个属性的所有特性编码成一个对象返回\n2.描述符的属性有:数据属性和访问器属性\n3.使用范围:\n作为方法Object.defineProperty, Object.getOwnPropertyDescriptor, Object.create的第二个参数,</p>\n<h3 class=\"heading\" data-id=\"heading-51\">2.2.3 属性描述符的默认值</h3>\n<p>1.访问对象存在的属性</p>\n<table>\n<thead>\n<tr>\n<th>特性名</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>对应属性值</td>\n</tr>\n<tr>\n<td>get</td>\n<td>对应属性值</td>\n</tr>\n<tr>\n<td>set</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>writable</td>\n<td>true</td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>true</td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<p>所以通过上面三种声明方法已存在的属性都是有这些默认描述符\n2.访问对象不存在的属性</p>\n<table>\n<thead>\n<tr>\n<th>特性名</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>get</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>set</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>writable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"heading\" data-id=\"heading-52\">2.2.3 描述符属性的使用规则</h3>\n<p>get,set与wriable,value是互斥的,如果有交集设置会报错</p>\n<h3 class=\"heading\" data-id=\"heading-53\">2.2.4 属性定义</h3>\n<p>1.定义属性的函数有两个:Object.defineProperty和Object.defineProperties.例如:\nObject.defineProperty(obj, propName, desc)</p>\n<p>2.在引擎内部,会转换成这样的方法调用:\nobj.[[DefineOwnProperty]](propName, desc, true)</p>\n<h3 class=\"heading\" data-id=\"heading-54\">2.2.5 属性赋值</h3>\n<p>1.赋值运算符(=)就是在调用[[Put]].比如:\nobj.prop = v;</p>\n<p>2.在引擎内部,会转换成这样的方法调用:\nobj.[[Put]](\"prop\", v, isStrictModeOn)</p>\n<h3 class=\"heading\" data-id=\"heading-55\">2.2.6 判断对象的属性</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>in</td>\n<td>如果指定的属性在指定的对象或其原型链中，则in 运算符返回true</td>\n<td>'name' in test        //true</td>\n</tr>\n<tr>\n<td>hasOwnProperty()</td>\n<td>只判断自身属性</td>\n<td>test.hasOwnProperty('name')        //true</td>\n</tr>\n<tr>\n<td>.或[]</td>\n<td>对象或原型链上不存在该属性，则会返回undefined</td>\n<td>test.name            //\"lei\"   test[\"name\"]  //\"lei\"</td>\n</tr>\n</tbody>\n</table>\n<h2 class=\"heading\" data-id=\"heading-56\">2.3.Symbol</h2>\n<h3 class=\"heading\" data-id=\"heading-57\">2.3.1概念</h3>\n<p>是一种数据类型;\n不能new,因为Symbol是一个原始类型的值，不是对象。</p>\n<h3 class=\"heading\" data-id=\"heading-58\">2.3.2 定义方法</h3>\n<p>Symbol(),可以传参\nvar s1 = Symbol();\nvar s2 = Symbol();\ns1 === s2 // false</p>\n<pre><code class=\"copyable\">// 有参数的情况\nvar s1 = Symbol(\"foo\");\nvar s2 = Symbol(\"foo\");\ns1 === s2 // false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-59\">2.3.3 用法</h3>\n<p>1.不能与其他类型的值进行运算;\n2.作为属性名</p>\n<pre><code class=\"copyable\">let mySymbol = Symbol();\n\n// 第一种写法\nvar a = {};\na[mySymbol] = 'Hello!';\n\n// 第二种写法\nvar a = {\n  [mySymbol]: 'Hello!'\n};\n\n// 第三种写法\nvar a = {};\nObject.defineProperty(a, mySymbol, { value: 'Hello!' });\n\n// 以上写法都得到同样结果\na[mySymbol] // \"Hello!\"\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>3.作为对象属性名时，不能用点运算符,可以用[]</p>\n<pre><code class=\"copyable\">let a = {};\nlet name = Symbol();\na.name = 'lili';\na[name] = 'lucy';\nconsole.log(a.name,a[name]); \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>4.遍历不会被for...in、for...of和Object.keys()、Object.getOwnPropertyNames()取到该属性</p>\n<h3 class=\"heading\" data-id=\"heading-60\">2.3.4 Symbol.for</h3>\n<p>1.定义:在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值\n2.举例:</p>\n<pre><code class=\"copyable\">var s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\ns1 === s2 // true\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-61\">2.3.5 Symbol.keyFor</h3>\n<p>1.定义:返回一个已登记的Symbol类型值的key\n2.举例:</p>\n<pre><code class=\"copyable\">var s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-62\">2.4.遍历</h2>\n<h3 class=\"heading\" data-id=\"heading-63\">2.4.1 一级对象遍历方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>for ... in</td>\n<td>遍历对象自身的和继承的可枚举属性(不含Symbol属性)</td>\n</tr>\n<tr>\n<td>Object.keys(obj)</td>\n<td>返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)</td>\n</tr>\n<tr>\n<td>Object.getOwnPropertyNames(obj)</td>\n<td>返回一个数组,包括对象自身的所有可枚举属性(不含Symbol属性)</td>\n</tr>\n<tr>\n<td>Object.getOwnPropertySymbols(obj)</td>\n<td>返回一个数组,包含对象自身的所有Symbol属性</td>\n</tr>\n<tr>\n<td>Reflect.ownKeys(obj)</td>\n<td>返回一个数组,包含对象自身的所有(不枚举、可枚举和Symbol)属性</td>\n</tr>\n<tr>\n<td>Reflect.enumerate(obj)</td>\n<td>返回一个Iterator对象,遍历对象自身的和继承的所有可枚举属性(不含Symbol属性)</td>\n</tr>\n</tbody>\n</table>\n<p>总结:1.只有Object.getOwnPropertySymbols(obj)和Reflect.ownKeys(obj)可以拿到Symbol属性\n2.只有Reflect.ownKeys(obj)可以拿到不可枚举属性</p>\n<h3 class=\"heading\" data-id=\"heading-64\">2.4.2 多级对象遍历</h3>\n<p>数据模型:</p>\n<pre><code class=\"copyable\">var treeNodes = [\n    {\n     id: 1,\n     name: '1',\n     children: [\n       {\n        id: 11,\n        name: '11',\n        children: [\n         {\n          id: 111,\n          name: '111',\n          children:[]\n          },\n          {\n            id: 112,\n            name: '112'\n           }\n          ]\n         },\n         {\n          id: 12,\n          name: '12',\n          children: []\n         }\n         ],\n         users: []\n        },\n      ];\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>递归:</p>\n<pre><code class=\"copyable\">var parseTreeJson = function(treeNodes){\n      if (!treeNodes || !treeNodes.length) return;\n\n       for (var i = 0, len = treeNodes.length; i < len; i++) {\n\n            var childs = treeNodes[i].children;\n\n            console.log(treeNodes[i].id);\n\n            if(childs && childs.length > 0){\n                 parseTreeJson(childs);\n            }\n       }\n    };\n\n    console.log('------------- 递归实现 ------------------');\n    parseTreeJson(treeNodes);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-65\">2.5.深度拷贝</h2>\n<h3 class=\"heading\" data-id=\"heading-66\">2.5.1 Object.assign</h3>\n<p>1.定义:将源对象（source）的所有可枚举属性，复制到目标对象（target）\n2.用法:</p>\n<pre><code class=\"copyable\">合并多个对象\nvar target = { a: 1, b: 1 };\nvar source1 = { b: 2, c: 2 };\nvar source2 = { c: 3 };\nObject.assign(target, source1, source2);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>3.注意:\n这个是伪深度拷贝,只能拷贝第一层</p>\n<h3 class=\"heading\" data-id=\"heading-67\">2.5.2 JSON.stringify</h3>\n<p>1.原理:是将对象转化为字符串,而字符串是简单数据类型</p>\n<h3 class=\"heading\" data-id=\"heading-68\">2.5.3 递归拷贝</h3>\n<pre><code class=\"copyable\">function deepClone(source){\n  const targetObj = source.constructor === Array ? [] : {}; // 判断复制的目标是数组还是对象\n  for(let keys in source){ // 遍历目标\n    if(source.hasOwnProperty(keys)){\n      if(source[keys] && typeof source[keys] === 'object'){ // 如果值是对象，就递归一下\n        targetObj[keys] = source[keys].constructor === Array ? [] : {};\n        targetObj[keys] = deepClone(source[keys]);\n      }else{ // 如果不是，就直接赋值\n        targetObj[keys] = source[keys];\n      }\n    }\n  }\n  return targetObj;\n}  \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-69\">2.6.数据拦截</h2>\n<p>定义:利用对象内置方法,设置属性,进而改变对象的属性值</p>\n<h3 class=\"heading\" data-id=\"heading-70\">2.6.1 Object.defineProterty</h3>\n<p>1.ES5出来的方法;\n2.三个参数:对象(必填),属性值(必填),描述符(可选);\n3.defineProterty的描述符属性</p>\n<pre><code class=\"copyable\">数据属性:value,writable,configurable,enumerable\n访问器属性:get,set\n注:不能同时设置value和writable,这两对属性是互斥的\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>4.拦截对象的两种情况:</p>\n<pre><code class=\"copyable\">let obj = {name:'',age:'',sex:''  },\n    defaultName = [\"这是姓名默认值1\",\"这是年龄默认值1\",\"这是性别默认值1\"];\n  Object.keys(obj).forEach(key => {\n    Object.defineProperty(obj, key, {\n      get() {\n        return defaultName;\n      },\n      set(value) {\n        defaultName = value;\n      }\n    });\n  });\n\n  console.log(obj.name);\n  console.log(obj.age);\n  console.log(obj.sex);\n  obj.name = \"这是改变值1\";\n  console.log(obj.name);\n  console.log(obj.age);\n  console.log(obj.sex);\n\n  let objOne={},defaultNameOne=\"这是默认值2\";\n  Object.defineProperty(obj, 'name', {\n      get() {\n        return defaultNameOne;\n      },\n      set(value) {\n        defaultNameOne = value;\n      }\n  });\n  console.log(objOne.name);\n  objOne.name = \"这是改变值2\";\n  console.log(objOne.name);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>5.拦截数组变化的情况</p>\n<pre><code class=\"copyable\">let a={};\nbValue=1;\nObject.defineProperty(a,\"b\",{\n    set:function(value){\n        bValue=value;\n        console.log(\"setted\");\n    },\n    get:function(){\n        return bValue;\n    }\n});\na.b;//1\na.b=[];//setted\na.b=[1,2,3];//setted\na.b[1]=10;//无输出\na.b.push(4);//无输出\na.b.length=5;//无输出\na.b;//[1,10,3,4,undefined];\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>结论:defineProperty无法检测数组索引赋值,改变数组长度的变化;\n但是通过数组方法来操作可以检测到</p>\n<p>多级嵌套对象监听</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">    <span class=\"hljs-built_in\">let</span> info = {};\n  <span class=\"hljs-keyword\">function</span> observe(obj) {\n    <span class=\"hljs-keyword\">if</span> (!obj || typeof obj !== <span class=\"hljs-string\">\"object\"</span>) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (var i <span class=\"hljs-keyword\">in</span> obj) {\n      definePro(obj, i, obj[i]);\n    }\n  }\n\n  <span class=\"hljs-keyword\">function</span> definePro(obj, key, value) {\n    observe(value);\n    Object.defineProperty(obj, key, {\n      get: <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n        <span class=\"hljs-built_in\">return</span> value;\n      },\n      <span class=\"hljs-built_in\">set</span>: <span class=\"hljs-keyword\">function</span>(newval) {\n        console.log(<span class=\"hljs-string\">\"检测变化\"</span>, newval);\n        value = newval;\n      }\n    });\n  }\n  definePro(info, <span class=\"hljs-string\">\"friends\"</span>, { name: <span class=\"hljs-string\">\"张三\"</span> });\n  info.friends.name = <span class=\"hljs-string\">\"李四\"</span>;\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>6.存在的问题</p>\n<pre><code class=\"copyable\">不能监听数组索引赋值和改变长度的变化\n必须深层遍历嵌套的对象,因为defineProterty只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历，如果属性值也是对象那么需要深度遍历,显然能劫持一个完整的对象是更好的选择\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 class=\"heading\" data-id=\"heading-71\">2.6.2 proxy</h3>\n<p>1.ES6出来的方法,实质是对对象做了一个拦截,并提供了13个处理方法</p>\n<p>2.两个参数:对象和行为函数</p>\n<pre><code class=\"copyable\">let handler = {\n    get(target, key, receiver) {\n      console.log(\"get\", key);\n      return Reflect.get(target, key, receiver);\n    },\n    set(target, key, value, receiver) {\n      console.log(\"set\", key, value);\n      return Reflect.set(target, key, value, receiver);\n    }\n  };\n  let proxy = new Proxy(obj, handler);\n  proxy.name = \"李四\";\n  proxy.age = 24;\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>涉及到多级对象或者多级数组</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">  //传递两个参数，一个是object, 一个是proxy的handler\n//如果是不是嵌套的object，直接加上proxy返回，如果是嵌套的object，那么进入addSubProxy进行递归。 \n<span class=\"hljs-keyword\">function</span> toDeepProxy(object, handler) {\n    <span class=\"hljs-keyword\">if</span> (!isPureObject(object)) addSubProxy(object, handler); \n    <span class=\"hljs-built_in\">return</span> new Proxy(object, handler);\n\n//这是一个递归函数，目的是遍历object的所有属性，如果不是pure object,那么就继续遍历object的属性的属性，如果是pure object那么就加上proxy\n    <span class=\"hljs-keyword\">function</span> addSubProxy(object, handler) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> prop <span class=\"hljs-keyword\">in</span> object) {\n            <span class=\"hljs-keyword\">if</span> ( typeof object[prop] == <span class=\"hljs-string\">'object'</span>) {\n                <span class=\"hljs-keyword\">if</span> (!isPureObject(object[prop])) addSubProxy(object[prop], handler);\n                object[prop] = new Proxy(object[prop], handler);\n            }\n        }\n        object = new Proxy(object, handler)\n    }\n\n//是不是一个pure object,意思就是object里面没有再嵌套object了\n    <span class=\"hljs-keyword\">function</span> isPureObject(object) {\n        <span class=\"hljs-keyword\">if</span> (typeof object!== <span class=\"hljs-string\">'object'</span>) {\n            <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> prop <span class=\"hljs-keyword\">in</span> object) {\n                <span class=\"hljs-keyword\">if</span> (typeof object[prop] == <span class=\"hljs-string\">'object'</span>) {\n                    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n}\n<span class=\"hljs-built_in\">let</span> object = {\n    name: {\n        first: {\n            four: 5,\n            second: {\n                third: <span class=\"hljs-string\">'ssss'</span>\n            }\n        }\n    },\n    class: 5,\n    arr: [1, 2, {arr1:10}],\n    age: {\n        age1: 10\n    }\n}\n//这是一个嵌套了对象和数组的数组\n<span class=\"hljs-built_in\">let</span> objectArr = [{name:{first:<span class=\"hljs-string\">'ss'</span>}, arr1:[1,2]}, 2, 3, 4, 5, 6]\n\n//这是proxy的handler\n<span class=\"hljs-built_in\">let</span> handler = {\n    get(target, property) {\n        console.log(<span class=\"hljs-string\">'get:'</span> + property)\n        <span class=\"hljs-built_in\">return</span> Reflect.get(target, property);\n    },\n    <span class=\"hljs-built_in\">set</span>(target, property, value) {\n        console.log(<span class=\"hljs-string\">'set:'</span> + property + <span class=\"hljs-string\">'='</span> + value);\n        <span class=\"hljs-built_in\">return</span> Reflect.set(target, property, value);\n    }\n}\n//变成监听对象\nobject = toDeepProxy(object, handler);\nobjectArr = toDeepProxy(objectArr, handler);\n\n//进行一系列操作\nconsole.time(<span class=\"hljs-string\">'pro'</span>)\nobjectArr.length\nobjectArr[3];\nobjectArr[2]=10\nobjectArr[0].name.first = <span class=\"hljs-string\">'ss'</span>\nobjectArr[0].arr1[0]\nobject.name.first.second.third = <span class=\"hljs-string\">'yyyyy'</span>\nobject.class = 6;\nobject.name.first.four\nobject.arr[2].arr1\nobject.age.age1 = 20;\nconsole.timeEnd(<span class=\"hljs-string\">'pro'</span>)\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>3.问题和优点\nreflect对象没有构造函数\n可以监听数组索引赋值,改变数组长度的变化,\n是直接监听对象的变化,不用深层遍历</p>\n<h3 class=\"heading\" data-id=\"heading-72\">2.6.3 defineProterty和proxy的对比</h3>\n<p>1.defineProterty是es5的标准,proxy是es6的标准;</p>\n<p>2.proxy可以监听到数组索引赋值,改变数组长度的变化;</p>\n<p>3.proxy是监听对象,不用深层遍历,defineProterty是监听属性;</p>\n<p>3.利用defineProterty实现双向数据绑定(vue2.x采用的核心)\n4.利用proxy实现双向数据绑定(vue3.x会采用)</p>\n<h1 class=\"heading\" data-id=\"heading-73\">3.数组</h1>\n<p>数组基本上考察数组方法多一点,所以这里就单纯介绍常见的场景数组的方法,还有很多场景后续补充;<br>\n本文主要从应用来讲数组api的一些骚操作;<br>\n如一行代码扁平化n维数组、数组去重、求数组最大值、数组求和、排序、对象和数组的转化等；<br>\n上面这些应用场景你可以用一行代码实现？</p>\n<h2 class=\"heading\" data-id=\"heading-74\">3.1 扁平化n维数组</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">[1,[2,3]].flat(2) //[1,2,3]\n[1,[2,3,[4,5]].flat(3) //[1,2,3,4,5]\n[1,[2,3,[4,5]]].toString()  //'1,2,3,4,5'\n[1[2,3,[4,5[...]].flat(Infinity) //[1,2,3,4...n]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>Array.flat(n)是ES10扁平数组的api,n表示维度,n值为Infinity时维度为无限大</p>\n<p>2.开始篇</p>\n<pre><code class=\"copyable\">function flatten(arr) {\n    while(arr.some(item=>Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\nflatten([1,[2,3]]) //[1,2,3]\nflatten([1,[2,3,[4,5]]) //[1,2,3,4,5]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>实质是利用递归和数组合并方法concat实现扁平</p>\n<h2 class=\"heading\" data-id=\"heading-75\">3.2 去重</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">Array.from(new Set([1,2,3,3,4,4])) //[1,2,3,4]\n[...new Set([1,2,3,3,4,4])] //[1,2,3,4]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>set是ES6新出来的一种一种定义不重复数组的数据类型\nArray.from是将类数组转化为数组\n...是扩展运算符,将set里面的值转化为字符串\n2.开始篇</p>\n<pre><code class=\"copyable\">Array.prototype.distinct = function() {\n    const map = {}\n    const result = []\n    for (const n of this) {\n        if (!(n in map)) {\n            map[n] = 1\n            result.push(n)\n        }\n    }\n    return result\n}\n[1,2,3,3,4,4].distinct(); //[1,2,3,4]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>取新数组存值,循环两个数组值相比较</p>\n<h2 class=\"heading\" data-id=\"heading-76\">3.3排序</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">[1,2,3,4].sort((a, b) => a - b); // [1, 2,3,4],默认是升序\n[1,2,3,4].sort((a, b) => b - a); // [4,3,2,1] 降序\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>sort是js内置的排序方法,参数为一个函数\n2.开始篇\n冒泡排序:</p>\n<pre><code class=\"copyable\">Array.prototype.bubleSort=function () {\n    let arr=this,\n        len = arr.length;\n    for (let outer = len; outer >= 2; outer--) {\n      for (let inner = 0; inner <= outer - 1; inner++) {\n        if (arr[inner] > arr[inner + 1]) {\n          //升序\n          [arr[inner], arr[inner + 1]] = [arr[inner + 1], arr[inner]];\n          console.log([arr[inner], arr[inner + 1]]);\n        }\n      }\n    }\n    return arr;\n  }\n[1,2,3,4].bubleSort() //[1,2,3,4]    \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>选择排序</p>\n<pre><code class=\"copyable\">    Array.prototype.selectSort=function () {\n        let arr=this,\n            len = arr.length;\n        for (let i = 0, len = arr.length; i < len; i++) {\n    for (let j = i, len = arr.length; j < len; j++) {\n      if (arr[i] > arr[j]) {\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n  }\n    return arr;\n  }\n  [1,2,3,4].selectSort() //[1,2,3,4] \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-77\">3.4最大值</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">Math.max(...[1,2,3,4]) //4\nMath.max.apply(this,[1,2,3,4]) //4\n[1,2,3,4].reduce( (prev, cur,curIndex,arr)=> {\n return Math.max(prev,cur);\n},0) //4\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>Math.max()是Math对象内置的方法,参数是字符串;\nreduce是ES5的数组api,参数有函数和默认初始值;\n函数有四个参数,pre(上一次的返回值),cur(当前值),curIndex(当前值索引),arr(当前数组)</p>\n<p>2.开始篇\n先排序再取值</p>\n<h2 class=\"heading\" data-id=\"heading-78\">3.5求和</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">[1,2,3,4].arr.reduce(function (prev, cur) {\n   return prev + cur;\n },0) //10 \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.开始篇</p>\n<pre><code class=\"copyable\">function sum(arr) {\n  var len = arr.length;\n  if(len == 0){\n    return 0;\n  } else if (len == 1){\n    return arr[0];\n  } else {\n    return arr[0] + sum(arr.slice(1));\n  }\n}\nsum([1,2,3,4]) //10\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>利用slice截取改变数组,再利用递归求和</p>\n<h2 class=\"heading\" data-id=\"heading-79\">3.6合并</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">[1,2,3,4].concat([5,6]) //[1,2,3,4,5,6]\n[...[1,2,3,4],...[4,5]] //[1,2,3,4,5,6]\nlet arrA = [1, 2], arrB = [3, 4]\nArray.prototype.push.apply(arrA, arrB))//arrA值为[1,2,3,4]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>2.开始篇</p>\n<pre><code class=\"copyable\">let arr=[1,2,3,4];\n  [5,6].map(item=>{\n   arr.push(item)\n })\n //arr值为[1,2,3,4,5,6],注意不能直接return出来,return后只会返回[5,6]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-80\">3.7判断是否包含值</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">[1,2,3].includes(4) //false\n[1,2,3].indexOf(4) //-1 如果存在换回索引\n[1, 2, 3].find((item)=>item===3)) //3 如果数组中无值返回undefined\n[1, 2, 3].findIndex((item)=>item===3)) //2 如果数组中无值返回-1\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>includes(),find(),findIndex()是ES6的api</p>\n<p>2.开始篇</p>\n<pre><code class=\"copyable\">[1,2,3].some(item=>{\n  return item===3\n}) //true 如果不包含返回false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-81\">3.8类数组转化</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">Array.prototype.slice.call(arguments) //arguments是类数组(伪数组)\nArray.prototype.slice.apply(arguments)\nArray.from(arguments)\n[...arguments]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>类数组:表示有length属性,但是不具备数组的方法<br>\ncall,apply:是改变slice里面的this指向arguments,所以arguments也可调用数组的方法<br>\nArray.from是将类似数组或可迭代对象创建为数组<br>\n...是将类数组扩展为字符串,再定义为数组</p>\n<p>2.开始篇</p>\n<pre><code class=\"copyable\">Array.prototype.slice = function(start,end){  \n      var result = new Array();  \n      start = start || 0;  \n      end = end || this.length; //this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键  \n      for(var i = start; i < end; i++){  \n           result.push(this[i]);  \n      }  \n      return result;  \n } \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-82\">3.9每一项设置值</h2>\n<p>1.终极篇</p>\n<pre><code class=\"copyable\">[1,2,3].fill(false) //[false,false,false] \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>fill是ES6的方法\n2.开始篇</p>\n<pre><code class=\"copyable\">[1,2,3].map(() => 0)\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-83\">3.10每一项是否满足</h2>\n<pre><code class=\"copyable\">[1,2,3].every(item=>{return item>2}) //false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>every是ES5的api,每一项满足返回 true</p>\n<h2 class=\"heading\" data-id=\"heading-84\">3.11有一项满足</h2>\n<pre><code class=\"copyable\">[1,2,3].some(item=>{return item>2}) //true\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>some是ES5的api,有一项满足返回 true</p>\n<h2 class=\"heading\" data-id=\"heading-85\">3.12.过滤数组</h2>\n<pre><code class=\"copyable\">[1,2,3].filter(item=>{return item>2}) //[3]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>filter是ES5的api,返回满足添加的项的数组</p>\n<h2 class=\"heading\" data-id=\"heading-86\">3.13对象和数组转化</h2>\n<pre><code class=\"copyable\">Object.keys({name:'张三',age:14}) //['name','age']\nObject.values({name:'张三',age:14}) //['张三',14]\nObject.entries({name:'张三',age:14}) //[[name,'张三'],[age,14]]\nObject.fromEntries([name,'张三'],[age,14]) //ES10的api,Chrome不支持 , firebox输出{name:'张三',age:14}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-87\">3.14 对象数组</h2>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">[{count:1},{count:2},{count:3}].reduce((p, e)=>p+(e.count), 0)\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h1 class=\"heading\" data-id=\"heading-88\">4.数据结构篇</h1>\n<blockquote>\n<p>数据结构是计算机存储、组织数据的方式,算法是系统描述解决问题的策略。了解基本的数据结构和算法可以提高代码的性能和质量。<br>\n也是程序猿进阶的一个重要技能。<br>\n手撸代码实现栈,队列,链表,字典,二叉树,动态规划和贪心算法</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-89\">4.1 栈</h2>\n<p>栈的特点：先进后出</p>\n<pre><code class=\"copyable\">class Stack {\n    constructor() {\n      this.items = [];\n    }\n\n    // 入栈\n    push(element) {\n      this.items.push(element);\n    }\n\n    // 出栈\n    pop() {\n      return this.items.pop();\n    }\n\n    // 末位\n    get peek() {\n      return this.items[this.items.length - 1];\n    }\n\n    // 是否为空栈\n    get isEmpty() {\n      return !this.items.length;\n    }\n\n    // 长度\n    get size() {\n      return this.items.length;\n    }\n\n    // 清空栈\n    clear() {\n      this.items = [];\n    }\n  }\n\n  // 实例化一个栈\n  const stack = new Stack();\n  console.log(stack.isEmpty); // true\n\n  // 添加元素\n  stack.push(5);\n  stack.push(8);\n\n  // 读取属性再添加\n  console.log(stack.peek); // 8\n  stack.push(11);\n  console.log(stack.size); // 3\n  console.log(stack.isEmpty); // false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-90\">4.2 队列</h2>\n<p>队列：先进先出\nclass Queue {\nconstructor(items) {\nthis.items = items || [];\n}</p>\n<pre><code class=\"copyable\">    enqueue(element) {\n      this.items.push(element);\n    }\n\n    dequeue() {\n      return this.items.shift();\n    }\n\n    front() {\n      return this.items[0];\n    }\n\n    clear() {\n      this.items = [];\n    }\n\n    get size() {\n      return this.items.length;\n    }\n\n    get isEmpty() {\n      return !this.items.length;\n    }\n\n    print() {\n      console.log(this.items.toString());\n    }\n  }\n\n  const queue = new Queue();\n  console.log(queue.isEmpty); // true\n\n  queue.enqueue(\"John\");\n  queue.enqueue(\"Jack\");\n  queue.enqueue(\"Camila\");\n  console.log(queue.size); // 3\n  console.log(queue.isEmpty); // false\n  queue.dequeue();\n  queue.dequeue();\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-91\">4.3 链表</h2>\n<p>链表:<br>\n存贮有序元素的集合;<br>\n但是不同于数组,每个元素是一个存贮元素本身的节点和指向下一个元素引用组成<br>\n要想访问链表中间的元素,需要从起点开始遍历找到所需元素</p>\n<pre><code class=\"copyable\">class Node {\n    constructor(element) {\n      this.element = element;\n      this.next = null;\n    }\n  }\n\n  // 链表\n  class LinkedList {\n    constructor() {\n      this.head = null;\n      this.length = 0;\n    }\n\n    // 追加元素\n    append(element) {\n      const node = new Node(element);\n      let current = null;\n      if (this.head === null) {\n        this.head = node;\n      } else {\n        current = this.head;\n        while (current.next) {\n          current = current.next;\n        }\n        current.next = node;\n      }\n      this.length++;\n    }\n\n    // 任意位置插入元素\n    insert(position, element) {\n      if (position >= 0 && position <= this.length) {\n        const node = new Node(element);\n        let current = this.head;\n        let previous = null;\n        let index = 0;\n        if (position === 0) {\n          this.head = node;\n        } else {\n          while (index++ < position) {\n            previous = current;\n            current = current.next;\n          }\n          node.next = current;\n          previous.next = node;\n        }\n        this.length++;\n        return true;\n      }\n      return false;\n    }\n\n    // 移除指定位置元素\n    removeAt(position) {\n      // 检查越界值\n      if (position > -1 && position < length) {\n        let current = this.head;\n        let previous = null;\n        let index = 0;\n        if (position === 0) {\n          this.head = current.next;\n        } else {\n          while (index++ < position) {\n            previous = current;\n            current = current.next;\n          }\n          previous.next = current.next;\n        }\n        this.length--;\n        return current.element;\n      }\n      return null;\n    }\n\n    // 寻找元素下标\n    findIndex(element) {\n      let current = this.head;\n      let index = -1;\n      while (current) {\n        if (element === current.element) {\n          return index + 1;\n        }\n        index++;\n        current = current.next;\n      }\n      return -1;\n    }\n\n    // 删除指定文档\n    remove(element) {\n      const index = this.findIndex(element);\n      return this.removeAt(index);\n    }\n\n    isEmpty() {\n      return !this.length;\n    }\n\n    size() {\n      return this.length;\n    }\n\n    // 转为字符串\n    toString() {\n      let current = this.head;\n      let string = \"\";\n      while (current) {\n        string += ` ${current.element}`;\n        current = current.next;\n      }\n      return string;\n    }\n  }\n  const linkedList = new LinkedList();\n\n  console.log(linkedList);\n  linkedList.append(2);\n  linkedList.append(6);\n  linkedList.append(24);\n  linkedList.append(152);\n\n  linkedList.insert(3, 18);\n  console.log(linkedList);\n  console.log(linkedList.findIndex(24));  \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-92\">4.4 字典</h2>\n<p>字典：类似对象，以key，value存贮值\nclass Dictionary {\nconstructor() {\nthis.items = {};\n}</p>\n<pre><code class=\"copyable\">    set(key, value) {\n      this.items[key] = value;\n    }\n\n    get(key) {\n      return this.items[key];\n    }\n\n    remove(key) {\n      delete this.items[key];\n    }\n\n    get keys() {\n      return Object.keys(this.items);\n    }\n\n    get values() {\n      /*\n    也可以使用ES7中的values方法\n    return Object.values(this.items)\n    */\n\n      // 在这里我们通过循环生成一个数组并输出\n      return Object.keys(this.items).reduce((r, c, i) => {\n        r.push(this.items[c]);\n        return r;\n      }, []);\n    }\n  }\n  const dictionary = new Dictionary();\n  dictionary.set(\"Gandalf\", \"gandalf@email.com\");\n  dictionary.set(\"John\", \"johnsnow@email.com\");\n  dictionary.set(\"Tyrion\", \"tyrion@email.com\");\n\n  console.log(dictionary);\n  console.log(dictionary.keys);\n  console.log(dictionary.values);\n  console.log(dictionary.items);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-93\">4.5 二叉树</h2>\n<p>特点：每个节点最多有两个子树的树结构\nclass NodeTree {\nconstructor(key) {\nthis.key = key;\nthis.left = null;\nthis.right = null;\n}\n}</p>\n<pre><code class=\"copyable\">  class BinarySearchTree {\n    constructor() {\n      this.root = null;\n    }\n\n    insert(key) {\n      const newNode = new NodeTree(key);\n      const insertNode = (node, newNode) => {\n        if (newNode.key < node.key) {\n          if (node.left === null) {\n            node.left = newNode;\n          } else {\n            insertNode(node.left, newNode);\n          }\n        } else {\n          if (node.right === null) {\n            node.right = newNode;\n          } else {\n            insertNode(node.right, newNode);\n          }\n        }\n      };\n      if (!this.root) {\n        this.root = newNode;\n      } else {\n        insertNode(this.root, newNode);\n      }\n    }\n\n    //访问树节点的三种方式:中序,先序,后序\n    inOrderTraverse(callback) {\n      const inOrderTraverseNode = (node, callback) => {\n        if (node !== null) {\n          inOrderTraverseNode(node.left, callback);\n          callback(node.key);\n          inOrderTraverseNode(node.right, callback);\n        }\n      };\n      inOrderTraverseNode(this.root, callback);\n    }\n\n    min(node) {\n      const minNode = node => {\n        return node ? (node.left ? minNode(node.left) : node) : null;\n      };\n      return minNode(node || this.root);\n    }\n\n    max(node) {\n      const maxNode = node => {\n        return node ? (node.right ? maxNode(node.right) : node) : null;\n      };\n      return maxNode(node || this.root);\n    }\n  }\n  const tree = new BinarySearchTree();\n  tree.insert(11);\n  tree.insert(7);\n  tree.insert(5);\n  tree.insert(3);\n  tree.insert(9);\n  tree.insert(8);\n  tree.insert(10);\n  tree.insert(13);\n  tree.insert(12);\n  tree.insert(14);\n  tree.inOrderTraverse(value => {\n    console.log(value);\n  });\n\n  console.log(tree.min());\n  console.log(tree.max());\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-94\">5.算法篇</h1>\n<h2 class=\"heading\" data-id=\"heading-95\">5.1 冒泡算法</h2>\n<p>冒泡排序，选择排序，插入排序，此处不做赘述.</p>\n<h2 class=\"heading\" data-id=\"heading-96\">5.2 斐波那契</h2>\n<p>特点：第三项等于前面两项之和</p>\n<pre><code class=\"copyable\">function fibonacci(num) { \n    if (num === 1 || num === 2) { \n        return 1\n    }\n    return fibonacci(num - 1) + fibonacci(num - 2)\n  }\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-97\">5.3 动态规划</h2>\n<p>特点：通过全局规划,将大问题分割成小问题来取最优解<br>\n案例：最少硬币找零<br>\n美国有以下面额(硬币）：d1=1, d2=5, d3=10, d4=25<br>\n如果要找36美分的零钱，我们可以用1个25美分、1个10美分和1个便士（ 1美分)</p>\n<pre><code class=\"copyable\">class MinCoinChange {\n\nconstructor(coins) {\n    this.coins = coins\n    this.cache = {}\n}\n\nmakeChange(amount) {\n    if (!amount) return []\n    if (this.cache[amount]) return this.cache[amount]\n    let min = [], newMin, newAmount\n    this.coins.forEach(coin => {\n        newAmount = amount - coin\n        if (newAmount >= 0) {\n            newMin = this.makeChange(newAmount)\n        }\n        if (newAmount >= 0 && \n             (newMin.length < min.length - 1 || !min.length) && \n             (newMin.length || !newAmount)) {\n            min = [coin].concat(newMin)\n        }\n    })\n    return (this.cache[amount] = min)\n}\n}\n\nconst rninCoinChange = new MinCoinChange([1, 5, 10, 25])\nconsole.log(rninCoinChange.makeChange(36))\n// [1, 10, 25]\nconst minCoinChange2 = new MinCoinChange([1, 3, 4])\nconsole.log(minCoinChange2.makeChange(6))\n// [3, 3]\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-98\">5.4 贪心算法</h2>\n<p>特点：通过最优解来解决问题\n用贪心算法来解决2.3中的案例</p>\n<pre><code class=\"copyable\">class MinCoinChange2 {\n\nconstructor(coins) {\n    this.coins = coins\n}\n\nmakeChange(amount) {\n    const change = []\n    let total = 0\n    this.coins.sort((a, b) => a < b).forEach(coin => {\n        if ((total + coin) <= amount) {\n            change.push(coin)\n            total += coin\n        }\n    })\n    return change\n}\n}\nconst rninCoinChange2 = new MinCoinChange2 ( [ 1, 5, 10, 25])\nconsole.log (rninCoinChange2. makeChange (36))\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-99\">6 设计模式</h1>\n<blockquote>\n<p>设计模式如果应用到项目中，可以实现代码的复用和解耦，提高代码质量。 本文主要介绍14种设计模式\n写UI组件,封装框架必备</p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-100\">6.1 简单工厂模式</h2>\n<p>1.定义：又叫静态工厂方法，就是创建对象，并赋予属性和方法<br>\n2.应用：抽取类相同的属性和方法封装到对象上<br>\n3.代码：</p>\n<pre><code class=\"copyable\">    let UserFactory = function (role) {\n  function User(opt) {\n    this.name = opt.name;\n    this.viewPage = opt.viewPage;\n  }\n  switch (role) {\n    case 'superAdmin':\n      return new User(superAdmin);\n      break;\n    case 'admin':\n      return new User(admin);\n      break;\n    case 'user':\n      return new User(user);\n      break;\n    default:\n      throw new Error('参数错误, 可选参数:superAdmin、admin、user')\n  }\n}\n\n//调用\nlet superAdmin = UserFactory('superAdmin');\nlet admin = UserFactory('admin') \nlet normalUser = UserFactory('user')\n//最后得到角色,可以调用\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-101\">6.2工厂方法模式</h2>\n<p>1.定义：对产品类的抽象使其创建业务主要负责用于创建多类产品的实例<br>\n2.应用:创建实例<br>\n3.代码:</p>\n<pre><code class=\"copyable\">var Factory=function(type,content){\n  if(this instanceof Factory){\n    var s=new this[type](content);\n    return s;\n  }else{\n    return new Factory(type,content);\n  }\n}\n\n//工厂原型中设置创建类型数据对象的属性\nFactory.prototype={\n  Java:function(content){\n    console.log('Java值为',content);\n  },\n  PHP:function(content){\n    console.log('PHP值为',content);\n  },\n  Python:function(content){\n    console.log('Python值为',content);\n  },\n}\n\n//测试用例\nFactory('Python','我是Python');\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-102\">6.3原型模式</h2>\n<p>1.定义:设置函数的原型属性\n2.应用:实现继承\n3.代码:</p>\n<pre><code class=\"copyable\">function Animal (name) {\n  // 属性\n  this.name = name || 'Animal';\n  // 实例方法\n  this.sleep = function(){\n    console.log(this.name + '正在睡觉！');\n  }\n}\n// 原型方法\nAnimal.prototype.eat = function(food) {\n  console.log(this.name + '正在吃：' + food);\n};\n\nfunction Cat(){ \n}\nCat.prototype = new Animal();\nCat.prototype.name = 'cat';\n\n//&emsp;Test Code\nvar cat = new Cat();\nconsole.log(cat.name);//cat\nconsole.log(cat.eat('fish'));//cat正在吃：fish  undefined\nconsole.log(cat.sleep());//cat正在睡觉！ undefined\nconsole.log(cat instanceof Animal); //true \nconsole.log(cat instanceof Cat); //true  \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-103\">6.4单例模式</h2>\n<p>1.定义:只允许被实例化依次的类\n2.应用:提供一个命名空间\n3.代码:</p>\n<pre><code class=\"copyable\">let singleCase = function(name){\n    this.name = name;\n};\nsingleCase.prototype.getName = function(){\n    return this.name;\n}\n// 获取实例对象\nlet getInstance = (function() {\n    var instance = null;\n    return function(name) {\n        if(!instance) {//相当于一个一次性阀门,只能实例化一次\n            instance = new singleCase(name);\n        }\n        return instance;\n    }\n})();\n// 测试单体模式的实例,所以one===two\nlet one = getInstance(\"one\");\nlet two = getInstance(\"two\");   \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-104\">6.5外观模式</h2>\n<p>1.定义:为子系统中的一组接口提供一个一致的界面\n2.应用:简化复杂接口\n3.代码:\n<a target=\"_blank\" href=\"https://www.cnblogs.com/linda586586/p/4237093.html\" rel=\"nofollow noopener noreferrer\">外观模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-105\">6.6适配器模式</h2>\n<p>1.定义:将一个接口转换成客户端需要的接口而不需要去修改客户端代码，使得不兼容的代码可以一起工作\n2.应用:适配函数参数\n3.代码:\n<a target=\"_blank\" href=\"https://www.cnblogs.com/TomXu/archive/2012/04/11/2435452.html\" rel=\"nofollow noopener noreferrer\">适配器模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-106\">6.7装饰者模式</h2>\n<p>1.定义:不改变原对象的基础上,给对象添加属性或方法\n2.代码</p>\n<pre><code class=\"copyable\">let decorator=function(input,fn){\n  //获取事件源\n  let input=document.getElementById(input);\n  //若事件源已经绑定事件\n  if(typeof input.onclick=='function'){\n    //缓存事件源原有的回调函数\n    let oldClickFn=input.onclick;\n    //为事件源定义新事件\n    input.onclick=function(){\n      //事件源原有回调函数\n      oldClickFn();\n      //执行事件源新增回调函数\n      fn();\n    }\n  }else{\n    //未绑定绑定\n    input.onclick=fn;\n  }\n}\n\n//测试用例\ndecorator('textInp',function(){\n  console.log('文本框执行啦');\n})\ndecorator('btn',function(){\n  console.log('按钮执行啦');\n})\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-107\">6.8桥接模式</h2>\n<p>1.定义:将抽象部分与它的实现部分分离，使它们都可以独立地变化\n2.代码\n<a target=\"_blank\" href=\"https://www.cnblogs.com/TomXu/archive/2012/04/19/2437321.html\" rel=\"nofollow noopener noreferrer\">桥接模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-108\">6.9模块方法模式</h2>\n<p>1.定义:定义一个模板,供以后传不同参数调用\n2.代码:\n<a target=\"_blank\" href=\"https://blog.csdn.net/namechenfl/article/details/80685741\" rel=\"nofollow noopener noreferrer\">模块方法模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-109\">6.10.观察者模式</h2>\n<p>1.作用:解决类与对象,对象与对象之间的耦合\n2.代码:</p>\n<pre><code class=\"copyable\">let Observer=\n  (function(){\n    let _message={};\n    return {\n      //注册接口,\n        //1.作用:将订阅者注册的消息推入到消息队列\n        //2.参数:所以要传两个参数,消息类型和处理动作,\n        //3.消息不存在重新创建,存在将消息推入到执行方法\n        \n      regist:function(type,fn){\n        //如果消息不存在,创建\n        if(typeof _message[type]==='undefined'){\n          _message[type]=[fn];\n        }else{\n          //将消息推入到消息的执行动作\n          _message[type].push(fn);\n        }\n      },\n\n      //发布信息接口\n        //1.作用:观察这发布消息将所有订阅的消息一次执行\n        //2.参数:消息类型和动作执行传递参数\n        //3.消息类型参数必须校验\n      fire:function(type,args){\n        //如果消息没有注册,则返回\n        if(!_message[type]) return;\n          //定义消息信息\n          var events={\n            type:type, //消息类型\n            args:args||{} //消息携带数据\n          },\n          i=0,\n          len=_message[type].length;\n          //遍历消息\n          for(;i<len;i++){\n            //依次执行注册消息\n            _message[type][i].call(this,events);\n          }\n      },\n\n      //移除信息接口\n        //1.作用:将订阅者注销消息从消息队列清除\n        //2.参数:消息类型和执行的动作\n        //3.消息参数校验\n      remove:function(type,fn){\n        //如果消息动作队列存在\n        if(_message[type] instanceof Array){\n          //从最后一个消息动作序遍历\n          var i=_message[type].length-1;\n          for(;i>=0;i--){\n            //如果存在该动作在消息队列中移除\n            _message[type][i]===fn&&_message[type].splice(i,1);\n          }\n        }\n      }\n    }\n  })()\n\n//测试用例\n  //1.订阅消息\n  Observer.regist('test',function(e){\n    console.log(e.type,e.args.msg);\n  })\n\n  //2.发布消息\n  Observer.fire('test',{msg:'传递参数1'});\n  Observer.fire('test',{msg:'传递参数2'});\n  Observer.fire('test',{msg:'传递参数3'});\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 class=\"heading\" data-id=\"heading-110\">6.11状态模式</h2>\n<p>1.定义:一个对象状态改变会导致行为变化\n2.作用:解决复杂的if判断\n3.代码\n<a target=\"_blank\" href=\"https://www.jianshu.com/p/ec9b9a1cd148\" rel=\"nofollow noopener noreferrer\">状态模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-111\">6.12策略模式</h2>\n<p>1.定义:定义了一系列家族算法，并对每一种算法单独封装起来，让算法之间可以相互替换，独立于使用算法的客户\n2.代码\n<a target=\"_blank\" href=\"https://www.cnblogs.com/Medeor/p/5001841.html\" rel=\"nofollow noopener noreferrer\">策略模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-112\">6.13.访问模式</h2>\n<p>1.定义:通过继承封装一些该数据类型不具备的属性,\n2.作用:让对象具备数组的操作方法\n3.代码:\n<a target=\"_blank\" href=\"https://blog.csdn.net/itpinpai/article/details/51644922\" rel=\"nofollow noopener noreferrer\">访问者模式</a></p>\n<h2 class=\"heading\" data-id=\"heading-113\">6.14中介者模式</h2>\n<p>1.定义:设置一个中间层,处理对象之间的交互\n2.代码:\n<a target=\"_blank\" href=\"https://www.cnblogs.com/xiaohuochai/p/8042198.html\" rel=\"nofollow noopener noreferrer\">中介者模式</a></p>\n<h1 class=\"heading\" data-id=\"heading-114\">7. HTTP</h1>\n<h2 class=\"heading\" data-id=\"heading-115\">1.1 什么是 HTTP</h2>\n<p>HTTP 是一个连接客户端，网关和服务器的一个协议。</p>\n<h2 class=\"heading\" data-id=\"heading-116\">7.2 特点</h2>\n<p>支持客户/服务器模式：可以连接客户端和服务端；<br>\n简单快速：请求只需传送请求方法，路径和请求主体；<br>\n灵活：传输数据类型灵活；<br>\n无连接：请求结束立即断开；<br>\n无状态：无法记住上一次请求。</p>\n<h2 class=\"heading\" data-id=\"heading-117\">7.3 怎么解决无状态和无连接</h2>\n<p>无状态：HTTP 协议本身无法解决这个状态，只有通过 cookie 和 session 将状态做贮存，常见的场景是登录状态保持；</p>\n<p>无连接：可以通过自身属性 Keep-Alive。</p>\n<h2 class=\"heading\" data-id=\"heading-118\">7.4 请求过程</h2>\n<p>HTTP(S) 请求地址 → DNS 解析 → 三次握手 → 发送请求 → 四次挥手</p>\n<p>三次握手过程图片来源 CSDN）\n</p><figure><img alt=\"3 次握手.jpg\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/22/16df367f3bcb72d1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"656\" data-height=\"450\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"656\" height=\"450\"></svg>\"><figcaption></figcaption></figure>\n在这里插入图片描述<p></p>\n<ol start=\"3\">\n<li>四次挥手过（图片来源 CSDN）\n<figure><img alt=\"image\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/22/16df358c44fb0adb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"691\" data-height=\"467\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"691\" height=\"467\"></svg>\"><figcaption></figcaption></figure>\n在这里插入图片描述</li>\n</ol>\n<h2 class=\"heading\" data-id=\"heading-119\">7.5 HTTP 0.9~3.0 对比</h2>\n<h3 class=\"heading\" data-id=\"heading-120\">7.5.1 HTTP 0.9</h3>\n<p>只允许客户端发送 GET 这一种请求；<br>\n且不支持请求头，协议只支持纯文本；<br>\n无状态性，每个访问独立处理，完成断开；<br>\n无状态码。</p>\n<h3 class=\"heading\" data-id=\"heading-121\">7.5.2 HTTP 1.0</h3>\n<p>有身份认证，三次握手；\n请求与响应支持头域；\n请求头内容；</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept</td>\n<td>可接受的 MIME 类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>数据可解码的格式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>可接受语言</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>值 keep-alive 是长连接</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>主机和端口</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>是否缓存,指定 no-cache 返回刷新</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>页面路由</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>值为时间</td>\n</tr>\n</tbody>\n</table>\n<p>响应头内容；</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Connection</td>\n<td>值 keep-alive 是长连接</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>返回文档类型,常见的值有 text/plain,text/html,text/json</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>消息发送的时间</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>值为时间,s 返回的最后修改时间</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>缓存过期时间,b 和 s 时间做对比</td>\n</tr>\n</tbody>\n</table>\n<p>注意</p>\n<p>expires 是响应头内容，返回一个固定的时间,缺陷是时间到了服务器要重新设置;<br>\n请求头中如果有 If-Modified-Since，服务器会将时间与 last-modified 对比，相同返回 304;<br>\n响应对象以一个响应状态行开始;<br>\n响应对象不只限于超文本;<br>\n支持 GET、HEAD、POST 方法;<br>\n有状态码;<br>\n支持长连接（但默认还是使用短连接）、缓存机制以及身份认证。</p>\n<h3 class=\"heading\" data-id=\"heading-122\">7.5.3 HTTP 1.1</h3>\n<p>请求头增加 Cache-Control</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cache-Control</td>\n<td>在1.1 引入的方法,指定请求和响应遵循的缓存机制,值有:public(b 和 s 都缓存),private(b 缓存),no-cache(不缓存),no-store(不缓存),max-age(缓存时间,s 为单位),min-fresh(最小更新时间),max-age=3600</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>上次请求响应头返回的 etag 值响应头增加 Cache-Control，表示所有的缓存机制是否可以缓存及哪种类型 etag 返回的哈希值,第二次请求头携带去和服务器值对比</td>\n</tr>\n</tbody>\n</table>\n<p>注意</p>\n<p>Cache-Control 的 max-age 返回是缓存的相对时间\nCache-Control 优先级比 expires 高\n缺点：不能第一时间拿到最新修改文件</p>\n<h3 class=\"heading\" data-id=\"heading-123\">7.5.4 HTTP 2.0</h3>\n<p>采用二进制格式传输;<br>\n多路复用，其实就是将请求数据分成帧乱序发送到 TCP 中。TCP 只能有一个 steam，所以还是会阻塞;<br>\n报头压缩;<br>\n服务器推送主动向 B 端发送静态资源，避免往返延迟。</p>\n<h3 class=\"heading\" data-id=\"heading-124\">7.5.5 HTTP 3.0</h3>\n<p>1.是基于 QUIC 协议，基于 UDP<br>\n2.特点:<br>\n自定义连接机制：TCP 以 IP/端口标识,变化重新连接握手，UDP 是一 64 位 ID 标识，是无连接；<br>\n自定义重传机制：TCP 使用序号和应答传输，QUIC 是使用递增序号传输； 无阻塞的多路复用：同一条 QUIC 可以创建多个 steam。</p>\n<h3 class=\"heading\" data-id=\"heading-125\">7.5.6 HTTPS</h3>\n<p>1.https 是在 http 协议的基础上加了个 SSL；<br>\n2.主要包括\u0010：握手(凭证交换和验证)和记录协议(数据进行加密)。</p>\n<h3 class=\"heading\" data-id=\"heading-126\">7.5.7 缓存</h3>\n<p>1.按协议分：协议层缓存和非 http 协议缓存：<br>\n1.1协议层缓存：利用 http 协议头属性值设置；<br>\n1.2非协议层缓存：利用 meta 标签的 http-equiv 属性值 Expires,set-cookie。</p>\n<p>2.按缓存分：强缓存和协商缓存：<br>\n2.1强缓存：利用 cache-control 和 expires 设置，直接返回一个过期时间，所以在缓存期间不请求，If-modify-since；<br>\n2.2协商缓存：响应头返回 etag 或 last-modified 的哈希值，第二次请求头 If-none-match 或 IF-modify-since 携带上次哈希值，一致则返回 304。</p>\n<p>3.协商缓存对比： etag 优先级高于 last-modified；<br>\n4.etag 精度高，last-modified 精度是 s，1s 内 etag 修改多少次都会被记录； last-modified 性能好，etag 要得到 hash 值。</p>\n<p>5.浏览器读取缓存流程：\n会先判断强缓存；再判断协商缓存 etag(last-modified)是否存在；<br>\n存在利用属性 If-None-match(If-Modified-since)携带值；<br>\n请求服务器,服务器对比 etag(last-modified)，生效返回 304。</p>\n<p>F5 刷新会忽略强缓存不会忽略协商缓存，ctrl+f5 都失效</p>\n<h3 class=\"heading\" data-id=\"heading-127\">7.5.8 状态码</h3>\n<table>\n<thead>\n<tr>\n<th>序列</th>\n<th>详情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX(通知)</td>\n<td></td>\n</tr>\n<tr>\n<td>2XX(成功)</td>\n<td>200(成功)、201(服务器创建)、202(服务器接收未处理)、203(非授权信息)、204(未返回内容)、205(重置内容)、206(部分内容)</td>\n</tr>\n<tr>\n<td>3XX(重定向)</td>\n<td>301(永久移动)、302(临时移动)、303(查看其他位置)、304(未修改)、305(使用代理)、307(临时重定向)</td>\n</tr>\n<tr>\n<td>4XX(客户端错误)</td>\n<td>400(错误请求)、401(未授权)、403(禁止)、404(未找到)、405(方法禁用)、406(不接受)、407（需要代理授权）</td>\n</tr>\n<tr>\n<td>5XX(服务器错误)</td>\n<td>500(服务器异常)、501（尚未实施）、502（错误网关）、503（服务不可用）、504（网关超时）、505（HTTP 版本不受支持）</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"heading\" data-id=\"heading-128\">7.5.9 浏览器请求分析</h3>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/22/16df36b1b7da0876?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"514\" data-height=\"524\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"514\" height=\"524\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-129\">7.5.10 总结</h3>\n<p>协议</p>\n<table>\n<thead>\n<tr>\n<th>版本</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>http0.9</td>\n<td>只允许客户端发送 GET 这一种请求;且不支持请求头,协议只支持纯文本;无状态性,每个访问独立处理,完成断开;无状态码</td>\n</tr>\n<tr>\n<td>http1.0\t解决 0.9 的缺点,增加 If-modify-since(last-modify)和 expires 缓存属性</td>\n<td></td>\n</tr>\n<tr>\n<td>http1.x</td>\n<td>增加 cache-control 和 If-none-match(etag)缓存属性</td>\n</tr>\n<tr>\n<td>http2.0</td>\n<td>采用二进制格式传输;多路复用;报头压缩;服务器推送</td>\n</tr>\n<tr>\n<td>http3.0</td>\n<td>采用 QUIC 协议,自定义连接机制;自定义重传机制;无阻塞的多路复用</td>\n</tr>\n</tbody>\n</table>\n<p>缓存</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>强缓存</td>\n<td>通过 If-modify-since(last-modify)、expires 和 cache-control 设置，属性值是时间，所以在时间内不用请求</td>\n</tr>\n<tr>\n<td>协商缓存</td>\n<td>通过 If-none-match(etag)设置，etag 属性是哈希值，所以要请求和服务器值对比</td>\n</tr>\n</tbody>\n</table>\n<h1 class=\"heading\" data-id=\"heading-130\">8.总结</h1>\n<p>这只是 JS 原生从初级到高级的梳理;<br>\n原创码字不易,欢迎 star!</p>\n",
      "id": "dznpvx6xlg0",
      "author": "张张-💫",
      "title": "JS 原生面经从初级到高级【近1.5W字】"
    },
    {
      "content": "<h1 class=\"heading\" data-id=\"heading-0\">一、CSS问题</h1>\n<h4 class=\"heading\" data-id=\"heading-1\">1.flex布局</h4>\n<blockquote>\n<p>display:flex; 在父元素设置，子元素受弹性盒影响，默认排成一行，如果超出一行，按比例压缩\nflex:1; 子元素设置，设置子元素如何分配父元素的空间，flex:1,子元素宽度占满整个父元素align-items:center 定义子元素在父容器中的对齐方式，center 垂直居中justify-content:center 设置子元素在父元素中居中，前提是子元素没有把父元素占满，让子元素水平居中。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-2\">2.css3的新特性</h4>\n<blockquote>\n<p>transtion\ntransition-property 规定设置过渡效果的 CSS 属性的名称。</p>\n</blockquote>\n<blockquote>\n<p>transition-duration 规定完成过渡效果需要多少秒或毫秒。</p>\n</blockquote>\n<blockquote>\n<p>transition-timing-function 规定速度效果的速度曲线。</p>\n</blockquote>\n<blockquote>\n<p>transition-delay 定义过渡效果何时开始。</p>\n</blockquote>\n<blockquote>\n<p>animation属性可以像Flash制作动画一样，通过控制关键帧来控制动画的每一步，实现更为复杂的动画效果。</p>\n</blockquote>\n<blockquote>\n<p>ainimation实现动画效果主要由两部分组成：</p>\n</blockquote>\n<blockquote>\n<p>通过类似Flash动画中的帧来声明一个动画；</p>\n</blockquote>\n<blockquote>\n<p>在animation属性中调用关键帧声明的动画。</p>\n</blockquote>\n<blockquote>\n<p>translate 3D建模效果</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-3\">3.img中alt和title的区别</h4>\n<blockquote>\n<p>图片中的 alt属性是在图片不能正常显示时出现的文本提示。</p>\n</blockquote>\n<blockquote>\n<p>图片中的 title属性是在鼠标在移动到元素上的文本提示。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-4\">4.用纯CSS创建一个三角形</h4>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"> <style>\n    div {\n        width: 0;\n        height: 0;\n        border-top: 40px solid transparent;\n        border-left: 40px solid transparent;\n        border-right: 40px solid transparent;\n        border-bottom: 40px solid <span class=\"hljs-comment\">#ff0000;</span>\n    }\n    </style>\n</head>\n<body>\n  <div></div>\n</body>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-5\">5.如何理解CSS的盒子模型？</h4>\n<blockquote>\n<p>标准盒子模型：宽度=内容的宽度（content）+ border + padding</p>\n</blockquote>\n<blockquote>\n<p>低版本IE盒子模型：宽度=内容宽度（content+border+padding)</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-6\">6.如何让一个div水平居中</h4>\n<blockquote>\n<p>已知宽度，block元素 ，添加添加margin:0 auto属性。</p>\n</blockquote>\n<blockquote>\n<p>已知宽度，绝对定位的居中 ，上下左右都为0，margin:auto</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-7\">7.如何让一个div水平垂直居中</h4>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">div {\nposition: relative / fixed; /* 相对定位或绝对定位均可 */\nwidth:500px;\nheight:300px;\ntop: 50%;\nleft: 50%;\nmargin-top:-150px;\nmargin-left:-250px;\n 外边距为自身宽高的一半 */\nbackground-color: pink; /* 方便看效果 */\n }\n\n.container {\ndisplay: flex;\nalign-items: center; /* 垂直居中 */\njustify-content: center; /* 水平居中 */\n \n}\n.container div {\nwidth: 100px; /* 可省 */\nheight: 100px; /* 可省 */\nbackground-color: pink; /* 方便看效果 */\n}  \n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-8\">8.如何清除浮动？</h4>\n<blockquote>\n<p>clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式\n{clear:both;height:0;overflow:hidden;}</p>\n</blockquote>\n<blockquote>\n<p>给浮动元素父级设置高度</p>\n</blockquote>\n<blockquote>\n<p>父级同时浮动（需要给父级同级元素添加浮动）</p>\n</blockquote>\n<blockquote>\n<p>父级设置成inline-block，其margin: 0 auto居中方式失效</p>\n</blockquote>\n<blockquote>\n<p>给父级添加overflow:hidden 清除浮动方法</p>\n</blockquote>\n<blockquote>\n<p>万能清除法 after伪类 清浮动（现在主流方法，推荐使用）</p>\n</blockquote>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">float_div:after{\ncontent:<span class=\"hljs-string\">\".\"</span>;\nclear:both;\ndisplay:block;\nheight:0;\noverflow:hidden;\nvisibility:hidden;\n}\n.float_div{\nzoom:1\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-9\">9.css3实现三栏布局，左右固定，中间自适应</h4>\n<blockquote>\n<p>圣杯布局/双飞翼布局</p>\n</blockquote>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"> <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        .middle,\n        .left,\n        .right {\n            position: relative;\n            <span class=\"hljs-built_in\">float</span>: left;\n            min-height: 130px;\n        }\n        .container {\n            padding: 0 220px 0 200px;\n            overflow: hidden;\n        }\n        .left {\n            margin-left: -100%;\n            left: -200px;\n            width: 200px;\n            background: red;\n        }\n        .right {\n            margin-left: -220px;\n            right: -220px;\n            width: 220px;\n            background: green;\n        }\n        .middle {\n            width: 100%;\n            background: blue;\n            word-break: <span class=\"hljs-built_in\">break</span>-all;\n        }\n    </style>\n</head>\n<body>\n    <div class=<span class=\"hljs-string\">'container'</span>>\n        <div class=<span class=\"hljs-string\">'middle'</span>></div>\n        <div class=<span class=\"hljs-string\">'left'</span>></div>\n        <div class=<span class=\"hljs-string\">'right'</span>></div>\n    </div>\n</body>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-10\">10.display:none 和 visibility: hidden的区别</h4>\n<blockquote>\n<p>display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。</p>\n</blockquote>\n<blockquote>\n<p>visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-11\">11.CSS中 link 和@import 的区别是？</h4>\n<blockquote>\n<p>link属于HTML标签，而@import是CSS提供的页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载</p>\n</blockquote>\n<blockquote>\n<p>import只在IE5以上才能识别，而link是HTML标签，无兼容问题</p>\n</blockquote>\n<blockquote>\n<p>link方式的样式的权重 高于@import的权重.</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-12\">12.position的absolute与fixed共同点与不同点</h4>\n<blockquote>\n<p>共同点：\n改变行内元素的呈现方式，display被置为block\n让元素脱离普通流，不占据空间\n默认会覆盖到非定位元素上</p>\n</blockquote>\n<blockquote>\n<p>不同点：\nabsolute的”根元素“是可以设置的\nfixed的”根元素“固定为浏览器窗口。当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-13\">13..transition和animation的区别</h4>\n<blockquote>\n<p>Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，\n而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from .... to，而animation可以一帧一帧的。</p>\n</blockquote>\n<blockquote>\n<p>transition 规定动画的名字  规定完成过渡效果需要多少秒或毫秒  规定速度效果  定义过渡效果何时开始\nanimation  指定要绑定到选择器的关键帧的名称</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-14\">14.CSS优先级</h4>\n<pre><code class=\"copyable\">不同级别：总结排序：!important > 行内样式>ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性\n\t1.属性后面加!import 会覆盖页面内任何位置定义的元素样式\n\t2.作为style属性写在元素内的样式\n\t3.id选择器\n\t4.类选择器\n\t5.标签选择器\n\t6.通配符选择器（*）\n\t7.浏览器自定义或继承\n**同一级别：后写的会覆盖先写的**\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<blockquote>\n<p>css选择器的解析原则：选择器定位DOM元素是从右往左的方向，这样可以尽早的过滤掉一些不必要的样式规则和元素</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-15\">15.雪碧图：</h4>\n<pre><code class=\"copyable\">        多个图片集成在一个图片中的图\n\t使用雪碧图可以减少网络请求的次数，加快允许的速度\n\t通过background-position，去定位图片在屏幕的哪个位置\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-16\">二、JS问题</h1>\n<h4 class=\"heading\" data-id=\"heading-17\">1.typeof和instance of 检测数据类型有什么区别？</h4>\n<blockquote>\n<p>相同点：\n都常用来判断一个变量是否为空，或者是什么类型的。</p>\n</blockquote>\n<blockquote>\n<p>不同点：\ntypeof\t\t返回值是一个字符串，用来说明变量的数据类型\ninstanceof        用于判断一个变量是否属于某个对象的实例.</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-18\">16.使元素消失的方法</h4>\n<pre><code class=\"copyable\">visibility:hidden、display:none、z-index=-1、opacity：0\n1.opacity：0,该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定了一些事件，如click事件也能触发\n2.visibility:hidden,该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件\n3.display:node, 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删掉\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-19\">.谈一谈深克隆和浅克隆？</h4>\n<blockquote>\n<p>浅克隆:\n只是拷贝了基本类型的数据，而引用类型数据，复制后也是会发生引用，我们把这种拷贝叫做“（浅复制）浅拷贝”，换句话说，浅复制仅仅是指向被复制的内存地址，如果原地址中对象被改变了，那么浅复制出来的对象也会相应改变。</p>\n</blockquote>\n<blockquote>\n<p>深克隆：\n创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。\nJSON.parse、JSON.stringify()</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-20\">3.es6的新特性都有哪些？</h4>\n<blockquote>\n<p>let定义块级作用域变量\n没有变量的提升，必须先声明后使用\nlet声明的变量，不能与前面的let，var，conset声明的变量重名</p>\n</blockquote>\n<blockquote>\n<p>const 定义只读变量\nconst声明变量的同时必须赋值，const声明的变量必须初始化，一旦初始化完毕就不允许修改\nconst声明变量也是一个块级作用域变量\nconst声明的变量没有“变量的提升”，必须先声明后使用\nconst声明的变量不能与前面的let， var ， const声明的变量重\nconst定义的对象\\数组中的属性值可以修改,基础数据类型不可以</p>\n</blockquote>\n<blockquote>\n<p>ES6可以给形参函数设置默认值</p>\n</blockquote>\n<blockquote>\n<p>在数组之前加上三个点（...）展开运算符</p>\n</blockquote>\n<blockquote>\n<p>数组的解构赋值、对象的解构赋值</p>\n</blockquote>\n<blockquote>\n<p>箭头函数的特点\n箭头函数相当于匿名函数，是不能作为构造函数的，不能被new\n箭头函数没有arguments实参集合,取而代之用...剩余运算符解决\n箭头函数没有自己的this。他的this是继承当前上下文中的this\n箭头函数没有函数原型\n箭头函数不能当做Generator函数，不能使用yield关键字\n不能使用call、apply、bind改变箭头函数中this指向\nSet数据结构，数组去重</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-21\">4.==和===区别是什么？</h4>\n<blockquote>\n<p>=赋值</p>\n</blockquote>\n<blockquote>\n<p>==返回一个布尔值；相等返回true，不相等返回false；\n允许不同数据类型之间的比较；\n如果是不同类型的数据进行，会默认进行数据类型之间的转换；\n如果是对象数据类型的比较，比较的是空间地址</p>\n</blockquote>\n<blockquote>\n<p>=== 只要数据类型不一样，就返回false；</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-22\">5.常见的设计模式有哪些？</h4>\n<pre><code class=\"copyable\">1、js工厂模式\n2、js构造函数模式\n3、js原型模式\n4、构造函数+原型的js混合模式\n5、构造函数+原型的动态原型模式\n6、观察者模式\n7、发布订阅模式\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-23\">6.call bind apply 的区别？</h4>\n<blockquote>\n<p>call() 和apply()的第一个参数相同，就是指定的对象。这个对象就是该函数的执行上下文。</p>\n</blockquote>\n<blockquote>\n<p>call()和apply()的区别就在于，两者之间的参数。</p>\n</blockquote>\n<blockquote>\n<p>call()在第一个参数之后的 后续所有参数就是传入该函数的值。</p>\n</blockquote>\n<blockquote>\n<p>apply() 只有两个参数，第一个是对象，第二个是数组，这个数组就是该函数的参数。\nbind() 方法和前两者不同在于： bind() 方法会返回执行上下文被改变的函数而不会立即执行，而前两者是\t直接执行该函数。他的参数和call()相同。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-24\">7.js继承方式有哪些？</h4>\n<blockquote>\n<p>原型链继承\n核心： 将父类的实例作为子类的原型</p>\n</blockquote>\n<blockquote>\n<p>构造继承\n核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类</p>\n</blockquote>\n<blockquote>\n<p>实例继承\n核心：为父类实例添加新特性，作为子类实例返回</p>\n</blockquote>\n<blockquote>\n<p>拷贝继承</p>\n</blockquote>\n<blockquote>\n<p>组合继承\n核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现\t函数复用</p>\n</blockquote>\n<blockquote>\n<p>寄生组合继承\n核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实\t例方法/属性，避免的组合继承的缺点</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-25\">8.你怎样看待闭包？</h4>\n<blockquote>\n<p>个人感觉，简单来说闭包就是在函数里面声明函数，本质上说就是在函数内部和函数外部搭建起一座桥梁，使得子函数可以访问父函数中所有的局部变量，但是反之不可以，这只是闭包的作用之一，另一个作用，则是保护变量不受外界污染，使其一直存在内存中，在工作中我们还是少使用闭包的好，因为闭包太消耗内存，不到万不得已的时候尽量不使用。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-26\">9.你是如何理解原型和原型链的？</h4>\n<blockquote>\n<p>把所有的对象共用的属性全部放在堆内存的一个对象（共用属性组成的对象），然后让每一个对象的 __proto__存储这个「共用属性组成的对象」的地址。而这个共用属性就是原型，原型出现的目的就是为了减少不必要的内存消耗。而原型链就是对象通过__proto__向当前实例所属类的原型上查找属性或方法的机制，如果找到Object的原型上还是没有找到想要的属性或者是方法则查找结束，最终会返回undefined</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-27\">10.浏览器渲染的主要流程是什么?</h4>\n<blockquote>\n<p>将html代码按照深度优先遍历来生成DOM树。\ncss文件下载完后也会进行渲染，生成相应的CSSOM。\n当所有的css文件下载完且所有的CSSOM构建结束后，就会和DOM一起生成Render Tree。\n接下来，浏览器就会进入Layout环节，将所有的节点位置计算出来。\n最后，通过Painting环节将所有的节点内容呈现到屏幕上。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-28\">11.从输入url地址到页面相应都发生了什么？</h4>\n<pre><code class=\"copyable\">1、浏览器的地址栏输入URL并按下回车。\n2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。3、DNS解析URL对应的IP。\n4、根据IP建立TCP连接（三次握手）。\n5、HTTP发起请求。\n6、服务器处理请求，浏览器接收HTTP响应。\n7、渲染页面，构建DOM树。\n8、关闭TCP连接（四次挥手）\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-29\">12.session、cookie、localStorage的区别</h4>\n<blockquote>\n<p>相同点\n都是保存在浏览器端，且同源的。</p>\n</blockquote>\n<blockquote>\n<p>不同点</p>\n</blockquote>\n<ul>\n<li>cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。</li>\n<li>而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</li>\n<li>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。\n存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据。</li>\n<li>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</li>\n<li>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</li>\n<li>cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。\n作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li>\n<li>localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-30\">13.js中跨域方法</h4>\n<blockquote>\n<p>同源策略（协议+端口号+域名要相同）</p>\n</blockquote>\n<blockquote>\n<p>1、jsonp跨域(只能解决get）\n原理：动态创建一个script标签。利用script标签的src属性不受同源策略限制，因为所有的src属性和href属性都不受同源策略的限制，可以请求第三方服务器资源内容</p>\n<blockquote>\n<p>步骤：\n1).去创建一个script标签\n2).script的src属性设置接口地址\n3).接口参数，必须要带一个自定义函数名，要不然后台无法返回数据\n4).通过定义函数名去接受返回的数据</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>2、document.domain 基础域名相同 子域名不同</p>\n</blockquote>\n<blockquote>\n<p>3、window.name 利用在一个浏览器窗口内，载入所有的域名都是共享一个window.name</p>\n</blockquote>\n<blockquote>\n<p>4、服务器设置对CORS的支持\n原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p>\n</blockquote>\n<blockquote>\n<p>5、利用h5新特性window.postMessage()</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-31\">14.前端有哪些页面优化方法?</h4>\n<ul>\n<li>减少 HTTP请求数</li>\n<li>从设计实现层面简化页面</li>\n<li>合理设置 HTTP缓存</li>\n<li>资源合并与压缩</li>\n<li>合并 CSS图片，减少请求数的又一个好办法。</li>\n<li>将外部脚本置底（将脚本内容在页面信息内容加载后再加载）</li>\n<li>多图片网页使用图片懒加载。</li>\n<li>在js中尽量减少闭包的使用</li>\n<li>尽量合并css和js文件</li>\n<li>尽量使用字体图标或者SVG图标，来代替传统的PNG等格式的图片</li>\n<li>减少对DOM的操作</li>\n<li>在JS中避免“嵌套循环”和 “死循环”</li>\n<li>尽可能使用事件委托（事件代理）来处理事件绑定的操作</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-32\">15.Ajax的四个步骤</h4>\n<blockquote>\n<p>1.创建ajax实例</p>\n</blockquote>\n<blockquote>\n<p>2.执行open 确定要访问的链接 以及同步异步</p>\n</blockquote>\n<blockquote>\n<p>3.监听请求状态</p>\n</blockquote>\n<blockquote>\n<p>4.发送请求</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-33\">16.数组去重的方法</h4>\n<blockquote>\n<p>ES6的set对象\n先将原数组排序，在与相邻的进行比较，如果不同则存入新数组</p>\n</blockquote>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> unique(arr){\n    var arr2 = arr.sort();\n    var res = [arr2[0]];\n    <span class=\"hljs-keyword\">for</span>(var i=1;i<arr2.length;i++){\n        <span class=\"hljs-keyword\">if</span>(arr2[i] !== res[res.length-1]){\n        res.push(arr2[i]);\n    }\n}\n<span class=\"hljs-built_in\">return</span> res;\n}\n利用下标查询\n <span class=\"hljs-keyword\">function</span> unique(arr){\n    var newArr = [arr[0]];\n    <span class=\"hljs-keyword\">for</span>(var i=1;i<arr.length;i++){\n        <span class=\"hljs-keyword\">if</span>(newArr.indexOf(arr[i]) == -1){\n        newArr.push(arr[i]);\n    }\n}\n<span class=\"hljs-built_in\">return</span> newArr;\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-34\">17.ajax中get和post请求的区别</h4>\n<ul>\n<li>get 一般用于获取数据</li>\n<li>get请求如果需要传递参数，那么会默认将参数拼接到url的后面；然后发送给服务器；</li>\n<li>get请求传递参数大小是有限制的；是浏览器的地址栏有大小限制；</li>\n<li>get安全性较低</li>\n<li>get 一般会走缓存，为了防止走缓存，给url后面每次拼的参数不同；放在?后面，一般用个时间戳</li>\n<li>post 一般用于发送数据</li>\n<li>post传递参数，需要把参数放进请求体中，发送给服务器；</li>\n<li>post请求参数放进了请求体中，对大小没有要求；</li>\n<li>post安全性比较高；</li>\n<li>post请求不会走缓存；</li>\n<li></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-35\">18.ajax的状态码</h4>\n<blockquote>\n<p>2开头</p>\n</blockquote>\n<ul>\n<li>200 : 代表请求成功；</li>\n</ul>\n<blockquote>\n<p>3开头</p>\n</blockquote>\n<ul>\n<li>301 : 永久重定向；</li>\n<li>302: 临时转移</li>\n<li>304 : 读取缓存 [表示浏览器端有缓存，并且服务端未更新，不再向服务端请求资源]</li>\n<li>307:临时重定向</li>\n</ul>\n<blockquote>\n<p>以4开头的都是客户端的问题；</p>\n</blockquote>\n<ul>\n<li>400 :数据/格式错误</li>\n<li>401: 权限不够；（身份不合格，访问网站的时候，登录和不登录是不一样的）</li>\n<li>404 : 路径错误，找不到文件</li>\n</ul>\n<blockquote>\n<p>以5开头都是服务端的问题</p>\n</blockquote>\n<ul>\n<li>500 : 服务器的问题</li>\n<li>503: 超负荷；</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-36\">19.移动端的兼容问题</h4>\n<ul>\n<li>给移动端添加点击事件会有300S的延迟\n如果用点击事件，需要引一个fastclick.js文件，解决300s的延迟\n一般在移动端用ontouchstart、ontouchmove、ontouchend</li>\n<li>移动端点透问题,touchstart 早于 touchend 早于click,click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏， 此时 click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上\n尽量都使用touch事件来替换click事件。例如用touchend事件(推荐)。\n用fastclick，<a target=\"_blank\" href=\"https://github.com/ftlabs/fastclick\" rel=\"nofollow noopener noreferrer\">github.com/ftlabs/fast…</a>\n用preventDefault阻止a标签的click\n消除 IE10 里面的那个叉号\ninput:-ms-clear{display:none;}</li>\n<li>设置缓存\n手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置no-cache。</li>\n</ul>\n\n<ul>\n<li>圆角BUG\n某些Android手机圆角失效\nbackground-clip: padding-box;\n防止手机中网页放大和缩小\n这点是最基本的，做为手机网站开发者来说应该都知道的，就是设置meta中的viewport</li>\n</ul>\n\n<ul>\n<li>设置用户截止缩放，一般写视口的时候就已经写好了。</li>\n<li></li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-37\">20.JS中同步和异步,以及js的事件流</h4>\n<blockquote>\n<p>同步：在同一时间内做一件事情</p>\n</blockquote>\n<blockquote>\n<p>异步：在同一时间内做多个事情\nJS是单线程的，每次只能做一件事情，JS运行在浏览器中，浏览器是多线程的，可以在同一时间执行多个任务。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-38\">21.JS中常见的异步任务</h4>\n<blockquote>\n<p>定时器、ajax、事件绑定、回调函数、async await、promise</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-39\">22.TCP的三次握手和四次挥手</h4>\n<blockquote>\n<p>三次握手</p>\n</blockquote>\n<ul>\n<li>第一次握手：客户端发送一个SYN码给服务器，要求建立数据连接；</li>\n<li>第二次握手： 服务器SYN和自己处理一个SYN（标志）；叫SYN+ACK（确认包）；发送给客户端，可以建立连接</li>\n<li>第三次握手： 客户端再次发送ACK向服务器，服务器验证ACK没有问题，则建立起连接；</li>\n</ul>\n<blockquote>\n<p>四次挥手</p>\n</blockquote>\n<ul>\n<li>第一次挥手： 客户端发送FIN(结束)报文，通知服务器数据已经传输完毕；</li>\n<li>第二次挥手: 服务器接收到之后，通知客户端我收到了SYN,发送ACK(确认)给客户端，数据还没有传输完成</li>\n<li>第三次挥手： 服务器已经传输完毕，再次发送FIN通知客户端，数据已经传输完毕</li>\n<li>第四次挥手： 客户端再次发送ACK,进入TIME_WAIT状态；服务器和客户端关闭连接；</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-40\">23.为什么建立连接是三次握手，而断开连接是四次挥手呢?</h4>\n<blockquote>\n<blockquote>\n<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。\n而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>\n</blockquote>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-41\">24.DOM diff原理</h4>\n<blockquote>\n<ul>\n<li>如果元素类型发生变化，直接替换</li>\n<li>如果是文本，则比较文本里面的内容，是否有差异，如果是元素就需要比较当前元素的属性是否相等,会先比较key， 在比较类型 为什么 react中循环 建议不要使用索引 ,如果纯为了展示 那可以使用索引</li>\n</ul>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-42\">25.作用域</h4>\n<blockquote>\n<p>全局作用域</p>\n</blockquote>\n<ul>\n<li>浏览器打开一个页面时，浏览器会给JS代码提供一个全局的运行环境，那么这个环境就是全局作用域\n一个页面只有一个全局作用域，全局作用域下有一个window对象\nwindow是全局作用域下的最大的一个内置对象（全局作用域下定义的变量和函数都会存储在window下）\n如果是全局变量，都会给window新增一个键值对；属性名就是变量名，属性值就是变量所存储的值\n如果变量只被var过，那么存储值是undefined\n在私有作用域中是可以获取到全局变量的，但是在全局作用域中不能获取私有变量</li>\n</ul>\n<blockquote>\n<p>私有作用域</p>\n</blockquote>\n<ul>\n<li>函数执行会形成一个新的私有的作用域（执行多次，形成多个私有作用域）\n私有作用域在全局作用域中形成，具有包含的关系；\n在一个全局作用域中，可以有很多个私有作用域\n在私有作用域下定义的变量都是私有变量\n形参也是私有变量\n函数体中通过function定义的函数也是私有的，在全局作用域不能使用；</li>\n</ul>\n<blockquote>\n<p>块级作用域</p>\n</blockquote>\n<ul>\n<li>es6中新引入的一种作用域\n在js中常见到的if{}、for{}、while{}、try{}、catch{}、switch case{}都是块级作用域\nvar obj = {} //对象的大括号不是块级作用域\n块级作用域中的同一变量不能被重复声明（块级下var和function不能重名，否则会报错）\n作用域链</li>\n</ul>\n<blockquote>\n<p>上级作用域</p>\n</blockquote>\n<ul>\n<li>函数在哪里定义，他的上一级作用域就是哪，和函数在哪个作用域下执行没有关系\n作用域链：当获取变量所对应的值时，首先看变量是否是私有变量，如果不是私有变量，要继续向上一级作用域中查找，如果上一级也没有，那么会继续向上一级查找，直到找到全局作用域为止；如果全局作用域也没有，则会报错；这样一级一级向上查找，就会形成作用域链\n当前作用域没有的，则会继续向上一级作用域查找\n当前函数的上一级作用域跟函数在哪个作用域下执行没有关系，只跟函数在哪定义有关（重点）</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-43\">26.Promise处理异步</h4>\n<blockquote>\n<p>他是ES6中新增加的一个类（new Promise）,目的是为了管理JS中的异步编程的，所以把他称为“Promise设计模式”\nnew Promise 经历三个状态：padding(准备状态：初始化成功、开始执行异步的任务)、fullfilled(成功状态)、rejected(失败状态)==\nPromise本身是同步编程的，他可以管理异步操作的（重点），new Promise的时候，会把传递的函数立即执行\nPromise函数天生有两个参数，resolve(当异步操作执行成功，执行resolve方法),rejected(当异步操作失败，执行reject方法)\nthen()方法中有两个函数，第一个传递的函数是resolve,第二个传递的函数是reject\najax中false代表同步，true代表异步，如果使用异步，不等ajax彻底完成</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-44\">27.map和forEach的区别</h4>\n<blockquote>\n<p>相同点</p>\n</blockquote>\n<ul>\n<li>都是循环遍历数组中的每一项\nforEach和map方法里每次执行匿名函数都支持3个参数，参数分别是item（当前每一项）、index（索引值）、arr（原数组），需要用哪个的时候就写哪个\n匿名函数中的this都是指向window\n只能遍历数组</li>\n</ul>\n<blockquote>\n<p>不同点</p>\n</blockquote>\n<ul>\n<li>map方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。(原数组进行处理之后对应的一个新的数组。)\nmap()方法不会改变原始数组\nmap()方法不会对空数组进行检测\nforEach()方法用于调用数组的每个元素，将元素传给回调函数.(没有return，返回值是undefined）</li>\n</ul>\n<blockquote>\n<blockquote>\n<p><strong>注意</strong>：forEach对于空数组是不会调用回调函数的。</p>\n</blockquote>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-45\">28.async await函数</h4>\n<blockquote>\n<p>async/await函数是异步代码的新方式</p>\n</blockquote>\n<blockquote>\n<p>async/await是基于promise实现的</p>\n</blockquote>\n<blockquote>\n<p>async/await使异步代码更像同步代码</p>\n</blockquote>\n<blockquote>\n<p>await 只能在async函数中使用，不能再普通函数中使用，要成对出现</p>\n</blockquote>\n<blockquote>\n<p>默认返回一个promise实例，不能被改变</p>\n</blockquote>\n<blockquote>\n<p>await下面的代码是异步，后面的代码是同步的</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-46\">29.this指向</h4>\n<blockquote>\n<ul>\n<li>全局作用域下的this指向window</li>\n<li>如果给元素的事件行为绑定函数，那么函数中的this指向当前被绑定的那个元素</li>\n<li>函数中的this，要看函数执行前有没有 . , 有 . 的话，点前面是谁，this就指向谁，如果没有点，指向window</li>\n<li>自执行函数中的this永远指向window</li>\n<li>定时器中函数的this指向window</li>\n<li>构造函数中的this指向当前的实例</li>\n<li>call、apply、bind可以改变函数的this指向</li>\n<li>箭头函数中没有this，如果输出this，就会输出箭头函数定义时所在的作用域中的this</li>\n</ul>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-47\">30.原型</h4>\n<blockquote>\n<blockquote>\n<p>所有的函数数据类型都天生自带一个prototype属性，该属性的属性值是一个对象\nprototype的属性值中天生自带一个constructor属性，其constructor属性值指向当前原型所属的类\n所有的对象数据类型，都天生自带一个_proto_属性，该属性的属性值指向当前实例所属类的原型</p>\n</blockquote>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-48\">31.异步回调（如何解决回调地狱）</h4>\n<pre><code class=\"copyable\">promise、generator、async/await\n\npromise： 1.是一个对象，用来传递异步操作的信息。代表着某个未来才会知道结果的时间，并未这个事件提供统一的api，供进异步处理\n\t  2.有了这个对象，就可以让异步操作以同步的操作的流程来表达出来，避免层层嵌套的回调地狱\n\t  3.promise代表一个异步状态，有三个状态pending（进行中），Resolve(以完成），Reject（失败）\n\t  4.一旦状态改变，就不会在变。任何时候都可以得到结果。从进行中变为以完成或者失败\n\t\tpromise.all() 里面状态都改变，那就会输出，得到一个数组\n\t\tpromise.race() 里面只有一个状态变为rejected或者fulfilled即输出\n\t\tpromis.finally()不管指定不管Promise对象最后状态如何，都会执行的操作（本质上还是then方法的特例）\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-49\">32.前端事件流</h4>\n<pre><code class=\"copyable\">事件流描述的是从页面中接受事件的顺序，事件 捕获阶段 处于目标阶段 事件冒泡阶段 addeventListener 最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。\n  1、事件捕获阶段：实际目标div在捕获阶段不会接受事件，也就是在捕获阶段，事件从document到<html>再到<body>就停止了。\n      2、处于目标阶段：事件在div发生并处理，但是事件处理会被看成是冒泡阶段的一部分。\n      3、冒泡阶段：事件又传播回文档\n   阻止冒泡事件event.stopPropagation()\n\t  function stopBubble(e) {\n    \t\tif (e && e.stopPropagation) { // 如果提供了事件对象event 这说明不是IE浏览器\n      \t\te.stopPropagation()\n    \t\t} else {\n      \t\twindow.event.cancelBubble = true //IE方式阻止冒泡\n    \t      }\n  \t\t   }\n   阻止默认行为event.preventDefault()\n function stopDefault(e) {\n    if (e && e.preventDefault) {\n      e.preventDefault()\n    } else {\n      // IE浏览器阻止函数器默认动作的行为\n      window.event.returnValue = false\n    }\n  }\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-50\">33.事件如何先捕获后冒泡？</h4>\n<blockquote>\n<p>在DOM标准事件模型中，是先捕获后冒泡。但是如果要实现先冒泡后捕获的效果，\n对于同一个事件，监听捕获和冒泡，分别对应相应的处理函数，监听到捕获事件，先暂缓执行，直到冒泡事件被捕获后再执行捕获事件。</p>\n</blockquote>\n<ul>\n<li>哪些事件不支持冒泡事件：鼠标事件：mouserleave  mouseenter\n焦点事件：blur focus\nUI事件：scroll resize</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-51\">34. 如何判断一个变量是对象还是数组（prototype.toString.call()）。</h4>\n<pre><code class=\"copyable\">千万不要使用typeof来判断对象和数组，因为这种类型都会返回object。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<blockquote>\n<p>typeOf()是判断基本类型的Boolean,Number，symbol, undefined, String。\n对于引用类型：除function，都返回object   null返回object。</p>\n</blockquote>\n<blockquote>\n<p>installOf() 用来判断A是否是B的实例，installof检查的是原型。</p>\n</blockquote>\n<blockquote>\n<p>toString() 是Object的原型方法，对于 Object 对象，直接调用 toString()  就能返回 [Object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</p>\n</blockquote>\n<blockquote>\n<p>hasOwnProperty()方法返回一个布尔值，指示对象自身属性中是否具有指定的属性，该方法会忽略掉那些从原型链上继承到的属性。</p>\n</blockquote>\n<blockquote>\n<p>isProperty()方法测试一个对象是否存在另一个对象的原型链上。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-52\">35.setTimeout 和 setInterval的机制</h4>\n<pre><code class=\"copyable\">因为js是单线程的。浏览器遇到etTimeout 和 setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的\n待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-53\">36.splice和slice、map和forEach、 filter()、reduce()的区别</h4>\n<pre><code class=\"copyable\"> 1.slice(start,end):方法可以从已有数组中返回选定的元素，返回一个新数组，\n 包含从start到end（不包含该元素）的数组方法\n\t注意：该方法不会更新原数组，而是返回一个子数组\n 2.splice():该方法想或者从数组中添加或删除项目，返回被删除的项目。（该方法会改变原数组）\n\tsplice(index, howmany,item1,...itemx)\n\t\t·index参数：必须，整数规定添加或删除的位置，使用负数，从数组尾部规定位置\n\t\t·howmany参数：必须，要删除的数量，\n\t\t·item1..itemx:可选，向数组添加新项目\n3.map()：会返回一个全新的数组。使用于改变数据值的时候。会分配内存存储空间数组并返回，forEach（）不会返回数据\n4.forEach(): 不会返回任何有价值的东西，并且不打算改变数据，单纯的只是想用数据做一些事情，他允许callback更改原始数组的元素\n5.reduce(): 方法接收一个函数作为累加器，数组中的每一个值（从左到右）开始缩减，最终计算一个值，不会改变原数组的值\n6.filter(): 方法创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。它里面通过function去做处理\t\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-54\">VUE问题</h1>\n<h4 class=\"heading\" data-id=\"heading-55\">1.聊聊对vue的理解</h4>\n<blockquote>\n<p>vue是一个渐进式的JS框架。他易用，灵活，高效；\n可以把一个页面分隔成多个组件；当其他页面有类似功能时，直接让封装的组件进行复用；\n他是构建用户界面的声明式框架，只关心图层；不关心具体是如何实现的</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-56\">2.V-model的原理是什么？</h4>\n<blockquote>\n<p>Vue的双向数据绑定是由数据劫持结合发布者订阅者实现的。\n数据劫持是通过Object.defineProperty()来劫持对象数据的setter和getter操作。\n在数据变动时作你想做的事</p>\n<ul>\n<li>原理\n通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化->视图更新\n在初始化vue实例时，遍历data这个对象，给每一个键值对利用Object.definedProperty对data的键值对新增get和set方法，利用了事件监听DOM的机制，让视图去改变数据</li>\n</ul>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-57\">3.谈谈对生命周期的理解</h4>\n<ul>\n<li>beforeCreate阶段：vue实例的挂载元素el和数据对象data都是undefined，还没有初始化。</li>\n<li>created阶段：vue实例的数据对象data有了，可以访问里面的数据和方法，未挂载到DOM，el还没有</li>\n<li>beforeMount阶段：vue实例的el和data都初始化了，但是挂载之前为虚拟的dom节点</li>\n<li>mounted阶段：vue实例挂载到真实DOM上，就可以通过DOM获取DOM节点</li>\n<li>beforeUpdate阶段：响应式数据更新时调用，发生在虚拟DOM打补丁之前，适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器</li>\n<li>updated阶段：虚拟DOM重新渲染和打补丁之后调用，组成新的DOM已经更新，避免在这个钩子函数中操作数据，防止死循环</li>\n<li>beforeDestroy阶段：实例销毁前调用，实例还可以用，this能获取到实例，常用于销毁定时器，解绑事件</li>\n<li>destroyed阶段：实例销毁后调用，调用后所有事件监听器会被移除，所有的子实例都会被销毁</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-58\">4.VUE和REACT有什么区别？</h4>\n<blockquote>\n<p>react整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在react中，是单向数据流；</p>\n</blockquote>\n<blockquote>\n<p>vue的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-59\">5.vuex的流程</h4>\n<pre><code class=\"copyable\">页面通过mapAction异步提交事件到action。action通过commit把对应参数同步提交到mutation。\nmutation会修改state中对于的值。 最后通过getter把对应值跑出去，在页面的计算属性中\n通过mapGetter来动态获取state中的值\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-60\">6.vuex有哪几种状态和属性</h4>\n<blockquote>\n<ul>\n<li>state中保存着共有数据，数据是响应式的</li>\n<li>getter可以对state进行计算操作，主要用来过滤一些数据，可以在多组件之间复用</li>\n<li>mutations定义的方法动态修改state中的数据，通过commit提交方法，方法必须是同步的</li>\n<li>actions将mutations里面处理数据的方法变成异步的，就是异步操作数据，通store.dispatch来分发actions，把异步的方法写在actions中，通过commit提交mutations，进行修改数据。</li>\n<li>modules：模块化vuex</li>\n</ul>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-61\">7.vue路由的两种模式</h4>\n<blockquote>\n<ul>\n<li>hash ——即地址栏URL中的#符号（此hsah 不是密码学里的散列运算）\nhash 虽然出现URL中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</li>\n<li>history ——利用了HTML5 History Interface 中新增的pushState() 和replaceState() 方法</li>\n</ul>\n<p>这两个方法应用于浏览器的历史记录站，在当前已有的back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改是，虽然改变了当前的URL，但你浏览器不会立即向后端发送请求。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-62\">8.vue中 key 值的作用</h4>\n<blockquote>\n<p>当 Vue.js 用v-for正在更新已渲染过的元素列表时，它默认用“就地复用”策略。\n如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n</blockquote>\n<blockquote>\n<p>key的作用主要是为了高效的更新虚拟DOM。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-63\">9<code>$route</code>和<code>$router</code>的区别</h4>\n<blockquote>\n<ul>\n<li>$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。</li>\n<li>$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。</li>\n</ul>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-64\">10.vue-router守卫</h4>\n<blockquote>\n<ul>\n<li>导航守卫 router.beforeEach 全局前置守卫</li>\n</ul>\n</blockquote>\n<ul>\n<li>to: Route: 即将要进入的目标（路由对象）</li>\n<li>from: Route: 当前导航正要离开的路由</li>\n<li>next: Function: 一定要调用该方法来 resolve 这个钩子。（一定要用这个函数才能去到下一个路由，如果不用就拦截）\n执行效果依赖 next 方法的调用参数。</li>\n<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</li>\n<li>next(false): 取消进入路由，url地址重置为from路由地址(也就是将要离开的路由地址)。</li>\n</ul>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">// main.js 入口文件\n    import router from <span class=\"hljs-string\">'./router'</span>; // 引入路由\n    router.beforeEach((to, from, next) => { \n      next();\n    });\n    router.beforeResolve((to, from, next) => {\n      next();\n    });\n    router.afterEach((to, from) => {\n      console.log(<span class=\"hljs-string\">'afterEach 全局后置钩子'</span>);\n    });\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>路由独享的守卫 你可以在路由配置上直接定义 beforeEnter 守卫</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">const router = new VueRouter({\n  routes: [\n    {\n      path: <span class=\"hljs-string\">'/foo'</span>,\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>组件内的守卫 你可以在路由组件内直接定义以下路由导航守卫</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">const Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // 在渲染该组件的对应路由被 confirm 前调用\n    // 不！能！获取组件实例 `this`\n    // 因为当守卫执行前，组件实例还没被创建\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n  },\n  beforeRouteLeave (to, from, next) {\n    // 导航离开该组件的对应路由时调用，我们用它来禁止用户离开\n    // 可以访问组件实例 `this`\n    // 比如还未保存草稿，或者在用户离开前，\n    将<span class=\"hljs-built_in\">set</span>Interval销毁，防止离开之后，定时器还在调用。\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-65\">11.axios是什么？怎么使用？描述使用它实现登录功能的流程？</h4>\n<blockquote>\n<p>请求后台资源的模块。</p>\n</blockquote>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">$ npm install axios -S装好\n<span class=\"copy-code-btn\">复制代码</span></code></pre><blockquote>\n<p>然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。\njs中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-66\">12.vue修饰符</h4>\n<ul>\n<li>stop：阻止事件的冒泡</li>\n<li>prevent：阻止事件的默认行为</li>\n<li>once：只触发一次</li>\n<li>self：只触发自己的事件行为时，才会执行</li>\n</ul>\n<h4 class=\"heading\" data-id=\"heading-67\">13.vue项目中的性能优化</h4>\n<blockquote>\n<p>1.不要在模板里面写过多表达式</p>\n</blockquote>\n<blockquote>\n<p>2.循环调用子组件时添加key</p>\n</blockquote>\n<blockquote>\n<p>3.频繁切换的使用v-show，不频繁切换的使用v-if</p>\n</blockquote>\n<blockquote>\n<p>4.尽量少用float，可以用flex</p>\n</blockquote>\n<blockquote>\n<p>5.按需加载，可以用require或者import()按需加载需要的组件</p>\n</blockquote>\n<blockquote>\n<p>6.路由懒加载</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-68\">14.vue.extend和vue.component</h4>\n<blockquote>\n<ul>\n<li>extend\n是构造一个组件的语法器。\n然后这个组件你可以作用到Vue.component这个全局注册方法里\n还可以在任意vue模板里使用组件。\n也可以作用到vue实例或者某个组件中的components属性中并在内部使用apple组件。</li>\n<li>Vue.component\n你可以创建 ，也可以取组件。</li>\n</ul>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-69\">常见的兼容问题</h3>\n<blockquote>\n<p>png24位的图片在iE6浏览器上出现背景\n解决方案是做成PNG8.也可以引用一段脚本处理.</p>\n</blockquote>\n<blockquote>\n<p>浏览器默认的margin和padding不同。\n解决方案是加一个全局的*{margin:0;padding:0;}来统一。</p>\n</blockquote>\n<blockquote>\n<p>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</p>\n</blockquote>\n<blockquote>\n<p>浮动ie产生的双倍距离（IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。） #box{ float:left; width:10px; margin:0 0 0 100px;}</p>\n</blockquote>\n<h1 class=\"heading\" data-id=\"heading-70\">React问题</h1>\n<h4 class=\"heading\" data-id=\"heading-71\">1.react和vue的区别</h4>\n<pre><code class=\"copyable\">   =>  相同点：\n\t1.数据驱动页面，提供响应式的试图组件\n\t2.都有virtual DOM,组件化的开发，通过props参数进行父子之间组件传递数据，都实现了webComponents规范\n\t3.数据流动单向，都支持服务器的渲染SSR\n\t4.都有支持native的方法，react有React native， vue有wexx\n=>  不同点：\n\t1.数据绑定：Vue实现了双向的数据绑定，react数据流动是单向的\n\t2.数据渲染：大规模的数据渲染，react更快\n\t3.使用场景：React配合Redux架构适合大规模多人协作复杂项目，Vue适合小快的项目\n\t4.开发风格：react推荐做法jsx + inline style把html和css都写在js了\n\t\t    vue是采用webpack + vue-loader单文件组件格式，html, js, css同一个文件\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-72\">2.redux中的reducer（纯函数）</h4>\n<pre><code class=\"copyable\">Redux数据流里，reduces其实是根据之前的状态（previous state）和现有的action（current action）\n更新state(这个state可以理解为上下累加器的结果）\n每次redux reducer被执行时，state和action被传入，这个state根据action进行累加或者是'自身消减'(reduce),\n进而返回最新的state,这也就是典型reduce函数的用法：state ->  action ->  state\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-73\">3.react的refs</h4>\n<pre><code class=\"copyable\">refs就想一个逃生窗，允许我们之间访问dom元素或者组件实例，可以向组件添加一个ref属性的值是一个回调函数，\n它将接受地城dom元素或组件的已挂在实例，作为第一个参数\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-74\">4.react中的keys</h4>\n<pre><code class=\"copyable\">帮组我们跟踪哪些项目已更改、添加、从列表中删除，key是独一无二的，可以让我们高效的去定位元素，并且操作它\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-75\">5.React的生命周期</h4>\n<pre><code class=\"copyable\">三个状态：Mounting(已插入真实的DOM）\n\t  Updating(正在被重新渲染)\n\t  Unmounting(已移除真实的DOM)\ncomponentDIdMount 在第一次渲染后调用，只在客服端。之后组件已经生成对应的DOM结构，\ncomponentDidUpdate 在组件完成更新后立即调用，在出初始化是不会调用\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-76\">6.React子组件向父组件传值</h4>\n<pre><code class=\"copyable\">父组件通过props 给子组件传递数据，子组件则是通过调用父组件传给它的函数给父组件传递数据。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-77\">7.为什么虚拟DOM会提高性能 <a target=\"_blank\" href=\"https://www.zhihu.com/question/29504639?sort=created\" rel=\"nofollow noopener noreferrer\">www.zhihu.com/question/29…</a></h4>\n<pre><code class=\"copyable\">虚拟DOM相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的doom操作，从而提高性能\n具体实现步骤：\n\t·用JavaScript对象结构表示DOM树的结构；然后用这个树构建一个真正的DOM树，插到文档中\n        ·当状态变更的时候，重新构造一棵树的对象树，然后用新的树和旧的树进行对比，记录两棵树差异\n\t·把2所记录的差异应用到步骤1所构建的真正的DOM树上，试图就更新了。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-78\">8.diff算法</h4>\n<pre><code class=\"copyable\">1.把树形结构按照层级分解，只比较同级元素\n2.给列表结构的每个单元添加key属性，方便比较。在实际代码中，会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个标记\n3.在深度优先遍历的时候，每遍历到一个节点就把该节点和新的树进行对比。如果有差异的话就记录到一个对象里面\nVritual DOM 算法主要实现上面步骤的三个函数：element， diff， patch。然后就可以实际的进行使用\nreact只会匹配相同的class的component（这里的class指的是组件的名字）\n合并操作，条用component的setState方法的时候，React将其标记为dirty.到每一个时间循环借宿，React检查所有标记dirty的component重新绘制\n4.选择性子树渲染。可以重写shouldComponentUpdate提高diff的性能\t\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-79\">9.简述下flux的思想</h4>\n<pre><code class=\"copyable\">flux的最大特点，就是数据的‘单向流动’\n1.用户访问View\n2.View发出用户的Action\n3.Dispatcher收到Action,要求state进行相应的更新\n4.store更新后，发出一个‘change’事件后，更新页面\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-80\">10.reac性能优化是哪个周期函</h4>\n<pre><code class=\"copyable\">shouldComponentUpdate 这个方法用来判断是否需要调用render方法重新描绘dom.因为dom的描绘非常消耗性能，\n如果我们在shouldComponentUpdate方法中能够写出更优化的dom diff算法，可以极大的提高性能\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-81\">11.react怎么划分业务组件和技术组件</h4>\n<pre><code class=\"copyable\">根据组件的职责通常把组件分为UI组件和容器组件\nUI组件负责UI的呈现，容器组件负责管理数据和逻辑\n两者通过React-redux提供connect方法联系起来\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-82\">12.setState</h4>\n<pre><code class=\"copyable\">setState通过一个队列机制实现state更新，当执行setState时，会将需要更新的state很后放入状态队列\n而不会立即更新this.state，队列机制可以高效地批量更新state。如果不通过setState而直接修改this.state的值\t\n那么该state将不会被放入状态队列中。当下次调用setState并对状态队列进行合并时，就会忽略之前修改的state，造成不可预知的错误\n\n同时，也利用了队列机制实现了setState的异步更新，避免了频繁的重复更新state\n\n同步更新state:\n\tsetState 函数并不会阻塞等待状态更新完毕，因此 setNetworkActivityIndicatorVisible 有可能先于数据渲染完毕就执行。\n\t第二个参数是一个回调函数，在setState的异步操作结束并且组件已经重新渲染的时候执行\n\t也就是说，我们可以通过这个回调来拿到更新的state的值，实现代码的同步\n\n例子：componentDidMount() {\n\n\tfetch('https://test.com')\n    \n\t.then((res) => res.json())\n    \n\t.then(\n    (data) => {\nthis.setState({ data:data });\n\t\t\tStatusBar.setNetworkActivityIndicatorVisible(false);\n        }\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-83\">性能优化</h1>\n<h4 class=\"heading\" data-id=\"heading-84\">一、webpack打包文件体积过大？（最终打包为一个js文件）</h4>\n<pre><code class=\"copyable\">1.异步加载模块\n2.提取第三库\n3.代码压缩\n4.去除不必要的插件\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-85\">二、如何优化webpack构建的性能</h4>\n<pre><code class=\"copyable\">一、减少代码体积 1.使用CommonsChunksPlugin 提取多个chunk之间的通用模块，减少总体代码体积\n\t\t 2.把部分依赖转移到CDN上，避免每次编译过程都由Webpack处理\n\t\t 3.对一些组件库采用按需加载，避免无用的代码\n二、减少目录检索范围\n\t\t ·在使用loader的时候，通过制定exclude和include选项，减少loader遍历的目录范围，从而加快webpack编译速度\n\t\n三、减少检索路经：resolve.alias可以配置webpack模块解析的别名，对于比较深的解析路经，可以对其配置alias\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-86\">三、移动端的性能优化</h4>\n<pre><code class=\"copyable\">  1、首屏加载和按需加载，懒加载\n  2、资源预加载\n  3、图片压缩处理，使用base64内嵌图片\n  4、合理缓存dom对象\n  5、使用touchstart代替click（click 300毫秒的延迟）\n  6、利用transform:translateZ(0)，开启硬件GUP加速\n  7、不滥用web字体，不滥用float（布局计算消耗性能），减少font-size声明\n  8、使用viewport固定屏幕渲染，加速页面渲染内容\n  9、尽量使用事件代理，避免直接事件绑定\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-87\">四、Vue的SPA 如何优化加载速度</h4>\n<pre><code class=\"copyable\">1.减少入口文件体积\n2.静态资源本地缓存\n3.开启Gzip压缩\n4.使用SSR,nuxt.js\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-88\">五、移动端300ms延迟</h4>\n<pre><code class=\"copyable\">由来：\n300毫米延迟解决的是双击缩放。双击缩放，手指在屏幕快速点击两次。safari浏览器就会将网页缩放值原始比例。由于用户可以双击缩放或者是滚动的操作，\n当用户点击屏幕一次之后，浏览器并不会判断用户确实要打开至这个链接，还是想要进行双击操作\n因此，safair浏览器就会等待300ms，用来判断用户是否在次点击了屏幕\n       \n解决方案：1.禁用缩放，设置meta标签 user-scalable=no\n\t  2.fastclick.js\n\t\t原理：FastClick的实现原理是在检查到touchend事件的时候，会通过dom自定义事件立即\n\t\t      发出click事件，并把浏览器在300ms之后真正的click事件阻止掉\nfastclick.js还可以解决穿透问题\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-89\">六、页面的重构；</h4>\n<blockquote>\n<p>在不改变外部行为的前提下，简化结构、添加可读性</p>\n</blockquote>\n<h1 class=\"heading\" data-id=\"heading-90\">服务器端</h1>\n<h4 class=\"heading\" data-id=\"heading-91\">一、状态码：</h4>\n<pre><code class=\"copyable\">  2XX（成功处理了请求状态）\n      200 服务器已经成功处理请求，并提供了请求的网页\n      201 用户新建或修改数据成功\n      202 一个请求已经进入后台\n      204 用户删除成功\n  3XX（每次请求使用的重定向不要超过5次）\n      304 网页上次请求没有更新，节省带宽和开销\n  4XX（表示请求可能出错，妨碍了服务器的处理）\n      400 服务器不理解请求的语法\n      401 用户没有权限（用户名，密码输入错误）\n      403 用户得到授权（401相反），但是访问被禁止\n      404 服务器找不到请求的网页，\n  5XX（表示服务器在处理请求的时候发生内部错误）\n      500 服务器遇到错误，无法完成请求\n      503 服务器目前无法使用（超载或停机维护）     \n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-92\">二、304的缓存原理（添加Etag标签.last-modified） 304 网页上次请求没有更新，节省带宽和开销</h4>\n<pre><code class=\"copyable\">1.服务器首先产生Etag,服务器可在稍后使用它来判断页面是否被修改。本质上，客户端通过该记号传回服务器要求服务器验证（客户端）缓存）\n2.304是\tHTTP的状态码，服务器用来标识这个文件没有被修改，不返回内容，浏览器接受到这个状态码会去去找浏览器缓存的文件\n3.流程：客户端请求一个页面A。服务器返回页面A，并在A上加一个Tage客服端渲染该页面，并把Tage也存储在缓存中。客户端再次请求页面A\n\t并将上次请求的资源和ETage一起传递给服务器。服务器检查Tage.并且判断出该页面自上次客户端请求之后未被修改。直接返回304\n\nlast-modified: 客服端请求资源，同时有一个last-modified的属性标记此文件在服务器最后修改的时间\n\t\t客服端第二次请求此url时，根据http协议。浏览器会向服务器发送一个If-Modified-Since报头，\n\t\t询问该事件之后文件是否被修改，没修改返回304\n\n 有了Last-Modified，为什么还要用ETag？\n  1、因为如果在一秒钟之内对一个文件进行两次更改，Last-Modified就会不正确（Last—Modified不能识别秒单位的修改）\n  2、某些服务器不能精确的得到文件的最后修改时间\n  3、一些文件也行会周期新的更改，但是他的内容并不改变（仅仅改变修改的事件），这个时候我们并不希望客户端认为文件被修改，而重新Get\n\nETag，为什么还要用Last-Modified？\n  1、两者互补，ETag的判断的缺陷，比如一些图片等静态文件的修改\n  2、如果每次扫描内容都生成ETag比较，显然要比直接比较修改时间慢的多。\n\n\nETag是被请求变量的实体值（文件的索引节，大小和最后修改的时间的Hash值）\n  1、ETag的值服务器端对文件的索引节，大小和最后的修改的事件进行Hash后得到的。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-93\">三、get/post的区别</h4>\n<pre><code class=\"copyable\">1.get数据是存放在url之后，以？分割url和传输数据，参数之间以&相连； post方法是把提交的数据放在http包的Body中\n2.get提交的数据大小有限制，（因为浏览器对url的长度有限制），post的方法提交的数据没有限制\n3.get需要request.queryString来获取变量的值，而post方式通过request.from来获取变量的值\n4.get的方法提交数据，会带来安全问题，比如登录一个页面，通过get的方式提交数据，用户名和密码就会出现在url上\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-94\">四、http协议的理解</h4>\n<pre><code class=\"copyable\">1.超文本的传输协议，是用于从万维网服务器超文本传输到本地资源的传输协议\n2.基于TCP/IP通信协议来传递数据（HTML，图片资源）\n3.基于运用层的面向对象的协议，由于其简洁、快速的方法、适用于分布式超媒体信息系统\n4.http请求信息request：\n\t请求行（request line）、请求头部（header）,空行和请求数据四部分构成\n\n\t请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.\n\t请求头部，用来说明服务器要使用的附加信息\n\t空行，请求头部后面的空行是必须的\n\t请求数据也叫主体，可以添加任意的其他数据。\n5.http相应信息Response\n\t状态行、消息报头、空行和响应正文\n\n\t状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成\n\t消息报头，用来说明客户端要使用的一些附加信息\n\t空行，消息报头后面的空行是必须的\n\t响应正文，服务器返回给客户端的文本信息。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-95\">五、http和https</h4>\n<pre><code class=\"copyable\">https：是以安全为目标的HTTP通道，简单讲是HTTP的安全版本，通过SSL加密\nhttp：超文本传输协议。是一个客服端和服务器端请求和应答的标准（tcp）,使浏览器更加高效，使网络传输减少\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-96\">六、http1.0 1.1 2.0的区别</h4>\n<pre><code class=\"copyable\">长连接：HTTP1.0需要使用keep-alive参数来告知服务器建立一个长连接，而HTP1.1默认支持长连接\n节约宽带：HTTP1.1支持只发送一个header信息（不带任何body信息）\nhost域（设置虚拟站点，也就是说，web server上的多个虚拟站点可以共享同一个ip端口）：HTTP1.0没有host域\n\n1.http2采用的二进制文本传输数据，而非http1文本格式，二进制在协议的解析和扩展更好\n2.数据压缩：对信息头采用了HPACK进行压缩传输，节省了信息头带来的网络流量\n3.多路复用：一个连接可以并发处理多个请求\n4.服务器推送：我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-97\">七、web缓存</h4>\n<pre><code class=\"copyable\">1.web缓存就是存在于客户端与服务器之间的一个副本、当你第一个发出请求后，缓存根据请求保存输出内容的副本\n2.缓存的好处\n        （1）减少不必要的请求\n    （2）降低服务器的压力，减少服务器的消耗\n    （3）降低网络延迟，加快页面打开速度（直接读取浏览器的数据）\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-98\">八、常见的web安全及防护原理</h4>\n<pre><code class=\"copyable\">1.sql注入原理：通郭sql命令插入到web表单递交或者输入活命，达到欺骗服务器执行的恶意sql命令\n\t\t防范：1.对用户输入进行校验\n\t\t       2.不适用动态拼接sql\n2.XSS（跨站脚本攻击）：往web页面插入恶意的html标签或者js代码。\n\t\t        举例子：在论坛放置一个看是安全的链接，窃取cookie中的用户信息\n\t\t\t防范：1.尽量采用post而不使用get提交表单\n\t\t\t      2.避免cookie中泄漏用户的隐式\n3.CSRF(跨站请求伪装）：通过伪装来自受信任用户的请求\n\t\t\t举例子：黄轶老师的webapp音乐请求数据就是利用CSRF跨站请求伪装来获取QQ音乐的数据\n\t\t\t防范：在客服端页面增加伪随机数，通过验证码\nXSS和CSRF的区别：\n   1.XSS是获取信息，不需要提前知道其他用户页面的代码和数据包\n   2.CSRF代替用户完成指定的动作，需要知道其他页面的代码和数据包\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-99\">九、CDN（内容分发网络）</h4>\n<pre><code class=\"copyable\">1.尽可能的避开互联网有可能影响数据传输速度和稳定性的瓶颈和环节。使内容传输的更快更稳定。\n2.关键技术：内容存储和分发技术中\n3.基本原理：广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对的地区或者网络中。当用户访问网络时利用全局负载技术\n\t    将用户的访问指向距离最近的缓存服务器，由缓存服务器直接相应用户的请求（全局负载技术）\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-100\">十、TCP三次握手\t(客服端和服务器端都需要确认各自可收发）</h4>\n<pre><code class=\"copyable\">客服端发c起请求连接服务器端s确认，服务器端也发起连接确认客服端确认。\n第一次握手：客服端发送一个请求连接，服务器端只能确认自己可以接受客服端发送的报文段\n第二次握手： 服务端向客服端发送一个链接，确认客服端收到自己发送的报文段\n第三次握手： 服务器端确认客服端收到了自己发送的报文段\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-101\">十一、从输入url到获取页面的完整过程  <a target=\"_blank\" href=\"https://blog.csdn.net/samjustin1/article/details/52650520\" rel=\"nofollow noopener noreferrer\">blog.csdn.net/samjustin1/…</a></h4>\n<pre><code class=\"copyable\">1.查询NDS(域名解析),获取域名对应的IP地址  查询浏览器缓存\n2.浏览器与服务器建立tcp链接（三次握手）\n3.浏览器向服务器发送http请求(请求和传输数据）\n4.服务器接受到这个请求后，根据路经参数，经过后端的一些处理生成html代码返回给浏览器\n5.浏览器拿到完整的html页面代码开始解析和渲染，如果遇到外部的css或者js，图片一样的步骤\n6.浏览器根据拿到的资源对页面进行渲染，把一个完整的页面呈现出来\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-102\">十二、浏览器渲染原理及流程 DOM -> CSSOM -> render -> layout -> print</h4>\n<pre><code class=\"copyable\">流程：解析html以及构建dom树 -> 构建render树 ->  布局render树 -> 绘制render树\n概念：1.构建DOM树： 渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node(包括js生成的标签)生成内容树\n      2.构建渲染树： 解析对应的css样式文件信息（包括js生成的样式和外部的css）\n      3.布局渲染树：从根节点递归调用，计算每一个元素的大小，位置等。给出每个节点所在的屏幕的精准位置\n      4.绘制渲染树：遍历渲染树，使用UI后端层来绘制每一个节点\n\n重绘：当盒子的位置、大小以及其他属性，例如颜色、字体大小等到确定下来之后，浏览器便把这些颜色都按照各自的特性绘制一遍，将内容呈现在页面上\n\t触发重绘的条件：改变元素外观属性。如：color，background-color等\n\t重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观\n注意：table及其内部元素需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多发时间，要尽量避免使用table布局\n\n重排（重构/回流/reflow）： 当渲染书中的一部分（或全部）因为元素的规模尺寸，布局，隐藏等改变而需要重新构建，这就是回流。\n\t每个页面都需要一次回流，就是页面第一次渲染的时候\n\n重排一定会影响重绘，但是重绘不一定会影响重排\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-103\">十三、为什么css放在顶部而js写在后面</h4>\n<pre><code class=\"copyable\">1.浏览器预先加载css后，可以不必等待HTML加载完毕就可以渲染页面了\n2.其实HTML渲染并不会等到完全加载完在渲染页面，而是一边解析DOM一边渲染。\n3.js写在尾部，主要是因为js主要扮演事件处理的功能，一方面很多操作是在页面渲染后才执行的。另一方面可以节省加载时间，使页面能够更加的加载，提高用户的良好体验\n\n但是随着JS技术的发展，JS也开始承担页面渲染的工作。比如我们的UI其实可以分被对待，把渲染页面的js放在前面，时间处理的js放在后面\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-104\">十四、存储方式与传输方式</h4>\n<pre><code class=\"copyable\">1.indexBD: 是h5的本地存储库，把一些数据存储到浏览器中，没网络，浏览器可以从这里读取数据，离线运用。5m\n2.Cookie: 通过浏览器记录信息确认用户身份，最大4kb,这也就限制了传输的数据，请求的性能会受到影响\n3.Session: 服务器端使用的一种记录客户状态的机制（session_id存在set_cookie发送到客服端，保存为cookie）\n4.localStroage: h5的本地存储，数据永久保存在客服端\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-105\">cookie，sessionStorage，localStorage</h4>\n<p>1、cookie，sessionStorage，localStorage是存放在客户端，session对象数据是存放在服务器上\n实际上浏览器和服务器之间仅需传递session id即可，服务器根据session-id找到对应的用户session对象\nsession存储数据更安全一些，一般存放用户信息，浏览器只适合存储一般的数据\n2、cookie数据始终在同源的http请求中携带，在浏览器和服务器来回传递，里面存放着session-id\nsessionStorage，localStorage仅在本地保存\n3、大小限制区别，cookie数据不超过4kb，localStorage在谷歌浏览中2.6MB\n4、数据有效期不同，cookie在设置的（服务器设置）有效期内有效，不管窗口和浏览器关闭\nsessionStorage仅在当前浏览器窗口关闭前有效，关闭即销毁（临时存储）\nlocalStorage始终有效</p>\n<p>SessionStorage和localStorage区别：\n1.sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在用一个会话的页面中才能被访问（也就是说在第一次通信过程中）\n并且在会话结束后数据也随之销毁，不是一个持久的本地存储，会话级别的储存\n2.localStorage用于持久化的本地存储，除非主动删除数据，否则不会过期</p>\n<h4 class=\"heading\" data-id=\"heading-106\">token、cookie、session三者的理解？？？！！！</h4>\n<pre><code class=\"copyable\">1、token就是令牌，比如你授权(登录)一个程序时,他就是个依据,判断你是否已经授权该软件（最好的身份认证，安全性好，且是唯一的）\n    用户身份的验证方式    \n\n2、cookie是写在客户端一个txt文件，里面包括登录信息之类的，这样你下次在登录某个网站，就会自动调用cookie自动登录用户名\n    服务器生成，发送到浏览器、浏览器保存，下次请求再次发送给服务器（存放着登录信息）\n\n3、session是一类用来客户端和服务器之间保存状态的解决方案，会话完成被销毁（代表的就是服务器和客户端的一次会话过程）\n    cookie中存放着sessionID，请求会发送这个id。sesion因为request对象而产生。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-107\">基于Token的身份验证：（最简单的token: uid用户唯一的身份识别 + time当前事件戳 + sign签名）</h4>\n<pre><code class=\"copyable\">  1、用户通过用户名和密码发送请求\n  2、服务器端验证\n  3、服务器端返回一个带签名的token，给客户端\n  4、客户端储存token，并且每次用于发送请求\n  5、服务器验证token并且返回数据\n  每一次请求都需要token\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-108\">cookie与session区别</h4>\n<pre><code class=\"copyable\">  1、cookie数据存放在客户的浏览器上，session数据放在服务器上。\n  2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。\n  3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。\n  4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-109\">session与token区别</h4>\n<pre><code class=\"copyable\">  1、session认证只是把简单的User的信息存储Session里面，sessionID不可预测，一种认证手段。只存在服务端，不能共享到其他的网站和第三方App\n  2、token是oAuth Token，提供的是认证和授权，认证针对用户，授权是针对App，目的就是让某APP有权访问某用户的的信息。Token是唯一的，\n     token不能转移到其他的App，也不能转到其他用户上。（适用于App）\n  3、session的状态是存在服务器端的，客户端只存在session id， Token状态是存储在客户端的\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-110\">Cookie的弊端有哪些？？？（优势：保存客户端数据，分担了服务器存储的负担）</h4>\n<pre><code class=\"copyable\">  1、数量和长度的限制。每个特定的域名下最多生成20个cookie（chorme和safari没有限制）\n  2、安全性问题。\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-111\">设计模式</h1>\n<blockquote>\n<p>一、观察者模式：<a target=\"_blank\" href=\"https://juejin.im/post/5a14e9edf265da4312808d86\" rel>juejin.im/post/5a14e9…</a>   <a target=\"_blank\" href=\"https://juejin.im/post/5af05d406fb9a07a9e4d2799\" rel>juejin.im/post/5af05d…</a>\n在软件开发设计中是一个对象(subject)，维护一系列依赖他的对象（observer），当任何状态发生改变自动通知他们。强依赖关系\n简单理解：数据发生改变时，对应的处理函数就会自动执行。一个Subjet,用来维护Observers,为某些event来通知（notify）观察者</p>\n</blockquote>\n<blockquote>\n<p>二、发布-订阅者  有一个信息中介，过滤 耦合性低\n它定义了一种一对多的关系，可以使多个观察者对象对一个主题对象进行监听，当这个主题对象发生改变时，依赖的所有对象都会被通知到。</p>\n</blockquote>\n<ul>\n<li>-两者的区别：\n1.观察者模式中，观察者知道Subject ,两者是相关联的，而发发布订阅者只有通过信息代理进行通信\n2.在发布订阅模式中，组件式松散耦合的。正好和观察者模式相反。\n3.观察者大部分是同步的，比如事件的触发。Subject就会调用观察者的方法。而发布订阅者大多数是异步的（）\n4.观察者模式需要在单个应用程序地址空间中实现，而发布订阅者更像交叉应用模式。</li>\n</ul>\n<h1 class=\"heading\" data-id=\"heading-112\">数据结构和算法</h1>\n<h4 class=\"heading\" data-id=\"heading-113\">一、两个栈实现一个队列，两个队列实现一个栈 <a target=\"_blank\" href=\"https://www.cnblogs.com/MrListening/p/5697459.html\" rel=\"nofollow noopener noreferrer\">www.cnblogs.com/MrListening…</a></h4>\n<h4 class=\"heading\" data-id=\"heading-114\">二、红黑树（解决二叉树依次插入多个节点时的线型排列） <a target=\"_blank\" href=\"https://juejin.im/post/5a27c6946fb9a04509096248\" rel>juejin.im/post/5a27c6…</a></h4>\n<h4 class=\"heading\" data-id=\"heading-115\">三、最小栈的实现（查找最小元素，用两个栈配合栈内元素的下标）<a target=\"_blank\" href=\"https://juejin.im/post/5a2ff8c651882533d0230a85\" rel>juejin.im/post/5a2ff8…</a></h4>\n<h4 class=\"heading\" data-id=\"heading-116\">四、十大排序</h4>\n<pre><code class=\"copyable\">1.冒泡排序：重复走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把它们交换过来。\n  实现过程：1.比较相邻的元素。如果第一个比第二个大，就交换他们两个\n\t    2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数\n\t    3.针对所有的元素重复以上的步骤，除了最后一个\n\t    4.重复步骤1-3，直到排序完成。\n2.选择排序：首先在未排序序列中找到最小值，放在排序序列的起始位置，然后，在从剩下未排序元素中继续寻找最小值，然后放在与排序序列的末尾\n  实现过程：\n\n3.插入排序：构建有序序列，对于未排序数据，在已排序序列中冲后向前扫描，找到相应位置并插入\n  实现过程：1.从第一个元素开始，该元素可以认为已经被排序\n\t    2.取出下一个元素，在已排序的元素序列中冲后向前扫描\n\t    3.如果该元素（以排序）大于新元素，将元素向后移一位\n\t    4.在取出一个元素，比较之前的，直到找到自己合适的位置\n\n4.桶排序：将数据分布到有限数量的桶里，每个桶在分别排序\n\n1.快速排序：快速排序使用分治法把一个串（list）分为两个子串（sub-lists）.具体算法实现\n  实现过程：1.从数组中挑出一个元素，成为一个基准\n\t    2.重新排列数组，所有元素比基准小的摆在基准前面，所有元素比基准大的摆在基准后面（相同的可以摆在一边）\n\t\t这个分区退出之后，该基准就处于数列的中间位置。成为分区操作。\n\t    3.递归的把小于基准值的子数列和大于基准值元素的子数列排序\n算法实现： function quickSort (arr) {\n\t\tif （arr.length <= 1） {return arr}\n\t\tvar destIndex = Math.floor(arr.length/2)\n\t\tvar left = [], right = [];\n\t\tvar dest = arr.splice(destIndex,1)[0];\n\t\tfor (var i =0;i<arr.length;i++){\n\t\t\tif (arr[i]<dest) {\n\t\t\tleft.push(arr[i])\n\t\t\t} else {\n\t\t\tright.push(arr[i]) }\n\t\treturn quickSort(left).concat([dest],quickSort(right)\n\t\t\t\n\n2.堆排序：利用对这种数据结构所涉及的一种排序算法，堆积是一个近乎完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或大于）它的父节点。\n  实现过程：1.\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-117\">五、数组去重 <a target=\"_blank\" href=\"https://juejin.im/post/5aed6110518825671b026bed#heading-6\" rel>juejin.im/post/5aed61…</a></h4>\n<pre><code class=\"copyable\">1.双重循环\n2.indexOf\n3.数组排序去重 最快你Olong\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-118\">六、字符串</h4>\n<pre><code class=\"copyable\">判断回文字符串：（递归的思想）\n\t1.字符串分隔，倒转，聚合[...obj].reverse().join('')\n\t2.字符串头部和尾部，逐次向中间检测 \n\t\t实现：function isPalindrome(line) {\n\t\t\tline += '';\n\t\t\tfor (var i=0,j=line.length-1;i<j;i++,j--) {\n\t\t\t\tif (line.chartAt(i) !== line.chartAt(j) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\t\n\t3.递归\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h4 class=\"heading\" data-id=\"heading-119\">七、二分查找（有序数组的查找）</h4>\n<pre><code class=\"copyable\"> 二分查找可以解决已排序数组的查找问题，即只要数组中包含T(要查找的值)，那么通过不断的缩小包含T的数据范围，就可以最终要找到的数\n (1) 一开始,数据范围覆盖整个数组。\n (2) 将数组的中间项与T进行比较，如果T比数组的中间项小，则到数组的前半部分继续查找，反之，则到数组的后半部分继续查找。\n (3) 就这样，每次查找都可以排除一半元素，相当于范围缩小一半。这样反复比较，反复缩小范围，最终会在数组中找到T\n代码实现：function binarySearch (data, dest, start, end){\n\t\tvar end = end || data.length-1;\n\t\tvar start = start || 0;\n\t\tvar m = Math.floor((start+end)/2);\n\t\tif (dest<data[m]){\n\t\t\treturn binarySearch(data, dest, 0, m-1)\n\t\t} else {\n\t\t\treturn binarySearch(data, dest, m+1, end)\n\t\t}}\n\t\treturn false\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h1 class=\"heading\" data-id=\"heading-120\">手写代码</h1>\n<h4 class=\"heading\" data-id=\"heading-121\">一、动手实现一个bind（原理通过apply，call）</h4>\n<pre><code class=\"copyable\">一句话概括：1.bind()返回一个新函数，并不会立即执行。\n\t    2.bind的第一个参数将作为他运行时的this，之后的一系列参数将会在传递的实参前传入作为他的参数\n\t    3.bind返回函数作为构造函数，就是可以new的，bind时指定的this值就会消失，但传入的参数依然生效\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">Function.prototype.bind = <span class=\"hljs-keyword\">function</span> (obj, arg) {\n   var arg = Array.prototype.slice.call(arguments, 1);\n   var context = this;\n   var bound = <span class=\"hljs-keyword\">function</span> (newArg) {\n   arg = arg.concat(Array.prototype.slice.call(newArg);\n   <span class=\"hljs-built_in\">return</span> context.apply(obj, arg)\n}\n  var F =  <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {}  // 在new一个<span class=\"hljs-built_in\">bind</span>会生成新函数，必须的条件就是要继承原函数的原型，因此用到寄生继承来完成我们的过程\n  F.prototype = context.prototype;\n  bound.prototype =  new F();\n  <span class=\"hljs-built_in\">return</span> bound;\n}\t\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-122\">二、 AJAX （异步的javascript和xml）</h4>\n<pre><code class=\"copyable\">ajax的原理：相当于在用户和服务器之间加一个中间层（ajax引擎),使用户操作与服务器响应异步化。\n优点：在不刷新整个页面的前提下与服务器通信维护数据。不会导致页面的重载\n      可以把前端服务器的任务转嫁到客服端来处理，减轻服务器负担，节省宽带\n劣势：不支持back。对搜索引擎的支持比较弱；不容易调试\t\n怎么解决呢？通过location.hash值来解决Ajax过程中导致的浏览器前进后退按键失效，\n解决以前被人常遇到的重复加载的问题。主要比较前后的hash值，看其是否相等，在判断是否触发ajax\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> getData(url) {\n    var xhr = new XMLHttpRequest();  // 创建一个对象，创建一个异步调用的对象\n    xhr.open(<span class=\"hljs-string\">'get'</span>, url, <span class=\"hljs-literal\">true</span>)  // 设置一个http请求，设置请求的方式，url以及验证身份\n    xhr.send() //发送一个http请求\n    xhr.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {  //设置一个http请求状态的函数\n      <span class=\"hljs-keyword\">if</span> (xhr.readyState == 4 && xhr.status ==200) {\n        console.log(xhr.responseText)  // 获取异步调用返回的数据\n      }\n    }\n  }\n  Promise(getData(url)).resolve(data => data)\n\n\t AJAX状态码：0 - （未初始化）还没有调用send()方法\n\t\t     1 - （载入）已调用send方法，正在发送请求\n\t\t     2 - （载入完成呢）send()方法执行完成\n\t\t     3 - （交互）正在解析相应内容\n\t\t     4 - （完成）响应内容解析完成，可以在客户端调用了\n```\n\n<span class=\"hljs-comment\">#### 三、函数节流（throttle）</span>\n```\n <span class=\"hljs-keyword\">function</span> throttle (func, <span class=\"hljs-built_in\">wait</span>) {\n        var timeout;\n        var previous = 0;\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n            context = this;\n            args = arguments;\n            <span class=\"hljs-keyword\">if</span> (!timeout) {\n                timeout = <span class=\"hljs-built_in\">set</span>Timeout(() => {\n                    timeout = null;\n                    func.apply(context,args)\n                }, <span class=\"hljs-built_in\">wait</span>);\n            }\n        }\n    }\n     \n}\n```\n\n<span class=\"hljs-comment\">#### 四、函数防抖（dobounce）</span>\n```\n <span class=\"hljs-keyword\">function</span> debounce (func, <span class=\"hljs-built_in\">wait</span>) {\n         var timeout;\n         <span class=\"hljs-built_in\">return</span> <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n             var context = this;\n             var args = arguments;\n             clearTimeout(timeout);\n             timeout = <span class=\"hljs-built_in\">set</span>Timeout(() => {\n                 func.apply(context,args)\n             }, <span class=\"hljs-built_in\">wait</span>);\n         }\n     }\n```\n\n<span class=\"hljs-comment\">#### 五、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</span>\n```    \n    Object.prototype.clone = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n      var newObject = this.constructor === Array ? [] : {}  //对象的深拷贝 获取对应的构造函数 [] 或者 {}\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> e <span class=\"hljs-keyword\">in</span> this) { //遍历对象的属性 <span class=\"hljs-keyword\">in</span>  this[e]\n        newObject[e] = typeof this[e] === <span class=\"hljs-string\">'object'</span> ? this[e].clone() : this[e]  //对象中的属性如果还是对象 那就继续递归 否则就返回基本的数据类型\n      }\n      <span class=\"hljs-built_in\">return</span> newObject\n    }\n```\n \n<span class=\"hljs-comment\">#### 六、实现一个简单的Promise https://juejin.im/post/5b2f02cd5188252b937548ab</span>\n```\nclass Promise {\n  constructor (executor) {   // executor里面有两个参数，一个叫resolve（成功），一个叫reject（失败）。\n    this.status = <span class=\"hljs-string\">'pending'</span>,\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功存放的数组\n    this.onResolvedCallbacks = [];\n     // 失败存放法数组\n     this.onRejectedCallbacks = [];\n    <span class=\"hljs-built_in\">let</span> resolve = (value) => {\n      <span class=\"hljs-keyword\">if</span> (this.status == <span class=\"hljs-string\">'pending'</span>) {\n        this.status = <span class=\"hljs-string\">'resolve'</span>;\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn => fn())\n      }\n    }\n\n    <span class=\"hljs-built_in\">let</span> reject = (reason) => {\n      <span class=\"hljs-keyword\">if</span> (this.status == <span class=\"hljs-string\">'pending'</span>) {\n        this.status = <span class=\"hljs-string\">'reject'</span>;\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn => fn())\n      }\n    }\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  } \n  <span class=\"hljs-keyword\">then</span> (onFullFilled,onRejected) {\n    <span class=\"hljs-keyword\">if</span> (this.status == <span class=\"hljs-string\">'resolved'</span>) {\n      onFullFilled(this.value)\n    }\n    <span class=\"hljs-keyword\">if</span> (this.status == <span class=\"hljs-string\">'rejectd'</span>) {\n      onRejected(this.reason);\n    }\n    <span class=\"hljs-keyword\">if</span> (this.status == <span class=\"hljs-string\">'pending'</span>) {\n      this.onResolvedCallbacks.push(()=>{\n        onFullFilled(this.value);\n      })\n      this.onRejectedCallbacks.push(()=> {\n          onRejected(this.reason);\n      })\n  }\n   \n  }\n}\n\nconst p = new Promise((resolve, reject) => {\n  <span class=\"hljs-built_in\">set</span>Timeout(() => {\n      resolve(<span class=\"hljs-string\">'hello world'</span>)\n  }, 1000);\n})\np.then((data) =>{\n  console.log(data)\n},(err) =>{\n  console.log(err);\n})\n```\n\n<span class=\"hljs-comment\">#### 七、发布订阅者模式（观察者模式）</span>\n```\nvar event = {}; // 发布者\nevent.clientList = [] //发布者的缓存列表\n\nevent.listen = <span class=\"hljs-keyword\">function</span> (fn) {  // 增加订阅者函数\n  this.clientList.push(fn)\n}\n\nevent.trigger = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {  // 发布信息\n  <span class=\"hljs-keyword\">for</span> (var i =0;i<this.clientList.length;i++) {\n    var fn = this.clientList[i];\n    fn.apply(this, arguments);\n  }\n}\n\nevent.listen (<span class=\"hljs-keyword\">function</span>(time) {\n  console.log(<span class=\"hljs-string\">'正式上班时间为：'</span> +time)\n})\nevent.trigger (<span class=\"hljs-string\">'2018/7'</span>)\n```\n\n<span class=\"hljs-comment\">#### 八、手动写一个node服务器</span>\n```\nconst http = require(<span class=\"hljs-string\">'http'</span>);\nconst fs = require(<span class=\"hljs-string\">'fs'</span>);\nconst server = http.createServer((req,res) => {\n\t<span class=\"hljs-keyword\">if</span> (reu.url == <span class=\"hljs-string\">'/'</span>) {\n\tconst indexFile = fs.createReadStream(<span class=\"hljs-string\">'./index.html'</span>)\n\treq.writeHead(200,{<span class=\"hljs-string\">'context-Type'</span>:<span class=\"hljs-string\">'text/html;charset = utf8})\n\tindexFile.pipe(res)\n}\nserver.listen(8080)\n```</span><span class=\"copy-code-btn\">复制代码</span></code></pre>",
      "id": "38xqu6ut4au0",
      "author": "荒山",
      "title": "web前端面试总结(自认为还算全面哈哈哈哈哈！！！）"
    },
    {
      "content": "<p>写一篇关于 React Fiber 的文章， 这个 Flag 立了很久，这也是今年的目标之一。 最近的在掘金的文章获得很多关注和鼓励，给了我很多动力，所以下定决心好好把它写出来。 我会以最通俗的方式将它讲透, 因此这算是一篇科普式的文章。不管你是使用React、还是Vue，这里面的思想值得学习学习!</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc21324c38b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"592\" data-height=\"268\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"592\" height=\"268\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>一年一度的 React 春晚: <a target=\"_blank\" href=\"https://conf.reactjs.org/schedule.html\" rel=\"nofollow noopener noreferrer\">React Conf</a> 即将到来，不知道今年会不会有什么惊喜，去年是 React Hooks，前年是 React Fiber...\n我得赶在 React Conf 之前发布这篇文章:</p>\n<ul>\n<li>\n<p>😲 <strong>React Fiber 已经出来这么久了， 这文章是老酒装新瓶吧</strong>? <em>对于我来说，通过这篇文章我重新认识了 React Fiber，它不是一个新东西, 它也是老酒装新瓶，不信你就看吧...</em></p>\n</li>\n<li>\n<p>🆕 <strong>React Fiber 不是一个新的东西，但在前端领域是第一次广为认知的应用</strong>。</p>\n</li>\n<li>\n<p>😦 <strong>了解它有啥用</strong>? <em>React Fiber 代码很复杂，门槛很高，你不了解它，后面 React 新出的 Killer Feature 你可能就更不能理解了</em></p>\n</li>\n<li>\n<p>🤥 <strong>我不是升到React v16了吗? 没什么出奇的啊</strong>? <em>真正要体会到 React Fiber 重构效果，可能下个月、可能要等到 v17。v16 只是一个过渡版本，也就是说，现在的React 还是同步渲染的，一直在跳票、不是说今年第二季度就出来了吗</em>？</p>\n</li>\n<li>\n<p>😁 <strong>不好意思，一不小心又写得有点长，你就当小说看吧, 代码都是伪代码</strong></p>\n</li>\n</ul>\n<br>\n<p><strong>以下文章大纲</strong></p>\n<ul>\n<li><a href=\"#%E5%8D%95%E5%A4%84%E7%90%86%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6-fiber-%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E4%B8%9C%E8%A5%BF\">单处理进程调度: Fiber 不是一个新的东西</a></li>\n<li><a href=\"#%E7%B1%BB%E6%AF%94%E6%B5%8F%E8%A7%88%E5%99%A8javascript%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83\">类比浏览器JavaScript执行环境</a></li>\n<li><a href=\"#%E4%BD%95%E4%B8%BA-fiber\">何为 Fiber</a>\n<ul>\n<li><a href=\"#1-%E4%B8%80%E7%A7%8D%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8E%9F%E8%AF%AD\">1. 一种流程控制原语</a></li>\n<li><a href=\"#2-%E4%B8%80%E4%B8%AA%E6%89%A7%E8%A1%8C%E5%8D%95%E5%85%83\">2. 一个执行单元</a></li>\n</ul>\n</li>\n<li><a href=\"#react-%E7%9A%84fiber%E6%94%B9%E9%80%A0\">React 的Fiber改造</a>\n<ul>\n<li><a href=\"#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%B0%83%E6%95%B4\">1. 数据结构的调整</a></li>\n<li><a href=\"#2-%E4%B8%A4%E4%B8%AA%E9%98%B6%E6%AE%B5%E7%9A%84%E6%8B%86%E5%88%86\">2. 两个阶段的拆分</a></li>\n<li><a href=\"#3-reconcilation\">3. Reconcilation</a></li>\n<li><a href=\"#4-%E5%8F%8C%E7%BC%93%E5%86%B2\">4. 双缓冲</a></li>\n<li><a href=\"#5-%E5%89%AF%E4%BD%9C%E7%94%A8%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E6%8F%90%E4%BA%A4\">5. 副作用的收集和提交</a></li>\n</ul>\n</li>\n<li><a href=\"#%E2%9A%A0%EF%B8%8F-%E6%9C%AA%E5%B1%95%E5%BC%80%E9%83%A8%E5%88%86-%F0%9F%9A%A7----%E4%B8%AD%E6%96%AD%E5%92%8C%E6%81%A2%E5%A4%8D\">⚠️ 未展开部分 🚧 -- 中断和恢复</a></li>\n<li><a href=\"#%E5%87%8C%E6%B3%A2%E5%BE%AE%E6%AD%A5\">凌波微步</a></li>\n<li><a href=\"#%E7%AB%99%E5%9C%A8%E5%B7%A8%E4%BA%BA%E7%9A%84%E8%82%A9%E8%86%80%E4%B8%8A\">站在巨人的肩膀上</a></li>\n</ul>\n<br>\n<br>\n<h2 class=\"heading\" data-id=\"heading-0\">单处理进程调度: Fiber 不是一个新的东西</h2>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc2160c5d19?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"960\" data-height=\"772\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"960\" height=\"772\"></svg>\"><figcaption></figcaption></figure>\n<i>这个黑乎乎的界面应该就是微软的 <code>DOS</code> 操作系统</i><p></p>\n<br>\n<p>微软 <a target=\"_blank\" href=\"https://zh.wikipedia.org/zh-cn/DOS\" rel=\"nofollow noopener noreferrer\"><code>DOS</code></a> 是一个<code>单任务操作系统</code>, 也称为’单工操作系统‘. 这种操作系统同一个时间只允许运行一个程序. <a target=\"_blank\" href=\"https://www.zhihu.com/people/s.invalid\" rel=\"nofollow noopener noreferrer\">invalid s</a>在<a target=\"_blank\" href=\"https://www.zhihu.com/question/319595914/answer/683541635\" rel=\"nofollow noopener noreferrer\">《在没有GUI的时代(只有一个文本界面），人们是怎么运行多个程序的？》</a> 的回答中将其称为: '<strong>一种压根没有任务调度的“残疾”操作系统</strong>'.</p>\n<p>在这种系统中，你想执行多个任务，只能等待前一个进程退出，然后再载入一个新的进程。</p>\n<p>直到 Windows 3.x，它才有了真正意义的进程调度器，实现了多进程并发执行。</p>\n<blockquote>\n<p>注意并发和并行不是同一个概念。</p>\n</blockquote>\n<br>\n<p>现代操作系统都是<strong>多任务操作系统</strong>. 进程的调度策略如果按照CPU核心数来划分，可以分为<strong>单处理器调度</strong>和<strong>多处理器调度</strong>。本文只关注的是单处理器调度，因为它可以类比JavaScript的运行机制。</p>\n<p><strong>🔴说白了，为了实现进程的并发，操作系统会按照一定的调度策略，将CPU的执行权分配给多个进程，多个进程都有被执行的机会，让它们交替执行，形成一种“同时在运行”假象, 因为CPU速度太快，人类根本感觉不到。实际上在单核的物理环境下同时只能有一个程序在运行</strong>。</p>\n\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc244cdd934?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"580\" data-height=\"794\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"580\" height=\"794\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>这让我想起了“龙珠”中的分身术(小时候看过，说错了别喷)，实质上是一个人，只不过是他运动速度太快，看起来就像分身了. 这就是所谓的<strong>并发(Concurrent)</strong>(单处理器)。</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc230c34e9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"640\" data-height=\"357\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"640\" height=\"357\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>相比而言, 火影忍者中的分身术，是物理存在的，他们可以真正实现同时处理多个任务，这就是<strong>并行</strong>(严格地讲这是<code>Master-Slave</code>架构，分身虽然物理存在，但应该没有独立的意志)。</p>\n<p>所以说<strong>🔴并行可以是并发，而并发不一定是并行，两种不能划等号, 并行一般需要物理层面的支持</strong>。 关于并发和并行，Go 之父 Rob Pike 有一个非常著名的演讲<a target=\"_blank\" href=\"https://blog.golang.org/concurrency-is-not-parallelism\" rel=\"nofollow noopener noreferrer\">Concurrency is not parallelism</a></p>\n<br>\n<p>扯远了，接下来进程怎么调度就是教科书的内容了。如果读者在大学认真学过<strong>操作系统原理</strong>, 你可以很快理解以下几种单处理器进程<strong>调度策略</strong>(我就随便科普一下，算送的, 如果你很熟悉这块，可以跳过)：</p>\n<br>\n<p><strong>0️⃣ 先到先得(First-Come-First-Served, FCFS)</strong></p>\n<p>这是最简单的调度策略, 简单说就是<strong>没有调度</strong>。谁先来谁就先执行，执行完毕后就执行下一个。不过如果中间某些进程因为I/O阻塞了，这些进程会挂起移回就绪队列(说白了就是重新排队).</p>\n<p><code>FCFS</code> 上面 <code>DOS</code> 的单任务操作系统没有太大的区别。所以非常好理解，因为生活中到处是这样的例子:。</p>\n<ul>\n<li>\n<p><strong>FCFS 对<code>短进程</code>不利</strong>。 短进程即执行时间非常短的进程，可以用饭堂排队来比喻: <em>在饭堂排队打饭的时候，最烦那些一个人打包好好几份的人，这些人就像<code>长进程</code>一样，霸占着CPU资源，后面排队只打一份的人会觉得很吃亏，打一份的人会觉得他们优先级应该更高，毕竟他们花的时间很短，反正你打包那么多份再等一会也是可以的，何必让后面那么多人等这么久...</em></p>\n</li>\n<li>\n<p><strong>FCFS 对<code>I/O密集</code>不利</strong>。I/O密集型进程(这里特指同步I/O)在进行I/O操作时，会阻塞休眠，这会导致进程重新被放入就绪队列，等待下一次被宠幸。 可以类比ZF部门办业务: <em>假设 CPU 一个窗口、I/O 一个窗口。在CPU窗口好不容易排到你了，这时候发现一个不符合条件或者漏办了, 需要去I/O搞一下，Ok 去 I/O窗口排队，I/O执行完了，到CPU窗口又得重新排队。对于这些丢三落四的人很不公平...</em></p>\n</li>\n</ul>\n<p>所以 FCFS 这种原始的策略在单处理器进程调度中并不受欢迎。</p>\n<br>\n<p><strong>1️⃣ 轮转</strong></p>\n<p>这是一种基于时钟的<strong>抢占策略</strong>，这也是抢占策略中最简单的一种: <strong>公平地给每一个进程一定的执行时间，当时间消耗完毕或阻塞，操作系统就会调度其他进程，将执行权抢占过来</strong>。</p>\n<blockquote>\n<p><strong>决策模式</strong>: <code>抢占策略</code>相对应的有<code>非抢占策略</code>，非抢占策略指的是让进程运行直到结束、阻塞(如I/O或睡眠)、或者主动让出控制权；抢占策略支持中断正在运行的进程，将主动权掌握在操作系统这里，不过通常开销会比较大。</p>\n</blockquote>\n<p>这种调度策略的要点是<strong>确定合适的时间片长度</strong>: 太长了，长进程霸占太久资源，其他进程会得不到响应(等待执行时间过长)，这时候就跟上述的 <code>FCFS</code> 没什么区别了;  太短了也不好，因为进程抢占和切换都是需要成本的, 而且成本不低，时间片太短，时间可能都浪费在上下文切换上了，导致进程干不了什么实事。</p>\n<p>因此<strong>时间片的长度最好符合大部分进程完成一次典型交互所需的时间</strong>.</p>\n<p>轮转策略非常容易理解，只不过确定时间片长度需要伤点脑筋；另外和<code>FCFS</code>一样，轮转策略对I/O进程还是不公平。</p>\n<br>\n<p><strong>2️⃣ 最短进程优先(Shortest Process Next, SPN)</strong></p>\n<p>上面说了<code>先到先得</code>策略对<code>短进程</code>不公平，<code>最短进程优先</code>索性就让'最短'的进程优先执行，也就是说: <strong>按照进程的预估执行时间对进程进行优先级排序，先执行完短进程，后执行长进程。这是一种非抢占策略</strong>。</p>\n<p>这样可以让短进程能得到较快的响应。但是怎么获取或者<strong>评估进程执行时间</strong>呢？一是让程序的提供者提供，这不太靠谱；二是由操作系统来收集进程运行数据，并对它们进程统计分析。例如最简单的是计算它们的平均运行时间。不管怎么说都比上面两种策略要复杂一点。</p>\n<p><code>SPN</code> 的缺陷是: 如果系统有大量的短进程，那么长进程可能会饥饿得不到响应。</p>\n<p>另外因为它不是抢占性策略, 尽管现在短进程可以得到更多的执行机会，但是还是没有解决 <code>FCFS</code> 的问题: 一旦长进程得到CPU资源，得等它执行完，导致后面的进程得不到响应。</p>\n<br>\n<p><strong>3️⃣ 最短剩余时间(Shortest Remaining Time, SRT)</strong></p>\n<p><strong>SRT 进一步优化了SPN，增加了抢占机制</strong>。在 SPN 的基础上，当一个进程添加到就绪队列时，操作系统会比较<em>刚添加的新进程</em>和<em>当前正在执行的老进程</em>的‘剩余时间’，如果新进程剩余时间更短，新进程就会抢占老进程。</p>\n<p>相比轮转的抢占，SRT 没有中断处理的开销。但是在 SPN 的基础上，操作系统需要记录进程的历史执行时间，这是新增的开销。<strong>另外长进程饥饿问题还是没有解决</strong>。</p>\n<br>\n<p><strong>4️⃣ 最高响应比优先(HRRN)</strong></p>\n<p><strong>为了解决长进程饥饿问题，同时提高进程的响应速率</strong>。还有一种<code>最高响应比优先的</code>策略，首先了解什么是响应比:</p>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">响应比 = （等待执行时间 + 进程执行时间） / 进程执行时间\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p><strong>这种策略会选择响应比最高的进程优先执行</strong>：</p>\n<ul>\n<li>对于短进程来说，因为执行时间很短，分母很小，所以响应比比较高，会被优先执行</li>\n<li>对于长进程来说，执行时间长，一开始响应比小，但是随着等待时间增长，它的优先级会越来越高，最终可以被执行</li>\n</ul>\n<br>\n<p><strong>5️⃣ 反馈法</strong></p>\n<p>SPN、SRT、HRRN都需要对进程时间进行评估和统计，实现比较复杂且需要一定开销。而反馈法采取的是<strong>事后反馈</strong>的方式。这种策略下: <strong>每个进程一开始都有相同的优先级，每次被抢占(需要配合其他抢占策略使用，如轮转)，优先级就会降低一级。因此通常它会根据优先级划分多个队列</strong>。</p>\n<p>举个例子:</p>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">队列1\n队列2\n...\n队列N\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>新增的任务会推入<code>队列1</code>，<code>队列1</code>会按照<code>轮转策略</code>以一个时间片为单位进行调度。短进程可以很快得到响应，而对于长进程可能一个时间片处理不完，就会被抢占，放入<code>队列2</code>。</p>\n<p><code>队列2</code>会在<code>队列1</code>任务清空后被执行，有时候低优先级队列可能会等待很久才被执行，所以一般会给予一定的补偿，例如增加执行时间，所以<code>队列2</code>的轮转时间片长度是2。</p>\n<p>反馈法仍然可能导致长进程饥饿，所以操作系统可以统计长进程的等待时间，当等待时间超过一定的阈值，可以选择提高它们的优先级。</p>\n<br>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc24dfd080c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"942\" data-height=\"498\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"942\" height=\"498\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>没有一种调度策略是万能的, 它需要考虑很多因素:</p>\n<ul>\n<li>响应速率。进程等待被执行的时间</li>\n<li>公平性。兼顾短进程、长进程、I/O进程</li>\n</ul>\n<p>这两者在某些情况下是对立的，提高了响应，可能会减低公平性，导致饥饿。短进程、长进程、I/O进程之间要取得平衡也非常难。</p>\n<p>上面这些知识对本文来说已经足够了，现实世界操作系统的进程调度算法比教科书上说的要复杂的多，有兴趣读者可以去研究一下 <code>Linux</code> 相关的进程调度算法，这方面的资料也非常多, 例如<a target=\"_blank\" href=\"https://blog.csdn.net/gatieme/article/details/51456569\" rel=\"nofollow noopener noreferrer\">《Linux进程调度策略的发展和演变》</a>。</p>\n<br>\n<br>\n<h2 class=\"heading\" data-id=\"heading-1\">类比浏览器JavaScript执行环境</h2>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc207590429?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"500\" data-height=\"375\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"500\" height=\"375\"></svg>\"><figcaption></figcaption></figure>\n<i>JavaScript 就像单行道</i><p></p>\n<br>\n<p>JavaScript 是<a target=\"_blank\" href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7\" rel>单线程运行</a>的，而且在浏览器环境屁事非常多，它要负责页面的JS解析和执行、绘制、事件处理、静态资源加载和处理, 这些任务可以类比上面’进程‘。</p>\n<blockquote>\n<p>这里特指Javascript 引擎是单线程运行的。 严格来说，页面绘制由单独的<code>GUI渲染进程</code>负责，只不过<code>GUI渲染线程</code>和<code>Javascript线程</code>是互斥的. 另外底层的异步操作实际上也是多线程的。</p>\n</blockquote>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc35b99001e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1093\" data-height=\"167\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1093\" height=\"167\"></svg>\"><figcaption></figcaption></figure>\n<i>图片来源: <a href=\"https://developers.google.com/web/fundamentals/performance/rendering\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rendering Performance</a></i><p></p>\n<p><strong>它只是一个'JavaScript'，同时只能做一件事情，这个和 <code>DOS</code> 的单任务操作系统一样的，事情只能一件一件的干。要是前面有一个傻叉任务长期霸占CPU，后面什么事情都干不了，浏览器会呈现卡死的状态，这样的用户体验就会非常差</strong>。</p>\n<br>\n<p><strong>对于’前端框架‘来说，解决这种问题有三个方向</strong>:</p>\n<ul>\n<li>1️⃣ 优化每个任务，让它有多快就多快。挤压CPU运算量</li>\n<li>2️⃣ 快速响应用户，让用户觉得够快，不能阻塞用户的交互</li>\n<li>3️⃣ 尝试 Worker 多线程</li>\n</ul>\n<p>Vue 选择的是第1️⃣, 因为对于Vue来说，使用<code>模板</code>让它有了很多优化的空间，配合响应式机制可以让Vue可以精确地进行节点更新, 读者可以去看一下<a target=\"_blank\" href=\"https://www.yuque.com/vueconf/2019/gwn1z0\" rel=\"nofollow noopener noreferrer\">今年Vue Conf 尤雨溪的演讲</a>，非常棒!；而 React 选择了2️⃣ 。对于Worker 多线程渲染方案也有人尝试，要保证状态和视图的一致性相当麻烦。</p>\n<br>\n<p>React 为什么要引入 Fiber 架构？ 看看下面的火焰图，这是React V15 下面的一个列表渲染资源消耗情况。整个渲染花费了130ms, <strong>🔴在这里面 React 会递归比对VirtualDOM树，找出需要变动的节点，然后同步更新它们, 一气呵成。这个过程 React 称为 <code>Reconcilation</code>(中文可以译为<code>协调</code>)</strong>.</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc366f124be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"670\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"670\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>在 Reconcilation 期间，React 会霸占着浏览器资源，一则会导致用户触发的事件得不到响应, 二则会导致掉帧，用户可以感知到这些卡顿。</p>\n<p>这样说，你可能没办法体会到，通过下面两个图片来体会一下(<em>图片来源于：<a target=\"_blank\" href=\"https://twitter.com/dan_abramov\" rel=\"nofollow noopener noreferrer\">Dan Abramov</a> 的 <a target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" rel=\"nofollow noopener noreferrer\">Beyond React 16</a> 演讲, 推荐看一下👍. 另外非常感谢<a target=\"_blank\" href=\"https://www.zhihu.com/people/BlackGanglion/activities\" rel=\"nofollow noopener noreferrer\">淡苍</a> 将一个<a target=\"_blank\" href=\"https://codesandbox.io/s/koyz664q35\" rel=\"nofollow noopener noreferrer\">类似的DEMO 分享在了 CodeSandbox</a>上🎉，大家自行体验</em>):</p>\n<br>\n<p>同步模式下的 React:</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc3acaf5689?imageslim\" data-width=\"1280\" data-height=\"823\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"823\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>优化后的 <code>Concurrent</code> 模式下的 React:</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc385cc0286?imageslim\" data-width=\"1280\" data-height=\"803\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"803\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>React 的 Reconcilation 是CPU密集型的操作, 它就相当于我们上面说的’长进程‘。所以初衷和进程调度一样，我们要让高优先级的进程或者短进程优先运行，不能让长进程长期霸占资源。</p>\n<p>所以React 是怎么优化的？ 划重点， <strong>🔴为了给用户制造一种应用很快的'假象'，我们不能让一个程序长期霸占着资源. 你可以将浏览器的渲染、布局、绘制、资源加载(例如HTML解析)、事件响应、脚本执行视作操作系统的'进程'，我们需要通过某些调度策略合理地分配CPU资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率</strong>。</p>\n<br>\n<p><strong>🔴所以 React 通过Fiber 架构，让自己的Reconcilation 过程变成可被中断。 '适时'地让出CPU执行权，除了可以让浏览器及时地响应用户的交互，还有其他好处</strong>:</p>\n<ul>\n<li>与其一次性操作大量 DOM 节点相比, 分批延时对DOM进行操作，可以得到更好的用户体验。这个在<a target=\"_blank\" href=\"https://juejin.im/post/5d76f469f265da039a28aff7#heading-1\" rel>《「前端进阶」高性能渲染十万条数据(时间分片)》</a> 以及司徒正美的<a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/37095662\" rel=\"nofollow noopener noreferrer\">《React Fiber架构》</a> 都做了相关实验</li>\n<li>司徒正美在<a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/37095662\" rel=\"nofollow noopener noreferrer\">《React Fiber架构》</a> 也提到：<strong>🔴给浏览器一点喘息的机会，他会对代码进行编译优化（JIT）及进行热代码优化，或者对reflow进行修正</strong>.</li>\n</ul>\n<br>\n<p>这就是为什么React 需要 Fiber 😏。</p>\n<br>\n<h2 class=\"heading\" data-id=\"heading-2\">何为 Fiber</h2>\n<p>对于 React 来说，Fiber 可以从两个角度理解:</p>\n<br>\n<h3 class=\"heading\" data-id=\"heading-3\">1. 一种流程控制原语</h3>\n<p>Fiber 也称<a target=\"_blank\" href=\"https://www.liaoxuefeng.com/wiki/897692888725344/923057403198272\" rel=\"nofollow noopener noreferrer\">协程</a>、或者纤程。 笔者第一次接触这个概念是在学习 Ruby 的时候，Ruby就将协程称为 Fiber。后来发现很多语言都有类似的机制，例如Lua 的<code>Coroutine</code>, 还有前端开发者比较熟悉的 <code>ES6</code> 新增的<a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator\" rel=\"nofollow noopener noreferrer\"><code>Generator</code></a>。</p>\n<blockquote>\n<p>本文不纠结 <a target=\"_blank\" href=\"https://stackoverflow.com/questions/3324643/processes-threads-green-threads-protothreads-fibers-coroutines-whats-the/16375591#16375591\" rel=\"nofollow noopener noreferrer\">Processes, threads, green threads, protothreads, fibers, coroutines: what's the difference?</a></p>\n</blockquote>\n<p><strong>🔴 其实协程和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制</strong>。要理解协程，你得和普通函数一起来看, 以Generator为例:</p>\n<p>普通函数执行的过程中无法<strong>被中断和恢复</strong>：</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-keyword\">const</span> tasks = []\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> task\n  <span class=\"hljs-keyword\">while</span> (task = tasks.shift()) {\n    execute(task)\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>而 <code>Generator</code> 可以:</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-keyword\">const</span> tasks = []\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> * <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> task\n\n  <span class=\"hljs-keyword\">while</span> (task = tasks.shift()) {\n    <span class=\"hljs-comment\">// 🔴 判断是否有高优先级事件需要处理, 有的话让出控制权</span>\n    <span class=\"hljs-keyword\">if</span> (hasHighPriorityEvent()) {\n      <span class=\"hljs-keyword\">yield</span>\n    }\n\n    <span class=\"hljs-comment\">// 处理完高优先级事件后，恢复函数调用栈，继续执行...</span>\n    execute(task)\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>React Fiber 的思想和协程的概念是契合的: <strong>🔴React 渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染</strong>。</p>\n<br>\n<p>那么现在你应该有以下疑问:</p>\n<ul>\n<li>1️⃣ 浏览器没有抢占的条件, 所以React只能用让出机制?</li>\n<li>2️⃣ 怎么确定有高优先任务要处理，即什么时候让出？</li>\n<li>3️⃣ React 那为什么不使用 Generator？</li>\n</ul>\n<br>\n<br>\n<p><strong>答1️⃣: 没错, 主动让出机制</strong></p>\n<p>一是浏览器中没有类似进程的概念，’任务‘之间的界限很模糊，没有上下文，所以不具备中断/恢复的条件。二是没有抢占的机制，我们无法中断一个正在执行的程序。</p>\n<p>所以我们只能采用类似协程这样控制权让出机制。这个和上文提到的进程调度策略都不同，它有更一个专业的名词：<a target=\"_blank\" href=\"https://juejin.im/post/5d12c907f265da1b6d4033c5#heading-7\" rel><strong>合作式调度(Cooperative Scheduling)</strong></a>, 相对应的有<strong>抢占式调度(Preemptive Scheduling)</strong></p>\n<p><strong>这是一种’契约‘调度，要求我们的程序和浏览器紧密结合，互相信任</strong>。比如可以由浏览器给我们分配执行时间片(通过<code>requestIdleCallback</code>实现, 下文会介绍)，我们要按照约定在这个时间内执行完毕，并将控制权还给浏览器。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc37fdd60d7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1268\" data-height=\"700\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1268\" height=\"700\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>这种调度方式很有趣，你会发现<strong>这是一种身份的对调</strong>，以前我们是老子，想怎么执行就怎么执行，执行多久就执行多久; 现在为了我们共同的用户体验统一了战线, 一切听由浏览器指挥调度，浏览器是老子，我们要跟浏览器申请执行权，而且这个执行权有期限，借了后要按照约定归还给浏览器。</p>\n<p>当然你超时不还浏览器也拿你没办法 🤷‍... 合作式调度的缺点就在于此，全凭自律，用户要挖大坑，谁都拦不住。</p>\n<br>\n<hr>\n<br>\n<p><strong>答2️⃣: requestIdleCallback API</strong></p>\n<p>上面代码示例中的 <code>hasHighPriorityEvent()</code> 在目前浏览器中是无法实现的，我们没办法判断当前是否有更高优先级的任务等待被执行。</p>\n<p>只能换一种思路，通过<strong>超时检查的机制来让出控制权</strong>。解决办法是: <em>确定一个合理的运行时长，然后在合适的检查点检测是否超时(比如每执行一个小任务)，如果超时就停止执行，将控制权交换给浏览器</em>。</p>\n<p>举个例子，为了让视图流畅地运行，可以按照人类能感知到最低限度每秒60帧的频率划分时间片，这样每个时间片就是 16ms。</p>\n<p>其实浏览器提供了相关的接口 —— <a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\" rel=\"nofollow noopener noreferrer\"><code>requestIdleCallback</code></a> API：</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-built_in\">window</span>.requestIdleCallback(\n  callback: <span class=\"hljs-function\">(<span class=\"hljs-params\">dealine: IdleDeadline</span>) =></span> <span class=\"hljs-built_in\">void</span>,\n  option?: {timeout: <span class=\"hljs-built_in\">number</span>}\n  )\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p><code>IdleDeadline</code>的接口如下：</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-keyword\">interface</span> IdleDealine {\n  didTimeout: <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-comment\">// 表示任务执行是否超过约定时间</span>\n  timeRemaining(): DOMHighResTimeStamp <span class=\"hljs-comment\">// 任务可供执行的剩余时间</span>\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>单从名字上理解的话, <code>requestIdleCallback</code>的意思是<strong>让浏览器在'有空'的时候就执行我们的回调，这个回调会传入一个期限，表示浏览器有多少时间供我们执行, 为了不耽误事，我们最好在这个时间范围内执行完毕</strong>。</p>\n<br>\n<p><strong>那浏览器什么时候有空？</strong></p>\n<p>我们先来看一下浏览器在一帧(Frame，可以认为事件循环的一次循环)内可能会做什么事情:</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd81f16c6f2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"850\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"850\"></svg>\"><figcaption></figcaption></figure>\n<i>你可以打开 Chrome 开发者工具的Performance标签，这里可以详细看到Javascript的每一帧都执行了什么任务(Task), 花费了多少时间。</i><p></p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc428fb4c0b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"260\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"260\"></svg>\"><figcaption></figcaption></figure>\n<i>图片来源: <a href=\"https://juejin.im/post/5ad71f39f265da239f07e862\" target=\"_blank\" rel>你应该知道的requestIdleCallback</a></i><p></p>\n<p>浏览器在一帧内可能会做执行下列任务，而且它们的执行顺序基本是固定的:</p>\n<ul>\n<li>处理用户输入事件</li>\n<li>Javascript执行</li>\n<li>requestAnimation 调用</li>\n<li>布局 Layout</li>\n<li>绘制 Paint</li>\n</ul>\n<br>\n<p>上面说理想的一帧时间是 <code>16ms</code> (1000ms / 60)，如果浏览器处理完上述的任务(布局和绘制之后)，还有盈余时间，浏览器就会调用 <code>requestIdleCallback</code> 的回调。例如</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc43c710e16?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"737\" data-height=\"139\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"737\" height=\"139\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p><strong>但是在浏览器繁忙的时候，可能不会有盈余时间，这时候<code>requestIdleCallback</code>回调可能就不会被执行。 为了避免饿死，可以通过requestIdleCallback的第二个参数指定一个超时时间</strong>。</p>\n<blockquote>\n<p>另外不建议在<code>requestIdleCallback</code>中进行<code>DOM</code>操作，因为这可能导致样式重新计算或重新布局(比如操作DOM后马上调用 <code>getBoundingClientRect</code>)，这些时间很难预估的，很有可能导致回调执行超时，从而掉帧。</p>\n</blockquote>\n<br>\n<p>目前 <code>requestIdleCallback</code> 目前只有Chrome支持。所以目前 React <a target=\"_blank\" href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerHostConfig.default.js\" rel=\"nofollow noopener noreferrer\">自己实现了一个</a>。它利用<a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MessageChannel\" rel=\"nofollow noopener noreferrer\"><code>MessageChannel</code></a> 模拟将回调延迟到'绘制操作'之后执行:</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc5839a3974?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1185\" data-height=\"243\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1185\" height=\"243\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<details>\n<summary>简单看一下代码</summary>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>)\n<span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'btn'</span>)\n<span class=\"hljs-keyword\">const</span> ch = <span class=\"hljs-keyword\">new</span> MessageChannel()\n<span class=\"hljs-keyword\">let</span> pendingCallback\n<span class=\"hljs-keyword\">let</span> startTime\n<span class=\"hljs-keyword\">let</span> timeout\n\nch.port2.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">work</span>(<span class=\"hljs-params\"></span>)  </span>{\n  <span class=\"hljs-comment\">// 在绘制之后被执行</span>\n  <span class=\"hljs-keyword\">if</span> (pendingCallback) {\n    <span class=\"hljs-keyword\">const</span> now = performance.now()\n    <span class=\"hljs-comment\">// 通过now - startTime可以计算出requestAnimationFrame到绘制结束的执行时间</span>\n    <span class=\"hljs-comment\">// 通过这些数据来计算剩余时间</span>\n    <span class=\"hljs-comment\">// 另外还要处理超时(timeout)，避免任务被饿死</span>\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">if</span> (hasRemain && noTimeout) {\n      pendingCallback(deadline)\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">simpleRequestIdleCallback</span>(<span class=\"hljs-params\">callback, timeout</span>) </span>{\n  requestAnimationFrame(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">animation</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 在绘制之前被执行</span>\n    <span class=\"hljs-comment\">// 记录开始时间</span>\n    startTime = performance.now()\n    timeout = timeout\n    dosomething()\n    <span class=\"hljs-comment\">// 调度回调到绘制结束后执行</span>\n    pendingCallback = callback\n    ch.port1.postMessage(<span class=\"hljs-string\">'hello'</span>)\n  })\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre></details>\n<br>\n<p><strong>任务优先级</strong></p>\n<p>上面说了，为了避免任务被饿死，可以设置一个超时时间. <strong>这个超时时间不是死的，低优先级的可以慢慢等待, 高优先级的任务应该率先被执行</strong>. 目前 React 预定义了 5 个优先级, 这个我在[《谈谈React事件机制和未来(react-events)》]中也介绍过:</p>\n<ul>\n<li><code>Immediate</code>(-1) - 这个优先级的任务会同步执行, 或者说要马上执行且不能中断</li>\n<li><code>UserBlocking</code>(250ms) 这些任务一般是用户交互的结果, 需要即时得到反馈</li>\n<li><code>Normal</code> (5s) 应对哪些不需要立即感受到的任务，例如网络请求</li>\n<li><code>Low</code> (10s) 这些任务可以放后，但是最终应该得到执行. 例如分析通知</li>\n<li><code>Idle</code> (没有超时时间) 一些没有必要做的任务 (e.g. 比如隐藏的内容), 可能会被饿死</li>\n</ul>\n<br>\n<hr>\n<br>\n<p><strong>答3️⃣: 太麻烦</strong></p>\n<p>官方在<a target=\"_blank\" href=\"https://github.com/facebook/react/issues/7942\" rel=\"nofollow noopener noreferrer\">《Fiber Principles: Contributing To Fiber》</a> 也作出了解答。主要有两个原因：</p>\n<ol>\n<li>Generator 不能在栈中间让出。比如你想在嵌套的函数调用中间让出, 首先你需要将这些函数都包装成Generator，另外这种栈中间的让出处理起来也比较麻烦，难以理解。除了语法开销，现有的生成器实现开销比较大，所以不如不用。</li>\n<li>Generator 是有状态的, 很难在中间恢复这些状态。</li>\n</ol>\n<blockquote>\n<p>上面理解可能有出入，建议看一下原文</p>\n</blockquote>\n<p>可能都没看懂，简单就是 React 尝试过用 Generator 实现，后来发现很麻烦，就放弃了。</p>\n<br>\n<br>\n<h3 class=\"heading\" data-id=\"heading-4\">2. 一个执行单元</h3>\n<p>Fiber的另外一种解读是’纤维‘: <strong>这是一种数据结构或者说执行单元</strong>。我们暂且不管这个数据结构长什么样，<strong>🔴将它视作一个执行单元，每次执行完一个'执行单元',  React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去</strong>.</p>\n<br>\n<p>上文说了，React 没有使用 Generator 这些语言/语法层面的让出机制，而是实现了自己的调度让出机制。这个机制就是基于’Fiber‘这个执行单元的，它的过程如下：</p>\n<p>假设用户调用 <code>setState</code> 更新组件, 这个待更新的任务会先放入队列中, 然后通过 <code>requestIdleCallback</code> 请求浏览器调度：</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\">updateQueue.push(updateTask);\nrequestIdleCallback(performWork, {timeout});\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>现在浏览器有空闲或者超时了就会调用<code>performWork</code>来执行任务：</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">// 1️⃣ performWork 会拿到一个Deadline，表示剩余时间</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performWork</span>(<span class=\"hljs-params\">deadline</span>) </span>{\n\n  <span class=\"hljs-comment\">// 2️⃣ 循环取出updateQueue中的任务</span>\n  <span class=\"hljs-keyword\">while</span> (updateQueue.length > <span class=\"hljs-number\">0</span> && deadline.timeRemaining() > ENOUGH_TIME) {\n    workLoop(deadline);\n  }\n\n  <span class=\"hljs-comment\">// 3️⃣ 如果在本次执行中，未能将所有任务执行完毕，那就再请求浏览器调度</span>\n  <span class=\"hljs-keyword\">if</span> (updateQueue.length > <span class=\"hljs-number\">0</span>) {\n    requestIdleCallback(performWork);\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p><strong><code>workLoop</code> 的工作大概猜到了，它会从更新队列(updateQueue)中弹出更新任务来执行，每执行完一个‘<code>执行单元</code>‘，就检查一下剩余时间是否充足，如果充足就进行执行下一个<code>执行单元</code>，反之则停止执行，保存现场，等下一次有执行权时恢复</strong>:</p>\n<br>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">// 保存当前的处理现场</span>\n<span class=\"hljs-keyword\">let</span> nextUnitOfWork: Fiber | <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// 保存下一个需要处理的工作单元</span>\n<span class=\"hljs-keyword\">let</span> topWork: Fiber | <span class=\"hljs-literal\">undefined</span>        <span class=\"hljs-comment\">// 保存第一个工作单元</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">workLoop</span>(<span class=\"hljs-params\">deadline: IdleDeadline</span>) </span>{\n  <span class=\"hljs-comment\">// updateQueue中获取下一个或者恢复上一次中断的执行单元</span>\n  <span class=\"hljs-keyword\">if</span> (nextUnitOfWork == <span class=\"hljs-literal\">null</span>) {\n    nextUnitOfWork = topWork = getNextUnitOfWork();\n  }\n\n  <span class=\"hljs-comment\">// 🔴 每执行完一个执行单元，检查一次剩余时间</span>\n  <span class=\"hljs-comment\">// 如果被中断，下一次执行还是从 nextUnitOfWork 开始处理</span>\n  <span class=\"hljs-keyword\">while</span> (nextUnitOfWork && deadline.timeRemaining() > ENOUGH_TIME) {\n    <span class=\"hljs-comment\">// 下文我们再看performUnitOfWork</span>\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork, topWork);\n  }\n\n  <span class=\"hljs-comment\">// 提交工作，下文会介绍</span>\n  <span class=\"hljs-keyword\">if</span> (pendingCommit) {\n    commitAllWork(pendingCommit);\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>画个流程图吧！</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deed1711f281b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1056\" data-height=\"1089\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1056\" height=\"1089\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<br>\n<h2 class=\"heading\" data-id=\"heading-5\">React 的Fiber改造</h2>\n<p>Fiber 的核心内容已经介绍完了，现在来进一步看看React 为 Fiber 架构做了哪些改造, 如果你对这部分内容不感兴趣可以跳过。</p>\n<br>\n<h3 class=\"heading\" data-id=\"heading-6\">1. 数据结构的调整</h3>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc72bc9a14c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1019\" data-height=\"330\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1019\" height=\"330\"></svg>\"><figcaption></figcaption></figure>\n<i>左侧是Virtual DOM，右侧可以看作diff的递归调用栈</i><p></p>\n<br>\n<p>上文中提到 React 16 之前，Reconcilation 是同步的、递归执行的。也就是说这是基于函数’调用栈‘的Reconcilation算法，因此通常也称它为<code>Stack Reconcilation</code>. 你可以通过这篇文章<a target=\"_blank\" href=\"https://juejin.im/post/5cfa29e151882539c33e4f5e\" rel>《从Preact中了解React组件和hooks基本原理》</a> 来回顾一下历史。</p>\n<br>\n<p>栈挺好的，代码量少，递归容易理解, 至少比现在的 React Fiber架构好理解😂, 递归非常适合树这种嵌套数据结构的处理。</p>\n<p>只不过这种依赖于调用栈的方式不能随意中断、也很难被恢复, 不利于异步处理。 这种调用栈，不是程序所能控制的， 如果你要恢复递归现场，可能需要从头开始, 恢复到之前的调用栈。</p>\n<p>因此<strong>首先我们需要对React现有的数据结构进行调整，<a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/36425839\" rel=\"nofollow noopener noreferrer\"><code>模拟函数调用栈</code></a>, 将之前需要递归进行处理的事情分解成增量的执行单元，将递归转换成迭代</strong>.</p>\n<br>\n<p>React 目前的做法是使用<code>链表</code>, 每个 VirtualDOM 节点内部现在使用 <code>Fiber</code>表示, 它的结构大概如下:</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-keyword\">export</span> type Fiber = {\n  <span class=\"hljs-comment\">// Fiber 类型信息</span>\n  type: any,\n  <span class=\"hljs-comment\">// ...</span>\n\n  <span class=\"hljs-comment\">// ⚛️ 链表结构</span>\n  <span class=\"hljs-comment\">// 指向父节点，或者render该节点的组件</span>\n  <span class=\"hljs-keyword\">return</span>: Fiber | <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-comment\">// 指向第一个子节点</span>\n  child: Fiber | <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-comment\">// 指向下一个兄弟节点</span>\n  sibling: Fiber | <span class=\"hljs-literal\">null</span>,\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>用图片来展示这种关系会更直观一些：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc6db5530be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"982\" data-height=\"439\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"982\" height=\"439\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p><strong>使用链表结构只是一个结果，而不是目的，React 开发者一开始的目的是冲着模拟调用栈去的</strong>。这个很多关于Fiber 的文章都有提及, 关于调用栈的详细定义参见<a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Call_stack\" rel=\"nofollow noopener noreferrer\">Wiki</a>：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecc9a904099b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"566\" data-height=\"461\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"566\" height=\"461\"></svg>\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>调用栈最经常被用于存放子程序的<strong>返回地址</strong>。在调用任何子程序时，主程序都必须暂存子程序运行完毕后应该返回到的地址。因此，如果被调用的子程序还要调用其他的子程序，其自身的返回地址就必须存入调用栈，在其自身运行完毕后再行取回。除了返回地址，还会保存<code>本地变量</code>、<code>函数参数</code>、<code>环境传递</code>(Scope?)</p>\n</blockquote>\n<br>\n<p>React Fiber 也被称为虚拟栈帧(Virtual Stack Frame), 你可以拿它和函数调用栈类比一下, 两者结构非常像:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>函数调用栈</th>\n<th>Fiber</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>基本单位</td>\n<td>函数</td>\n<td>Virtual DOM 节点</td>\n</tr>\n<tr>\n<td>输入</td>\n<td>函数参数</td>\n<td>Props</td>\n</tr>\n<tr>\n<td>本地状态</td>\n<td>本地变量</td>\n<td>State</td>\n</tr>\n<tr>\n<td>输出</td>\n<td>函数返回值</td>\n<td>React Element</td>\n</tr>\n<tr>\n<td>下级</td>\n<td>嵌套函数调用</td>\n<td>子节点(child)</td>\n</tr>\n<tr>\n<td>上级引用</td>\n<td>返回地址</td>\n<td>父节点(return)</td>\n</tr>\n</tbody>\n</table>\n<br>\n<p>Fiber 和调用栈帧一样, 保存了节点处理的上下文信息，因为是手动实现的，所以更为可控，我们可以保存在内存中，随时中断和恢复。</p>\n<br>\n<p>有了这个数据结构调整，现在可以以迭代的方式来处理这些节点了。来看看 <code>performUnitOfWork</code> 的实现, 它其实就是一个深度优先的遍历：</p>\n<br>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">/**\n * @params fiber 当前需要处理的节点\n * @params topWork 本次更新的根节点\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performUnitOfWork</span>(<span class=\"hljs-params\">fiber: Fiber, topWork: Fiber</span>) </span>{\n  <span class=\"hljs-comment\">// 对该节点进行处理</span>\n  beginWork(fiber);\n\n  <span class=\"hljs-comment\">// 如果存在子节点，那么下一个待处理的就是子节点</span>\n  <span class=\"hljs-keyword\">if</span> (fiber.child) {\n    <span class=\"hljs-keyword\">return</span> fiber.child;\n  }\n\n  <span class=\"hljs-comment\">// 没有子节点了，上溯查找兄弟节点</span>\n  <span class=\"hljs-keyword\">let</span> temp = fiber;\n  <span class=\"hljs-keyword\">while</span> (temp) {\n    completeWork(temp);\n\n    <span class=\"hljs-comment\">// 到顶层节点了, 退出</span>\n    <span class=\"hljs-keyword\">if</span> (temp === topWork) {\n      <span class=\"hljs-keyword\">break</span>\n    }\n\n    <span class=\"hljs-comment\">// 找到，下一个要处理的就是兄弟节点</span>\n    <span class=\"hljs-keyword\">if</span> (temp.sibling) {\n      <span class=\"hljs-keyword\">return</span> temp.sibling;\n    }\n\n    <span class=\"hljs-comment\">// 没有, 继续上溯</span>\n    temp = temp.return;\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>你可以配合上文的 <code>workLoop</code> 一起看，<strong>Fiber 就是我们所说的工作单元，<code>performUnitOfWork</code> 负责对 <code>Fiber</code> 进行操作，并按照深度遍历的顺序返回下一个 Fiber</strong>。</p>\n<p><strong>因为使用了链表结构，即使处理流程被中断了，我们随时可以从上次未处理完的<code>Fiber</code>继续遍历下去</strong>。</p>\n<p>整个迭代顺序和之前递归的一样, 下图假设在 <code>div.app</code> 进行了更新：</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecca7850a24d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"708\" data-height=\"439\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"708\" height=\"439\"></svg>\"><figcaption></figcaption></figure>\n<i>比如你在<code>text(hello)</code>中断了，那么下一次就会从 <code>p</code> 节点开始处理</i><p></p>\n<br>\n<p>这个数据结构调整还有一个好处，就是某些节点异常时，我们可以打印出完整的’节点栈‘，只需要沿着节点的<code>return</code>回溯即可。</p>\n<br>\n<br>\n<h3 class=\"heading\" data-id=\"heading-7\">2. 两个阶段的拆分</h3>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd830671a70?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1232\" data-height=\"464\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1232\" height=\"464\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>如果你现在使用最新的 React 版本(v16), 使用 Chrome 的 Performance 工具，可以很清晰地看到每次渲染有两个阶段：<code>Reconciliation</code>(协调阶段) 和 <code>Commit</code>(提交阶段).</p>\n<blockquote>\n<p>我在之前的多篇文章中都有提及: <a target=\"_blank\" href=\"https://juejin.im/post/5d8395646fb9a06ad16faa57\" rel>《自己写个React渲染器: 以 Remax 为例(用React写小程序)》</a></p>\n</blockquote>\n<p>除了Fiber 工作单元的拆分，两阶段的拆分也是一个非常重要的改造，在此之前都是一边Diff一边提交的。先来看看这两者的区别:</p>\n<ul>\n<li>\n<p><strong>⚛️ 协调阶段</strong>: 可以认为是 Diff 阶段, <strong>这个阶段可以被中断</strong>, 这个阶段会找出所有节点变更，例如节点新增、删除、属性变更等等, 这些变更React 称之为'<code>副作用</code>(Effect)' . 以下生命周期钩子会在协调阶段被调用：</p>\n<ul>\n<li>constructor</li>\n<li>componentWillMount 废弃</li>\n<li>componentWillReceiveProps 废弃</li>\n<li>static getDerivedStateFromProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate 废弃</li>\n<li>render</li>\n<li>getSnapshotBeforeUpdate()</li>\n</ul>\n</li>\n<li>\n<p><strong>⚛️ 提交阶段</strong>: 将上一个阶段计算出来的需要处理的**副作用(Effects)**一次性执行了。<strong>这个阶段必须同步执行，不能被打断</strong>. 这些生命周期钩子在提交阶段被执行:</p>\n<ul>\n<li>componentDidMount</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n</ul>\n</li>\n</ul>\n<br>\n<p>也就是说，在协调阶段如果时间片用完，React就会选择让出控制权。因为协调阶段执行的工作不会导致任何用户可见的变更，所以在这个阶段让出控制权不会有什么问题。</p>\n<p>需要注意的是：因为协调阶段可能被中断、恢复，甚至重做，<strong>⚠️React 协调阶段的生命周期钩子可能会被调用多次!</strong>, 例如 <code>componentWillMount</code> 可能会被调用两次。</p>\n<p>因此建议 <strong>协调阶段的生命周期钩子不要包含副作用</strong>. 索性 React 就废弃了这部分可能包含副作用的生命周期方法，例如<code>componentWillMount</code>、<code>componentWillUpdate</code>. v17后我们就不能再用它们了, 所以现有的应用应该尽快迁移.</p>\n<br>\n<p>现在你应该知道为什么'提交阶段'必须同步执行，不能中断的吧？ 因为我们要正确地处理各种副作用，包括DOM变更、还有你在<code>componentDidMount</code>中发起的异步请求、useEffect 中定义的副作用... 因为有副作用，所以必须保证按照次序只调用一次，况且会有用户可以察觉到的变更, 不容差池。</p>\n<p>关于为什么要拆分两个阶段，<a target=\"_blank\" href=\"https://github.com/facebook/react/issues/13186#issuecomment-403959161\" rel=\"nofollow noopener noreferrer\">这里</a>有更详细的解释。</p>\n<br>\n<br>\n<h3 class=\"heading\" data-id=\"heading-8\">3. Reconcilation</h3>\n<p>接下来就是就是我们熟知的<code>Reconcilation</code>(为了方便理解，本文不区分Diff和Reconcilation, 两者是同一个东西)阶段了. <strong>思路和 Fiber 重构之前差别不大, 只不过这里不会再递归去比对、而且不会马上提交变更</strong>。</p>\n<p>首先再进一步看一下<code>Fiber</code>的结构:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-keyword\">interface</span> Fiber {\n  <span class=\"hljs-comment\">/**\n   * ⚛️ 节点的类型信息\n   */</span>\n  <span class=\"hljs-comment\">// 标记 Fiber 类型, 例如函数组件、类组件、宿主组件</span>\n  tag: WorkTag,\n  <span class=\"hljs-comment\">// 节点元素类型, 是具体的类组件、函数组件、宿主组件(字符串)</span>\n  <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">any</span>,\n\n  <span class=\"hljs-comment\">/**\n   * ⚛️ 结构信息\n   */</span> \n  <span class=\"hljs-keyword\">return</span>: Fiber | <span class=\"hljs-literal\">null</span>,\n  child: Fiber | <span class=\"hljs-literal\">null</span>,\n  sibling: Fiber | <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-comment\">// 子节点的唯一键, 即我们渲染列表传入的key属性</span>\n  key: <span class=\"hljs-literal\">null</span> | <span class=\"hljs-built_in\">string</span>,\n\n  <span class=\"hljs-comment\">/**\n   * ⚛️ 节点的状态\n   */</span>\n  <span class=\"hljs-comment\">// 节点实例(状态)：</span>\n  <span class=\"hljs-comment\">//        对于宿主组件，这里保存宿主组件的实例, 例如DOM节点。</span>\n  <span class=\"hljs-comment\">//        对于类组件来说，这里保存类组件的实例</span>\n  <span class=\"hljs-comment\">//        对于函数组件说，这里为空，因为函数组件没有实例</span>\n  stateNode: <span class=\"hljs-built_in\">any</span>,\n  <span class=\"hljs-comment\">// 新的、待处理的props</span>\n  pendingProps: <span class=\"hljs-built_in\">any</span>,\n  <span class=\"hljs-comment\">// 上一次渲染的props</span>\n  memoizedProps: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-comment\">// The props used to create the output.</span>\n  <span class=\"hljs-comment\">// 上一次渲染的组件状态</span>\n  memoizedState: <span class=\"hljs-built_in\">any</span>,\n\n\n  <span class=\"hljs-comment\">/**\n   * ⚛️ 副作用\n   */</span>\n  <span class=\"hljs-comment\">// 当前节点的副作用类型，例如节点更新、删除、移动</span>\n  effectTag: SideEffectTag,\n  <span class=\"hljs-comment\">// 和节点关系一样，React 同样使用链表来将所有有副作用的Fiber连接起来</span>\n  nextEffect: Fiber | <span class=\"hljs-literal\">null</span>,\n\n  <span class=\"hljs-comment\">/**\n   * ⚛️ 替身\n   * 指向旧树中的节点\n   */</span>\n  alternate: Fiber | <span class=\"hljs-literal\">null</span>,\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>Fiber 包含的属性可以划分为 5 个部分:</p>\n<ul>\n<li>\n<p><strong>🆕 结构信息</strong> - 这个上文我们已经见过了，Fiber 使用链表的形式来表示节点在树中的定位</p>\n</li>\n<li>\n<p><strong>节点类型信息</strong> - 这个也容易理解，tag表示节点的分类、type 保存具体的类型值，如div、MyComp</p>\n</li>\n<li>\n<p><strong>节点的状态</strong> - 节点的组件实例、props、state等，它们将影响组件的输出</p>\n</li>\n<li>\n<p><strong>🆕 副作用</strong> - 这个也是新东西. 在 Reconciliation 过程中发现的'副作用'(变更需求)就保存在节点的<code>effectTag</code> 中(想象为打上一个标记).\n那么怎么将本次渲染的所有节点副作用都收集起来呢？ 这里也使用了链表结构，在遍历过程中React会将所有有‘副作用’的节点都通过<code>nextEffect</code>连接起来</p>\n</li>\n<li>\n<p><strong>🆕 替身</strong> - React 在 Reconciliation 过程中会构建一颗新的树(官方称为workInProgress tree，<strong>WIP树</strong>)，可以认为是一颗表示当前工作进度的树。还有一颗表示已渲染界面的<strong>旧树</strong>，React就是一边和旧树比对，一边构建WIP树的。 alternate 指向旧树的同等节点。</p>\n</li>\n</ul>\n<br>\n<p>现在可以放大看看<code>beginWork</code>  是如何对 Fiber 进行比对的:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">beginWork</span>(<span class=\"hljs-params\">fiber: Fiber</span>): <span class=\"hljs-title\">Fiber</span> | <span class=\"hljs-title\">undefined</span> </span>{\n  <span class=\"hljs-keyword\">if</span> (fiber.tag === WorkTag.HostComponent) {\n    <span class=\"hljs-comment\">// 宿主节点diff</span>\n    diffHostComponent(fiber)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fiber.tag === WorkTag.ClassComponent) {\n    <span class=\"hljs-comment\">// 类组件节点diff</span>\n    diffClassComponent(fiber)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fiber.tag === WorkTag.FunctionComponent) {\n    <span class=\"hljs-comment\">// 函数组件节点diff</span>\n    diffFunctionalComponent(fiber)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// ... 其他类型节点，省略</span>\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>宿主节点比对:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">diffHostComponent</span>(<span class=\"hljs-params\">fiber: Fiber</span>) </span>{\n  <span class=\"hljs-comment\">// 新增节点</span>\n  <span class=\"hljs-keyword\">if</span> (fiber.stateNode == <span class=\"hljs-literal\">null</span>) {\n    fiber.stateNode = createHostComponent(fiber)\n  } <span class=\"hljs-keyword\">else</span> {\n    updateHostComponent(fiber)\n  }\n\n  <span class=\"hljs-keyword\">const</span> newChildren = fiber.pendingProps.children;\n\n  <span class=\"hljs-comment\">// 比对子节点</span>\n  diffChildren(fiber, newChildren);\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>类组件节点比对也差不多:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">diffClassComponent</span>(<span class=\"hljs-params\">fiber: Fiber</span>) </span>{\n  <span class=\"hljs-comment\">// 创建组件实例</span>\n  <span class=\"hljs-keyword\">if</span> (fiber.stateNode == <span class=\"hljs-literal\">null</span>) {\n    fiber.stateNode = createInstance(fiber);\n  }\n\n  <span class=\"hljs-keyword\">if</span> (fiber.hasMounted) {\n    <span class=\"hljs-comment\">// 调用更新前生命周期钩子</span>\n    applybeforeUpdateHooks(fiber)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 调用挂载前生命周期钩子</span>\n    applybeforeMountHooks(fiber)\n  }\n\n  <span class=\"hljs-comment\">// 渲染新节点</span>\n  <span class=\"hljs-keyword\">const</span> newChildren = fiber.stateNode.render();\n  <span class=\"hljs-comment\">// 比对子节点</span>\n  diffChildren(fiber, newChildren);\n\n  fiber.memoizedState = fiber.stateNode.state\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>子节点比对:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">diffChildren</span>(<span class=\"hljs-params\">fiber: Fiber, newChildren: React.ReactNode</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> oldFiber = fiber.alternate ? fiber.alternate.child : <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-comment\">// 全新节点，直接挂载</span>\n  <span class=\"hljs-keyword\">if</span> (oldFiber == <span class=\"hljs-literal\">null</span>) {\n    mountChildFibers(fiber, newChildren)\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> newFiber = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-comment\">// 新子节点</span>\n  <span class=\"hljs-keyword\">const</span> elements = extraElements(newChildren)\n\n  <span class=\"hljs-comment\">// 比对子元素</span>\n  <span class=\"hljs-keyword\">while</span> (index < elements.length || oldFiber != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">const</span> prevFiber = newFiber;\n    <span class=\"hljs-keyword\">const</span> element = elements[index]\n    <span class=\"hljs-keyword\">const</span> sameType = isSameType(element, oldFiber)\n    <span class=\"hljs-keyword\">if</span> (sameType) {\n      newFiber = cloneFiber(oldFiber, element)\n      <span class=\"hljs-comment\">// 更新关系</span>\n      newFiber.alternate = oldFiber\n      <span class=\"hljs-comment\">// 打上Tag</span>\n      newFiber.effectTag = UPDATE\n      newFiber.return = fiber\n    }\n\n    <span class=\"hljs-comment\">// 新节点</span>\n    <span class=\"hljs-keyword\">if</span> (element && !sameType) {\n      newFiber = createFiber(element)\n      newFiber.effectTag = PLACEMENT\n      newFiber.return = fiber\n    }\n\n    <span class=\"hljs-comment\">// 删除旧节点</span>\n    <span class=\"hljs-keyword\">if</span> (oldFiber && !sameType) {\n      oldFiber.effectTag = DELETION;\n      oldFiber.nextEffect = fiber.nextEffect\n      fiber.nextEffect = oldFiber\n    }\n\n    <span class=\"hljs-keyword\">if</span> (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>) {\n      fiber.child = newFiber;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (prevFiber && element) {\n      prevFiber.sibling = newFiber;\n    }\n\n    index++\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>上面的代码很粗糙地还原了 Reconciliation 的过程, 但是对于我们理解React的基本原理已经足够了.</p>\n<br>\n<p>这里引用一下<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs\" rel=\"nofollow noopener noreferrer\">Youtube: Lin Clark presentation in ReactConf 2017</a> 的Slide，来还原 Reconciliation 的过程. Lin Clark 这个演讲太经典了，几乎所有介绍 React Fiber 的文章都会引用它的Slide. 偷个懒，我也用下:</p>\n<blockquote>\n<p>这篇文章<a target=\"_blank\" href=\"https://juejin.im/post/5ab7b3a2f265da2378403e57\" rel>《React Fiber》</a> 用文字版解释了Link Clark Slide.</p>\n</blockquote>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecce3162b355?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"915\" data-height=\"690\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"915\" height=\"690\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>上图是 Reconciliation 完成后的状态，左边是旧树，右边是WIP树。对于需要变更的节点，都打上了'标签'。 在提交阶段，React 就会将这些打上标签的节点应用变更。</p>\n<br>\n<br>\n<h3 class=\"heading\" data-id=\"heading-9\">4. 双缓冲</h3>\n<p><code>WIP 树</code>构建这种技术类似于图形化领域的'<strong>双缓存(Double Buffering)</strong>'技术, 图形绘制引擎一般会使用双缓冲技术，先将图片绘制到一个缓冲区，再一次性传递给屏幕进行显示，这样可以防止屏幕抖动，优化渲染性能。</p>\n<p>放到React 中，WIP树就是一个缓冲，它在Reconciliation 完毕后一次性提交给浏览器进行渲染。它可以减少内存分配和垃圾回收，WIP 的节点不完全是新的，比如某颗子树不需要变动，React会克隆复用旧树中的子树。</p>\n<p>双缓存技术还有另外一个重要的场景就是异常的处理，比如当一个节点抛出异常，仍然可以继续沿用旧树的节点，避免整棵树挂掉。</p>\n<p>Dan 在 <a target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" rel=\"nofollow noopener noreferrer\">Beyond React 16</a> 演讲中用了一个非常恰当的比喻，那就是Git 功能分支，<strong>你可以将 WIP 树想象成从旧树中 Fork 出来的功能分支，你在这新分支中添加或移除特性，即使是操作失误也不会影响旧的分支。当你这个分支经过了测试和完善，就可以合并到旧分支，将其替换掉. 这或许就是’提交(commit)阶段‘的提交一词的来源吧？</strong>:</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deeccf3468b00b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"560\" data-height=\"342\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"560\" height=\"342\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<br>\n<h3 class=\"heading\" data-id=\"heading-10\">5. 副作用的收集和提交</h3>\n<p>接下来就是将所有打了 Effect 标记的节点串联起来，这个可以在<code>completeWork</code>中做, 例如:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">completeWork</span>(<span class=\"hljs-params\">fiber</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> parent = fiber.return\n\n  <span class=\"hljs-comment\">// 到达顶端</span>\n  <span class=\"hljs-keyword\">if</span> (parent == <span class=\"hljs-literal\">null</span> || fiber === topWork) {\n    pendingCommit = fiber\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-keyword\">if</span> (fiber.effectTag != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">if</span> (parent.nextEffect) {\n      parent.nextEffect.nextEffect = fiber\n    } <span class=\"hljs-keyword\">else</span> {\n      parent.nextEffect = fiber\n    }\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fiber.nextEffect) {\n    parent.nextEffect = fiber.nextEffect\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<p>最后了，将所有副作用提交了:</p>\n<pre><code class=\"hljs ts copyable\" lang=\"ts\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">commitAllWork</span>(<span class=\"hljs-params\">fiber</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> next = fiber\n  <span class=\"hljs-keyword\">while</span>(next) {\n    <span class=\"hljs-keyword\">if</span> (fiber.effectTag) {\n      <span class=\"hljs-comment\">// 提交，偷一下懒，这里就不展开了</span>\n      commitWork(fiber)\n    }\n    next = fiber.nextEffect\n  }\n\n  <span class=\"hljs-comment\">// 清理现场</span>\n  pendingCommit = nextUnitOfWork = topWork = <span class=\"hljs-literal\">null</span>\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><br>\n<br>\n<h2 class=\"heading\" data-id=\"heading-11\">⚠️ 未展开部分 🚧 -- 中断和恢复</h2>\n<p>上文只是介绍了简单的中断和恢复机制，我们从哪里跌倒就从哪里站起来，在哪个节点中断就从哪个节点继续处理下去。 也就是说，到目前为止：<strong>⚠️更新任务还是串行执行的，我们只是将整个过程碎片化了. 对于那些需要优先处理的更新任务还是会被阻塞</strong>。我个人觉得这才是 React Fiber 中最难处理的一部分。</p>\n<p><strong>实际情况是，在 React 得到控制权后，应该优先处理高优先级的任务</strong>。也就是说中断时正在处理的任务，在恢复时会让位给高优先级任务，原本中断的任务可能会被放弃或者重做。</p>\n<p><strong>但是如果不按顺序执行任务，可能会导致前后的状态不一致</strong>。 比如低优先级任务将 <code>a</code> 设置为0，而高优先级任务将 <code>a</code> 递增1, 两个任务的执行顺序会影响最终的渲染结果。因此<strong>要让高优先级任务插队, 首先要保证状态更新的时序</strong>。</p>\n<br>\n<p>解决办法是: <strong>所有更新任务按照顺序插入一个队列, 状态必须按照插入顺序进行计算，但任务可以按优先级顺序执行</strong>, 例如：</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deeccf96dac168?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"709\" data-height=\"155\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"709\" height=\"155\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>红色表示高优先级任务。要计算它的状态必须基于前序任务计算出来的状态, 从而保证<strong>状态的最终一致性</strong>：</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd05f86b375?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"681\" data-height=\"200\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"681\" height=\"200\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>最终红色的高优先级任务 <code>C</code> 执行时的状态值是<code>a=5,b=3</code>. 在恢复控制权时，会按照优先级先执行 <code>C</code>, 前面的<code>A</code>、 <code>B</code>暂时跳过</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd121a8657a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"716\" data-height=\"258\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"716\" height=\"258\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>\n<p>上面被跳过任务不会被移除，在执行完高优先级任务后它们还是会被执行的。因为不同的更新任务影响的节点树范围可能是不一样的，举个例子 <code>a</code>、<code>b</code> 可能会影响 <code>Foo</code> 组件树，而 <code>c</code> 会影响 <code>Bar</code> 组件树。所以为了保证<strong>视图的最终一致性</strong>, 所有更新任务都要被执行。</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd19b1362c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"587\" data-height=\"239\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"587\" height=\"239\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>首先 <code>C</code> 先被执行，它更新了 <code>Foo</code> 组件</p>\n<p>接着执行 <code>A</code> 任务，它更新了<code>Foo</code> 和 <code>Bar</code> 组件，由于 <code>C</code> 已经以最终状态<code>a=5, b=3</code>更新了<code>Foo</code>组件，这里可以做一下性能优化，直接复用C的更新结果， 不必触发重新渲染。因此 <code>A</code> 仅需更新 <code>Bar</code> 组件即可。</p>\n<p>接着执行 <code>B</code>，同理可以复用 Foo 更新结果。</p>\n<br>\n<p>道理讲起来都很简单，React Fiber 实际上非常复杂，不管执行的过程怎样拆分、以什么顺序执行，最重要的是保证<strong>状态的一致性</strong>和<strong>视图的一致性</strong>，这给了 React 团队很大的考验，以致于现在都没有正式release出来。</p>\n<br>\n<br>\n<h2 class=\"heading\" data-id=\"heading-12\">凌波微步</h2>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd21336ca41?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1067\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1067\" height=\"1280\"></svg>\"><figcaption></figcaption></figure>\n<i>同样来自Link Clark 的 Slider</i><p></p>\n<p>前面说了一大堆，从操作系统进程调度、到浏览器原理、再到合作式调度、最后谈了React的基本改造工作, 地老天荒... 就是为了上面的小人可以在练就凌波微步, 它脚下的坑是浏览器的调用栈。</p>\n<p>React 开启 <code>Concurrent Mode</code> 之后就不会挖大坑了，而是一小坑一坑的挖，挖一下休息一下，有紧急任务就优先去做。</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd2d4124b05?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"569\" data-height=\"292\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"569\" height=\"292\"></svg>\"><figcaption></figcaption></figure>\n<i>来源：<a href=\"https://www.youtube.com/watch?v=V1Ly-8Z1wQA&t=207s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flarnie Marchan - Ready for Concurrent Mode?</a></i><p></p>\n<br>\n<p>开启 <code>Concurrent Mode</code> 后，我们可以得到以下好处(详见<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ByBPyMBTzM0\" rel=\"nofollow noopener noreferrer\">Concurrent Rendering in React</a>):</p>\n<ul>\n<li>快速响应用户操作和输入，提升用户交互体验</li>\n<li>让动画更加流畅，通过调度，可以让应用保持高帧率</li>\n<li>利用好I/O 操作空闲期或者CPU空闲期，进行一些预渲染。 比如离屏(offscreen)不可见的内容，优先级最低，可以让 React 等到CPU空闲时才去渲染这部分内容。这和浏览器的preload等预加载技术差不多。</li>\n<li>用<code>Suspense</code> 降低加载状态(load state)的优先级，减少闪屏。 比如数据很快返回时，可以不必显示加载状态，而是直接显示出来，避免闪屏；如果超时没有返回才显式加载状态。</li>\n</ul>\n<br>\n<p>但是它肯定不是完美的，因为浏览器无法实现抢占式调度，无法阻止开发者做傻事的，开发者可以随心所欲，想挖多大的坑，就挖多大的坑。</p>\n<p>为了共同创造美好的世界，我们要严律于己，该做的优化还需要做: 纯组件、虚表、简化组件、缓存...</p>\n<p>尤雨溪在今年的<a target=\"_blank\" href=\"https://www.yuque.com/vueconf/2019\" rel=\"nofollow noopener noreferrer\">Vue Conf</a>一个观点让我印象深刻：<strong>如果我们可以把更新做得足够快的话，理论上就不需要时间分片了</strong>。</p>\n<p><strong>时间分片并没有降低整体的工作量，该做的还是要做</strong>, 因此React 也在考虑利用CPU空闲或者I/O空闲期间做一些预渲染。所以跟尤雨溪说的一样：React Fiber 本质上是为了解决 React 更新低效率的问题，<strong>不要期望 Fiber 能给你现有应用带来质的提升, 如果性能问题是自己造成的，自己的锅还是得自己背</strong>.</p>\n<br>\n<br>\n<h2 class=\"heading\" data-id=\"heading-13\">站在巨人的肩膀上</h2>\n<br>\n<p>本文之所以能成文，离不开社区上优质的开源项目和资料。</p>\n<p><strong>迷你 Fiber 实现</strong>:</p>\n<p>React 现在的代码库太复杂了! 而且一直在变动和推翻自己，<a target=\"_blank\" href=\"https://www.zhihu.com/people/he-shi-jun\" rel=\"nofollow noopener noreferrer\">Hax</a> 在 <a target=\"_blank\" href=\"https://www.zhihu.com/question/270428598/answer/354017709\" rel=\"nofollow noopener noreferrer\">《为什么社区里那些类 React 库至今没有选择实现 Fiber 架构？》 </a> 就开玩笑说: Fiber 性价比略低... 到了这个阶段，竞品太多，facebook 就搞一个 fiber 来作为护城河……</p>\n<p>这种工程量不是一般团队能Hold住的， 如果你只是想了解 Fiber，去读 React 的源码性价比也很低，不妨看看这些 Mini 版实现, 感受其精髓，不求甚解:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/RubyLouvre/anu\" rel=\"nofollow noopener noreferrer\">anu</a> <a target=\"_blank\" href=\"https://github.com/RubyLouvre\" rel=\"nofollow noopener noreferrer\">司徒正美</a> 开发的类React框架</li>\n<li><a target=\"_blank\" href=\"https://github.com/132yse/fre\" rel=\"nofollow noopener noreferrer\">Fre</a> <a target=\"_blank\" href=\"https://www.zhihu.com/people/132yse\" rel=\"nofollow noopener noreferrer\">伊撒尔</a> 开发的类React框架，代码很精简⁉️</li>\n<li><a target=\"_blank\" href=\"https://github.com/Foveluy/Luy\" rel=\"nofollow noopener noreferrer\">Luy</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/pomber/didact\" rel=\"nofollow noopener noreferrer\">didact</a></li>\n</ul>\n<br>\n<p><strong>优秀的文章 & 演讲</strong></p>\n<p>本文只是对React Fiber进行了简单的科普，实际上React 的实现比本文复杂的多，如果你想深入理解React Fiber的，下面这些文章不容错过:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs\" rel=\"nofollow noopener noreferrer\">Lin Clark - A Cartoon Intro to Fiber - React Conf 2017 👍🎦</a> React Fiber 启蒙，YouTube</li>\n<li><a target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" rel=\"nofollow noopener noreferrer\">Beyond React 16 - Dan Abramov 👍🎦</a></li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ByBPyMBTzM0&t=151s\" rel=\"nofollow noopener noreferrer\">Concurrent Rendering in React - Andrew Clark and Brian Vaughn 👍🎦</a></li>\n<li><a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/37095662\" rel=\"nofollow noopener noreferrer\">司徒正美: React Fiber架构 👍</a> 看不如写</li>\n<li><a target=\"_blank\" href=\"https://www.zhihu.com/people/NE_SmallTown/posts\" rel=\"nofollow noopener noreferrer\">展望 React 17，回顾 React 往事 👍</a> 看完 <a target=\"_blank\" href=\"https://www.zhihu.com/people/NE_SmallTown\" rel=\"nofollow noopener noreferrer\">Heaven</a> 的相关文章，会觉得你了解的React 知识真的只是<a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/jheaven\" rel=\"nofollow noopener noreferrer\">冰山一角</a>，我们都没资格说我们懂 React。</li>\n<li><a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/36425839\" rel=\"nofollow noopener noreferrer\">浅入 React16/fiber 系列 👍</a> 同样来自 Heaven</li>\n<li><a target=\"_blank\" href=\"https://www.zhihu.com/search?type=content&q=requestIdleCallback\" rel=\"nofollow noopener noreferrer\">淡苍：深入剖析 React Concurrent 👍</a></li>\n<li><a target=\"_blank\" href=\"https://engineering.hexacta.com/didact-fiber-incremental-reconciliation-b2fe028dcaec\" rel=\"nofollow noopener noreferrer\">Didact Fiber: Incremental reconciliation  👍</a> 实现了简单的 React Fiber</li>\n<li><a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/26027085\" rel=\"nofollow noopener noreferrer\">程墨: React Fiber是什么</a></li>\n<li><a target=\"_blank\" href=\"https://zhuanlan.zhihu.com/p/57346388\" rel=\"nofollow noopener noreferrer\">译 深入React fiber架构及源码</a></li>\n<li><a target=\"_blank\" href=\"http://www.ayqy.net/blog/dive-into-react-fiber/\" rel=\"nofollow noopener noreferrer\">黯羽轻扬: 完全理解React Fiber</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/facebook/react/issues/7942\" rel=\"nofollow noopener noreferrer\">Fiber Principles: Contributing To Fiber</a></li>\n<li><a target=\"_blank\" href=\"https://philippspiess.com/scheduling-in-react/\" rel=\"nofollow noopener noreferrer\">Scheduling in React</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d12c907f265da1b6d4033c5\" rel>桃翁: Deep In React 之浅谈 React Fiber 架构（一）</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5b028db26fb9a07ac162ba68#heading-12\" rel>为 Luy 实现 React Fiber 架构</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5ab7b3a2f265da2378403e57\" rel>妖僧风月: React Fiber</a></li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=V1Ly-8Z1wQA&t=207s\" rel=\"nofollow noopener noreferrer\">Flarnie Marchan - Ready for Concurrent Mode? 🎦</a></li>\n<li><a target=\"_blank\" href=\"https://developers.google.com/web/fundamentals/performance/rendering\" rel=\"nofollow noopener noreferrer\">Web Fundamentals > Performance</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5ad71f39f265da239f07e862\" rel>你应该知道的requestIdleCallback</a></li>\n<li><a target=\"_blank\" href=\"https://www.404forest.com/2017/07/18/how-javascript-actually-works-eventloop-and-uirendering/\" rel=\"nofollow noopener noreferrer\">深入探究 eventloop 与浏览器渲染的时序问题</a></li>\n<li><a target=\"_blank\" href=\"https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web/\" rel=\"nofollow noopener noreferrer\">Accurately measuring layout on the web</a></li>\n</ul>\n<br>\n<p><strong>自荐React 相关文章</strong></p>\n<p>回顾一下今年写的关于 React 的相关文章</p>\n<p><strong>Concurrent模式预览（推荐）</strong>:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5db65d87518825648f2ef899#comment\" rel>React Concurrent 模式抢先预览: Suspense 篇</a></li>\n</ul>\n<br>\n<p><strong>往期文章</strong>:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5cd7f2c4e51d453a7d63b715\" rel>React组件设计实践总结 系列 共5篇</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d8395646fb9a06ad16faa57\" rel>自己写个React渲染器: 以 Remax 为例(用React写小程序)</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d44e3745188255d5861d654\" rel>谈谈React事件机制和未来(react-events)</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d594ea5518825041301bbcb\" rel>2019年了，整理了N个实用案例帮你快速迁移到React Hooks</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d045350f265da1b695d5bf2\" rel>浅谈React性能优化的方向</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5cfa29e151882539c33e4f5e\" rel>从Preact中了解React组件和hooks基本原理</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d06bf0a51882528194a9736\" rel>React性能测量和分析</a></li>\n</ul>\n<br>\n<p>本文讲了 React 如何优化 CPU 问题，React 野心远不在于此, I/O 方向的优化也在实践，例如 Suspend...  还有很多没讲完，后面的文章见！</p>\n<br>\n<p>问卷调查，你觉得这种文章风格怎样？</p>\n<ul>\n<li>A. 事无巨细，太啰嗦了</li>\n<li>B. 娓娓道来，深入浅出我喜欢</li>\n<li>C. 内容不够深入</li>\n<li>D. 文章篇幅太长，可以拆分</li>\n</ul>\n<p>多选，下方评论，👍点赞走起</p>\n<br>\n<blockquote>\n<p><strong>改了一个正经一点的网名：<em>sx</em>(傻叉) -> 荒山 ⛰</strong></p>\n</blockquote>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16deecd38f465448?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"450\" data-height=\"450\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"450\" height=\"450\"></svg>\"><figcaption></figcaption></figure><p></p>\n<br>",
      "id": "587ma86ypcg0",
      "author": "_Dreams",
      "title": "这可能是最通俗的 React Fiber(时间分片) 打开方式"
    },
    {
      "content": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>在平时的H5移动端开发时，我们难免会遇到各种各样的坑点，这篇文章就带着大家来看看怎么解决，文章较长，建议收藏方便以后查阅！</p>\n<h2 class=\"heading\" data-id=\"heading-1\">前方高能！</h2>\n<h3 class=\"heading\" data-id=\"heading-2\">canvas在retina屏模糊</h3>\n<p>只需要将画笔根据像素比缩放即可</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">run(canvasEl) {\n    <span class=\"hljs-keyword\">const</span> canvas = canvasEl;\n    <span class=\"hljs-keyword\">const</span> ctx = canvas.getContext(<span class=\"hljs-string\">'2d'</span>);\n    <span class=\"hljs-keyword\">const</span> devicePixelRatio = <span class=\"hljs-built_in\">window</span>.devicePixelRatio || <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">const</span> backingStorePixelRatio = ctx.webkitBackingStorePixelRatio ||\n    ctx.mozBackingStorePixelRatio ||\n    ctx.msBackingStorePixelRatio ||\n    ctx.oBackingStorePixelRatio ||\n    ctx.backingStorePixelRatio || <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">const</span> ratio = devicePixelRatio / backingStorePixelRatio;\n    <span class=\"hljs-keyword\">if</span> (devicePixelRatio !== backingStorePixelRatio) {\n      <span class=\"hljs-keyword\">const</span> oldWidth = canvas.width;\n      <span class=\"hljs-keyword\">const</span> oldHeight = canvas.height;\n\n      canvas.width = oldWidth * ratio;\n      canvas.height = oldHeight * ratio;\n\n      canvas.style.width = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${oldWidth}</span>px`</span>;\n      canvas.style.height = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${oldHeight}</span>px`</span>;\n      ctx.scale(ratio, ratio);\n    }\n  },\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-3\">用同等比例的图片在PC机上很清楚,但是手机上很模糊,原因是什么呢?</h3>\n<p>经研究发现是devicePixelRatio作怪,因为手机分辨率太小,如果按照分辨率来显示网页字会非常小,所以苹果就把iPhone 4的960640分辨率在网页里只显示了480320,这样devicePixelRatio＝2;现在android比较乱,有1.5/2/3等,想让图片在手机里显示更为清晰必须使用2x的背景图来代替img标签(一般情况都是用2倍),例如一个div的宽高是100100,背景图必须得200200,然后background-size:contain;,这样显示出来的图片就比较清晰了;代码如下:</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\">   background:url(../images/icon/all.png) no-repeat center center;\n   -webkit-background-size:50px 50px;\n   background-size: 50px 50px;\n   display:inline-block; \n   width:100%; \n   height:50px;\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-4\">启动或禁用自动识别页面中的电话号码;</h3>\n<pre><code class=\"hljs html copyable\" lang=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"format-detection\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"telephone=no\"</span>></span> \n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>默认情况下设备会自动识别任何可能是电话号码的字符串,设置telephone=no可以禁用这项功能,设置不识别邮箱和地址也同理</p>\n<h3 class=\"heading\" data-id=\"heading-5\">h5网站input设置为type=number的问题</h3>\n<p>h5网页input的type设置为number一般会产生三个问题:</p>\n<p>问题1:maxlength属性不好用</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><input type=<span class=\"hljs-string\">\"number\"</span> oninput=<span class=\"hljs-string\">\"checkTextLength(this ,10)\"</span>>\n<span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>></span><span class=\"actionscript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkTextLength</span><span class=\"hljs-params\">(obj, length)</span> </span>{\n        <span class=\"hljs-keyword\">if</span>(obj.value.length > length)  {\n            obj.value = obj.value.substr(<span class=\"hljs-number\">0</span>, length);\n        }\n    }\n</span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>问题2:form提交的时候默认取整</p>\n<pre><code class=\"hljs html copyable\" lang=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">\"0.01\"</span> /></span> //input中type=number一般会自动生成一个上下箭头,点击上箭头默认增加一个step,点击下箭头默认会减少一个step;number中默认step是1,也就是step=0.01可以允许输入2位小数,并且点击上下箭头分别增加0.01和减少0.01;step和min一起使用时数值必须在min和max之间\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>问题3:部分安卓手机出现样式问题</p>\n<p>去除input默认样式的方法:</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\">input,textarea {\n    border: 0;\n    -webkit-appearance: none; //可同时屏蔽输入框怪异的内阴影,解决iOS下无法修改按钮样式,测试还发现,加了此属性后,iOS下默认还是有圆角的,不过可以用border-radius属性修改\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-6\">select下拉选择设置问题</h3>\n<p>问题1:右对齐实现</p>\n<p>设置如下属性</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\"><span class=\"hljs-selector-tag\">select</span> <span class=\"hljs-selector-tag\">option</span> {\n    <span class=\"hljs-attribute\">direction</span>: rtl;\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>问题2:禁用select默认箭头</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\"><span class=\"hljs-selector-pseudo\">::-ms-expand</span>修改表单控件下拉箭头,设置隐藏并使用背景图片来修饰\n\n<span class=\"hljs-selector-tag\">select</span><span class=\"hljs-selector-pseudo\">::-ms-expand</span> { <span class=\"hljs-attribute\">display</span>:none; }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-7\">移动端HTML5 audio autoplay失效问题</h3>\n<p>由于自动播放网页中的音频或视频会给用户带来困扰或不必要的流量消耗,所以苹果系统和安卓系统通常都会禁止自动播放和使用JS的触发播放,必须由用户来触发才播放;解决方法思路:先通过用户touchstart触碰触发播放并暂停(让音频开始加载),后面用JS再操作就没问题了;解决代码:</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'touchstart'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'audio'</span>)[<span class=\"hljs-number\">0</span>].play();\n    <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'audio'</span>)[<span class=\"hljs-number\">0</span>].pause();\n});\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-8\">CSS动画页面闪白,动画卡顿,图片错乱的问题</h3>\n<p>1.尽可能地使用合成属性transform和opacity来设计CSS3动画,不使用position的left和top来定位</p>\n<p>2.开启硬件加速</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\"><span class=\"hljs-selector-tag\">-webkit-transform</span>: <span class=\"hljs-selector-tag\">translate3d</span>(0, 0, 0);\n<span class=\"hljs-selector-tag\">-moz-transform</span>: <span class=\"hljs-selector-tag\">translate3d</span>(0, 0, 0);\n<span class=\"hljs-selector-tag\">-ms-transform</span>: <span class=\"hljs-selector-tag\">translate3d</span>(0, 0, 0);\n<span class=\"hljs-selector-tag\">transform</span>: <span class=\"hljs-selector-tag\">translate3d</span>(0, 0, 0);\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-9\">浮动子元素撑开父元素盒子高度(BFC)</h3>\n<p>解决方法如下：</p>\n<p>1.父元素设置为 overflow: hidden;</p>\n<p>2.父元素设置为 display: inline-block;等</p>\n<p>这里两种方法都是通过设置css属性将浮动元素的父元素变成BFC(块级格式化上下文)元素,使子元素高度可以撑开父元素;不过最好使用方法1,因为inline-block元素本身会自带一些宽高度撑开其本身</p>\n<h3 class=\"heading\" data-id=\"heading-10\">往返缓存问题</h3>\n<p>点击浏览器的回退有时候不会自动执行js,特别是在mobilesafari中;这与往返缓存(bfcache)有关系,解决方法:</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-built_in\">window</span>.onunload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-11\">定位的坑</h3>\n<p>在IOS下fixed定位在软键盘顶起时会失效，所以我们在开发时统一使用absolute代替</p>\n<h3 class=\"heading\" data-id=\"heading-12\">audio元素和video元素在ios和andriod中播放问题</h3>\n<pre><code class=\"hljs html copyable\" lang=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"music/bg.mp3\"</span> <span class=\"hljs-attr\">autoplay</span> <span class=\"hljs-attr\">loop</span> <span class=\"hljs-attr\">controls</span>></span>你的浏览器还不支持哦<span class=\"hljs-tag\"></<span class=\"hljs-name\">audio</span>></span> //音频,写法一\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">controls</span>=<span class=\"hljs-string\">\"controls\"</span>></span> //音频,写法二   \n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"music/bg.ogg\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"audio/ogg\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">source</span>></span>\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"music/bg.mp3\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"audio/mpeg\"</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">source</span>></span> //优先播放音乐bg.ogg,不支持在播放bg.mp3    \n<span class=\"hljs-tag\"></<span class=\"hljs-name\">audio</span>></span>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>到这里一般都可以播放音乐了,如果还不行很有可能是微信的限制</p>\n<p>问题3:微信的限制</p>\n<p>如果是微信的限制,这时需要调用微信接口,页面先引入:</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"><script src=<span class=\"hljs-string\">\"http://res.wx.qq.com/open/js/jweixin-1.0.0.js\"</span>></script>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>然后JS写入微信事件:</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">document.addEventListener(<span class=\"hljs-string\">\"WeixinJSBridgeReady\"</span>, <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n    document.getElementById(<span class=\"hljs-string\">'music'</span>).play();\n}, <span class=\"hljs-literal\">false</span>);\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>小结:</p>\n<p>1.audio元素的autoplay属性在IOS及Android上无法使用,在PC端正常</p>\n<p>2.audio元素没有设置controls时,在IOS及Android会占据空间大小,而在PC端Chrome是不会占据任何空间</p>\n<p>问题4:Safari浏览器自动播放</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'touchstart'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{   \n    audio.play();\n}, <span class=\"hljs-literal\">false</span>);\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-13\">ios系统不支持动画暂停样式(animation-play-state)</h3>\n<p>H5页面一般都会有BGM,也会提供一个旋转的音乐图标供用户开启关闭音乐;我们希望当用户点击音乐按钮时图标停止旋转,再点图标顺着之前停止的位置继续跑动画;animation-play-state是最简便的方式,然而ios不支持</p>\n<p>目前的解决方案是:音乐图标负责跑动画,图标父级元素负责记录停止时的转动值</p>\n<h3 class=\"heading\" data-id=\"heading-14\">ios防止长按页面元素被选中</h3>\n<p>解决:加入样式可禁止用户进行复制,ios和一般的安卓都可以解决</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\">-webkit-touch-callout:none;  //系统默认菜单被禁用;可以实现页面因为长按弹出各种操作窗口\n-webkit-user-select:none; //webkit浏览器  \n-khtml-user-select:none; //早期浏览器 \n-moz-user-select:none; //火狐 \n-ms-user-select:none; //IE10 \nuser-select:none; \n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>添加完这段代码后在IOS上会有问题,这时发现input框无法正在输入内容了;造成这个原因是-webkit-user-select:none;这个属性,解决方法就是在css文件中同时设置一下input的属性,如下:</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\">input {      \n     -webkit-user-select:auto; //webkit浏览器    \n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-15\">html5碰到上下拉动滚动条时卡顿/慢怎么解决</h3>\n<p>首先你可能会给页面的html和body增加了height: 100%, 然后就可能造成IOS上页面滑动的卡顿问题。</p>\n<p>解决方案是：\n1.让html和body固定100%（或者100vh），\n2.然后再在内部放一个height:100%的div，设置overflow-y: auto;和-webkit-overflow-scrolling: touch;</p>\n<p>overflow-x:auto在iOS有兼容问题，解决方法:</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\"><span class=\"hljs-selector-class\">.scroll-box</span> {\n  <span class=\"hljs-comment\">/* 模态框之类的div不能放在这个容器中,否则关闭模态框有时候关闭不了 */</span>\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">overflow-y</span>: auto;\n  <span class=\"hljs-attribute\">-webkit-overflow-scrolling</span>: touch;\n  <span class=\"hljs-attribute\">overflow-scrolling</span>: touch;\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-16\">点击元素产生背景或边框怎么去掉</h3>\n<p>a,button,input,textarea{\n-webkit-tap-highlight-color: rgba(0,0,0,0);\n-webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用,就是输入法不再能够输入多个字符\n}\n或\na,button,input,textarea{\n-webkit-tap-highlight-color: rgba(0,0,0,0);\n}</p>\n<h3 class=\"heading\" data-id=\"heading-17\">浏览器后退不刷新</h3>\n<p>这种情况是以前遇到的,这里也说下;主要会发生在webview里多一点,当点击后退时页面以缓存形式出现,而不是刷新后的,很多情况下这不是你预期的效果,解决方法是用js:</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">方法<span class=\"hljs-number\">1</span>：\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'pageshow'</span>, () => {\n  <span class=\"hljs-keyword\">if</span> (e.persisted || (<span class=\"hljs-built_in\">window</span>.performance && \n    <span class=\"hljs-built_in\">window</span>.performance.navigation.type == <span class=\"hljs-number\">2</span>)) {\n    location.reload()\n  }\n}, <span class=\"hljs-literal\">false</span>);\n\n方法<span class=\"hljs-number\">2</span>:\n<span class=\"hljs-built_in\">window</span>.history.replaceState(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">''</span>, <span class=\"hljs-built_in\">window</span>.location.href + <span class=\"hljs-string\">'?timestamp='</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime());\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>onpageshow每次页面加载都会触发,无论是从缓存中加载还是正常加载,这是他和onload的区别;persisted判断页面是否从缓存中读出</p>\n<p>页面通过历史记录和前进后退访问时。type值为2</p>\n<h3 class=\"heading\" data-id=\"heading-18\">transition清除闪屏</h3>\n<pre><code class=\"hljs css copyable\" lang=\"css\">-webkit-transform-style: preserve-3d; //设置内嵌的元素在 3D 空间如何呈现：保留3D\n-webkit-backface-visibility:hidden; //设置进行转换的元素的背面在面对用户时是否可见：隐藏\n-webkit-perspective: 1000;\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-19\">解决active伪类失效</h3>\n<pre><code class=\"hljs html copyable\" lang=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">ontouchstart</span>></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">body</span>></span>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-20\">顶部状态栏背景色</h3>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">apple-mobile-web-app-capable是设置Web应用是否以全屏模式运行;语法:\n<meta name=<span class=\"hljs-string\">\"apple-mobile-web-app-capable\"</span> content=<span class=\"hljs-string\">\"yes\"</span>> //content设置为yesWeb应用会以全屏模式\n<meta name=<span class=\"hljs-string\">\"apple-mobile-web-app-status-bar-style\"</span> content=<span class=\"hljs-string\">\"black\"</span> />\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>说明:除非你先使用apple-mobile-web-app-capable指定全屏模式,否则这个meta标签不会起任何作用;如果content设置为default,则状态栏正常显示;如果设置为blank,则状态栏会有一个黑色的背景;如果设置为blank-translucent,则状态栏显示为黑色半透明;如果设置为default或blank,则页面显示在状态栏的下方,即状态栏占据上方部分;页面占据下方部分，二者没有遮挡对方或被遮挡;如果设置为blank-translucent,则页面会充满屏幕,其中页面顶部会被状态栏遮盖住(会覆盖页面20px高度，而iphone4和itouch4的Retina屏幕为40px);默认值是default。</p>\n<h2 class=\"heading\" data-id=\"heading-21\">ios专区</h2>\n<h3 class=\"heading\" data-id=\"heading-22\">IOS中对input键盘事件keyup/keydown/keypress等支持不好的问题</h3>\n<p>经查发现,IOS的输入法(不管是第三方还是自带)能检测到英文或数字的keyup,但检测不到中文的keyup,在输入中文后需要点回退键才开始搜索;解决办法是用html5的oninput事件去代替keyup,通过如下代码达到类似keyup的效果;</p>\n<p>1.修改了input:checkbox或input:radio元素的选择中状态,checked属性发生变化</p>\n<p>2.修改了input:text或textarea元素的值,value属性发生变化</p>\n<p>3.修改了select元素的选中项,selectedIndex属性发生变化\n统一使用input监听</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"><input <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text\"</span> id=<span class=\"hljs-string\">\"testInput\"</span>>\n<script <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>>\n    document.getElementById(<span class=\"hljs-string\">'testInput'</span>).addEventListener(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-keyword\">function</span>(e){\n        var value = e.target.value; //e.target指向事件执行时鼠标所点击区域的那个元素;初学者会认为当前事件所绑定的元素就是鼠标所点击的那个元素,这时就要看看时间绑定的元素内部有没有子元素,如果有e.target指向这个子元素,如果没有e.target和this都指向事件所绑定的元素\n    });\n</script>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-23\">IOS键盘字母输入,默认首字母大写的解决方案</h3>\n<p>设置如下属性</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"><input autocapitalize=<span class=\"hljs-string\">\"off\"</span> autocorrect=<span class=\"hljs-string\">\"off\"</span> />\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>//input的三个属性autocomplete:默认为on,代表是否让浏览器自动记录输入的值,可以在input中加入autocomplete=\"off\"来关闭记录,保密输入内容;autocapitalize:自动大小写;autocorrect:纠错</p>\n<h3 class=\"heading\" data-id=\"heading-24\">关于iOS与OS X端字体的优化(横竖屏会出现字体加粗不一致等)问题</h3>\n<p>iOS浏览器横屏时会重置字体大小,设置text-size-adjust为none可以解决iOS上的问题,但桌面版Safari的字体缩放功能会失效,因此最佳方案是将text-size-adjust为100%</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\"><span class=\"hljs-selector-tag\">-webkit-text-size-adjust</span>: 100%;\n<span class=\"hljs-selector-tag\">-ms-text-size-adjust</span>: 100%;\n<span class=\"hljs-selector-tag\">text-size-adjust</span>: 100%;\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-25\">某些情况下非可点击元素如(label,span)监听click事件,ios下不会触发</h3>\n<p>针对此种情况只需对不触发click事件的元素添加一行css代码即可</p>\n<pre><code class=\"hljs css copyable\" lang=\"css\"><span class=\"hljs-selector-tag\">cursor</span>: <span class=\"hljs-selector-tag\">pointer</span>;\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-26\">ios对时间date()的支持不一样</h3>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">var date =new Date(<span class=\"hljs-string\">\"2019/10/21\"</span>); \n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>调试发现2019/10/21等同2019-10-21 00:00:00,也就是说ios默认就是从0开始计算的,我们不需要设置后面的时分秒为00:00:00</p>\n<h3 class=\"heading\" data-id=\"heading-27\">iOS(safari)标签绑定点击事件无效</h3>\n<p>iOS(safari)有时候某个标签绑定点击事件无效,加上空的onclick=\"\"就好了,如:<code><a onclick=\"\"></a></code></p>\n<h3 class=\"heading\" data-id=\"heading-28\">ios中location.href跳转页面空白</h3>\n<p>在location.href外套一层setTimeout就解决了！</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {\n       <span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">'www.juejin.im'</span>\n}, <span class=\"hljs-number\">0</span>);\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-29\">键盘弹起下落时的bug解决方法</h3>\n<p>在App.vue的created钩子里统一处理即可</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">created() {\n    <span class=\"hljs-keyword\">this</span>.handleFocusOut();\n    <span class=\"hljs-keyword\">this</span>.handleResize();\n},\n<span class=\"hljs-attr\">methods</span>:{\n    handleFocusOut() {\n      <span class=\"hljs-comment\">// input 焦点失焦后，ios 键盘收起，但没有触发 window resize，导致实际页面dom仍然被键盘顶上去--错位</span>\n      <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'focusout'</span>, () => {\n        <span class=\"hljs-built_in\">document</span>.body.scrollTop = <span class=\"hljs-number\">0</span>;\n      });\n    },\n    <span class=\"hljs-comment\">// 监听resize事件（键盘弹起触发），然后将 input textarea 元素滑动到可视区域，并将特定元素隐藏</span>\n    handleResize() {\n      <span class=\"hljs-keyword\">const</span> clientHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;\n      <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, () => {\n        <span class=\"hljs-comment\">// 判断当前 active 的元素是否为 input 或 textarea</span>\n        <span class=\"hljs-keyword\">if</span> (\n          <span class=\"hljs-built_in\">document</span>.activeElement.tagName === <span class=\"hljs-string\">'INPUT'</span> ||\n          <span class=\"hljs-built_in\">document</span>.activeElement.tagName === <span class=\"hljs-string\">'TEXTAREA'</span>\n        ) {\n          setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {\n            <span class=\"hljs-comment\">// 原生方法，滚动至需要显示的位置</span>\n            <span class=\"hljs-built_in\">document</span>.activeElement.scrollIntoView();\n          }, <span class=\"hljs-number\">0</span>);\n        }\n\n        <span class=\"hljs-comment\">// 解决键盘弹起后 fixed 定位元素被顶起问题</span>\n        <span class=\"hljs-keyword\">const</span> bodyHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;\n        <span class=\"hljs-keyword\">const</span> ele = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'fixed-bottom'</span>);\n        <span class=\"hljs-keyword\">if</span> (ele) {\n          <span class=\"hljs-keyword\">if</span> (clientHeight > bodyHeight) {\n            ele.style.display = <span class=\"hljs-string\">'none'</span>;\n          } <span class=\"hljs-keyword\">else</span> {\n            ele.style.display = <span class=\"hljs-string\">'block'</span>;\n          }\n        }\n      });\n    }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h2 class=\"heading\" data-id=\"heading-30\">总结</h2>\n<p>路漫漫其修远兮,在兼容的道路上渐行渐远</p>\n",
      "id": "46sq9xprubi0",
      "author": "第一名的小蝌蚪",
      "title": "移动端H5页面开发坑点指南"
    },
    {
      "content": "<p>灰色的天</p>\n<p>妳的脸</p>\n<p>说分手的语气斩钉截铁</p>\n<p>小蝌蚪：“能不走吗”</p>\n<p>女神：“不能”</p>\n<p>小蝌蚪：“那个男人有什么好”</p>\n<p>女神：“他说话好听，长得帅，还有钱”</p>\n<p>小蝌蚪：“我没房没车没存款，但我有一颗爱妳的心”</p>\n<p>高富帅出现：“我有房有车有存款，我也有一颗爱她的心”</p>\n<p>小蝌蚪：“我能跑十公里去为她买宵夜”</p>\n<p>高富帅：“我开兰博基尼去为她买宵夜”</p>\n<p>小蝌蚪：“我一分钟能敲5000行代码”</p>\n<p>高富帅：“你们公司的老板，是我爸”</p>\n<p>小蝌蚪：“这。。。”</p>\n<p>在金钱力量面前，一切言语都显得那么苍白无力</p>\n<p>小蝌蚪跪在地上，望着高富帅远去的尾灯，消失在地平线</p>\n<p>失恋第三十天，小蝌蚪上山拜佛</p>\n<p>小蝌蚪：“伟大的佛，为何我感情如此失败”</p>\n<p>佛曰：“因为你不够渣，一次只爱一个人，下次同时爱一百个试试？”</p>\n<p>小蝌蚪若有所悟</p>\n<p>小蝌蚪：“伟大的佛，那我如何才能成为江湖第一的渣男”</p>\n<p>佛说：“想要成为顶级渣男，你要闯过三关”</p>\n<p>佛：“第一关我们称之为<富婆>”</p>\n<p>佛：“一位顶级渣男，他需要有雄厚的资金来源，才能浪迹天涯，而富婆是这资金流的关键”</p>\n<h3 class=\"heading\" data-id=\"heading-0\">第一关<富婆></h3>\n<p>得到佛主的指点，小蝌蚪来到国际大酒店</p>\n<p>楼顶正举行富婆八十大寿生日宴</p>\n<p>富婆坐在轮椅上，望着舞池里的妹纸</p>\n<p>满眼都是自己十八岁的样子</p>\n<p>小蝌蚪出现：“女士，您好，我叫小蝌蚪”</p>\n<p>富婆：“有何贵干”</p>\n<p>小蝌蚪：“我想要得到妳的包养”</p>\n<p>富婆的假牙差点从嘴里喷了出来</p>\n<p>富婆：“我的包养，不是你想要，想要就能要”</p>\n<p>小蝌蚪就地表演了一段舌头碎大石</p>\n<p>富婆压制住内心的狂喜，说道：“这还不够，还差了点”</p>\n<p>小蝌蚪：“我一分钟能敲5000行代码，手速奇快”</p>\n<p>富婆大惊：“你就是我唯一的真爱~！”</p>\n<h3 class=\"heading\" data-id=\"heading-1\">第二关<渣女></h3>\n<p>成功拿下富婆后，来到第二关</p>\n<p>佛曰：“你需要撩到一个名叫 '夜魔' 的顶级渣女，通过她身上的《绝世婊技》，你才能悟出传说中的《渣男心经》”</p>\n<p>夜魔常年混迹于夜店</p>\n<p>斡旋在多名富二代之间</p>\n<p>夜魔的座右铭：“肾走多了，才明白走心的可贵”</p>\n<p>“渣男收割机”、“夜店王中王”、“叱咤级渣皇”</p>\n<p>都是她曾用的小名</p>\n<p>一位被她玩死的富二代</p>\n<p>去世前曾留下遗言：</p>\n<p>“</p>\n<p>别爱上她，相信我</p>\n<p>你只是寂寞的晚上</p>\n<p>她想要缠绵的</p>\n<p>小玩具</p>\n<p>”</p>\n<p>夜魔位列年度渣女榜榜首</p>\n<p>小蝌蚪的任务，猎杀夜魔</p>\n<p>凌晨一点，夜店</p>\n<p>小蝌蚪：“小姐姐，您好，我叫小蝌蚪”</p>\n<p>夜魔爱搭不理</p>\n<p>鲁迅说过：“在金钱面前，一切渣女都是纸老虎”</p>\n<p>小蝌蚪故意不经意间露出兰博基尼车钥匙（富婆八十大寿赠）</p>\n<p>夜魔大喜：“哥哥，请坐！”</p>\n<p>夜魔：“哥哥想喝点什么”</p>\n<p>小蝌蚪：“想喝点妳的酒窝”</p>\n<p>面对搭讪，夜魔故作脸红，假装羞涩</p>\n<p>让你觉得她是一个清纯走心的小姐姐</p>\n<p>夜魔：“我看哥哥挺有钱，哥哥职业是什么”</p>\n<p>小蝌蚪：“我的职业是职业渣男”</p>\n<p>一个低端富二代都是炫耀自己多有钱，爸爸多厉害</p>\n<p>但一个顶级富二代，从来都是说自己是渣男</p>\n<p>夜魔：“哥哥有喜欢的人吗”</p>\n<p>小蝌蚪：“有，她在别人的床上”</p>\n<p>小蝌蚪开始打感情牌，宣扬自己受过情伤</p>\n<p>唤母爱，博同情</p>\n<p>夜魔：“哥哥来找我什么事？”</p>\n<p>小蝌蚪：“想借用妳的美色和媚术，帮我攻破一个男人”</p>\n<p>夜魔：“谁？”</p>\n<p>小蝌蚪：“我”</p>\n<p>这是一个调情套路</p>\n<p>面对渣女，你要表现的比她更渣</p>\n<p>妳渣任妳渣，反正都没我渣</p>\n<p>小蝌蚪不再周旋，直接强攻</p>\n<p>小蝌蚪：“明人不说暗话，我想和妳结婚”</p>\n<p>夜魔是远近闻名的渣女，男人们只想和她暧昧</p>\n<p>面对突如其来的‘结婚’，开始手无足措</p>\n<p>小蝌蚪抓住时机，放大招</p>\n<p>谈笑间侧露价值180万的金表（富婆八十大寿赠）</p>\n<p>夜魔大惊</p>\n<p>菊花一紧，虎躯一震</p>\n<p>无数道圣光冲击她的天灵盖</p>\n<p>夜魔热泪盈眶</p>\n<p>满意的点了点头</p>\n<p>酒后三巡，意乱情迷之际</p>\n<p>小蝌蚪带她去找了妈妈</p>\n<p>深藏功与名</p>\n<h3 class=\"heading\" data-id=\"heading-2\">第三关：报复</h3>\n<p>最后一关</p>\n<p>佛曰：“第三关，报仇。报复当初甩掉你的女神和高富帅”</p>\n<p>“好的”，蝌蚪微笑，召唤出了夜魔</p>\n<p>晚八点，高档餐厅</p>\n<p>女神和高富帅在激情派对上亲亲我我</p>\n<p>夜魔出现，上台拿起话筒：</p>\n<p>“台下的小哥哥，请放下女朋友的手，你们被我包围了”</p>\n<p>现场一片哗然</p>\n<p>夜魔：“不是我针对谁，论美色，在座的各位，都是垃圾”</p>\n<p>所有人被夜魔的顶配神颜惊呆</p>\n<p>夜魔：“我会随机抽一个男人，明天和我一起起床”</p>\n<p>鲁迅说过：“我想和妳睡觉，是耍流氓。我想和妳起床，是徐志摩”</p>\n<p>男人们像疯狗一样欢呼和跪舔</p>\n<p>夜魔锁定目标</p>\n<p>径直走向高富帅：“小哥哥，你长得好像我下一任男朋友”</p>\n<p>高富帅惊慌失措：“我我我。。。已经。。。”</p>\n<p>夜魔强撩：“谈恋爱吗？二缺一”</p>\n<p>高富帅捂住心脏：“糟糕，是心动的感觉”</p>\n<p>一旁的女神暴怒：“我xx妳个xx，勾引我男人”</p>\n<p>夜魔一副柔弱装纯的样子：“我只是把他当哥哥～”</p>\n<p>女神继续：“我xx妳个xx”</p>\n<p>夜魔无辜的看着高富帅：“都怪我，害你女朋友生气了”</p>\n<p>高富帅沦陷：“不要理会那八婆”</p>\n<p>女神：“我xx妳个xx”</p>\n<p>夜魔：“她好凶，我好怕”</p>\n<p>高富帅：“不要怕，我的小心心，紫薯于妳”</p>\n<p>鲁迅说过：“渣女装纯，天下无敌”</p>\n<p>高富帅沦为了夜魔的裆下亡魂</p>\n<p>女神跪下，掩面痛哭</p>\n<p>这一切，都是小蝌蚪的精心策划</p>\n<p>佛主出现：“恭喜小蝌蚪，你成为了一位顶级渣男”</p>\n<p>小蝌蚪：“佛心四大皆空，贫僧尘念已结”</p>\n<p>佛曰：“我现赐予你法号——渣佛”</p>\n<p>佛曰：“希望你今后，随老衲去夜店降妖除魔，还人间一片净土”</p>\n<p>小蝌蚪：“哦咪陀佛”</p>\n<p>小蝌蚪终于成为了江湖第一的渣男</p>\n<p>手段虽然残忍</p>\n<p>但我们不要怪渣男渣</p>\n<p>因为每个渣男背后，都有一段刻骨铭心的虐恋</p>\n<p>每一位渣男，都曾是折翼的天使</p>\n<p>甩掉女神那天晚上</p>\n<p>小蝌蚪的肩膀上靠着富婆</p>\n<p>车里循环了一首歌：</p>\n<p>“</p>\n<p>i lost myself again</p>\n<p>我又一次迷失了自己</p>\n<p>but i still remember you</p>\n<p>脑海中的妳依然那么深刻</p>\n<p>don't come back</p>\n<p>别回头看我，那些伤还未愈合</p>\n<p>our love is six feet under</p>\n<p>我们的爱已深埋殆尽</p>\n<p>i can't help but wonder</p>\n<p>不能自己的我很想知道</p>\n<p>if our grave was watered by the rain</p>\n<p>滂沱大雨后，埋葬我们爱的地方</p>\n<p>would rose bloom</p>\n<p>是否会有玫瑰，悄然绽放</p>\n<p>————《six feet under》</p>\n<p>”</p>\n<h3 class=\"heading\" data-id=\"heading-3\">完</h3>\n<blockquote>\n<p>作者：第一名的小蝌蚪</p>\n</blockquote>\n<blockquote>\n<p>微信公众号：前端屌丝</p>\n</blockquote>\n<blockquote>\n<p>github： <a target=\"_blank\" href=\"https://github.com/airuikun/blog\" rel=\"nofollow noopener noreferrer\">github.com/airuikun/bl…</a></p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-4\">《 蝌蚪传记：200行代码实现前端无痕埋点 》</h2>\n<h3 class=\"heading\" data-id=\"heading-5\">背景</h3>\n<p>上次公开演讲结束后，很多小伙伴对无痕埋点很感兴趣</p>\n<p>那这次就讲讲前端无痕埋点的原理与实现吧。</p>\n<p>鲁迅说过：“一切不放源码的技术文章都是耍流氓”</p>\n<p>所以无痕埋点源码：<a target=\"_blank\" href=\"https://github.com/airuikun/smart-tracker\" rel=\"nofollow noopener noreferrer\">smart-tracker</a></p>\n<h3 class=\"heading\" data-id=\"heading-6\">什么是无痕埋点</h3>\n<p>简单来说，就是当引入无痕埋点的库以后</p>\n<p>用户在浏览器里所有行为和操作都会被自动记录下来</p>\n<p>并将信息发送到后端进行统计和分析</p>\n<p>传统的埋点形式，都是手动埋点</p>\n<p>在指定的元素上绑定事件</p>\n<p>将用户行为信息发送到服务端进行统计</p>\n<p>假设如果有一万个点需要前端狗去埋，惊喜不惊喜，意外不意外</p>\n<h3 class=\"heading\" data-id=\"heading-7\">我们为什么要做无痕埋点</h3>\n<p>提高工作效率，解放双手</p>\n<p>屌丝的双手得到解放以后</p>\n<p>就有更多的时间拿双手来取悦自己</p>\n<p>嘻嘻</p>\n<h3 class=\"heading\" data-id=\"heading-8\">无痕埋点原理</h3>\n<p>原理很简单，这里只讲click的无痕埋点原理</p>\n<p>当用户点击了页面上某一个元素</p>\n<p>我们要把当前元素到body之间整个dom的路径记录下来，作为这个元素的唯一标识，我们称之为domPath</p>\n<p>这个domPath不仅是这个元素唯一标识</p>\n<p>还可以通过document.querySelector(domPath)去唯一选择和定位到这个元素</p>\n<p>当用户点击一次这个元素，就会将埋点数据上传到服务器</p>\n<p>服务器上这个domPath对应的统计数据加一</p>\n<h3 class=\"heading\" data-id=\"heading-9\">无痕埋点代码实现</h3>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">    <span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'onclick'</span>,  (event) => {\n        <span class=\"hljs-keyword\">const</span> eventFix = getEvent(event);\n        <span class=\"hljs-keyword\">if</span> (!eventFix) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">this</span>._handleEvent(eventFix);\n    }, <span class=\"hljs-literal\">false</span>)\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>首先在document的body上监听和绑定全局click事件，捕获用户所有的点击事件。</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-keyword\">const</span> getDomPath = <span class=\"hljs-function\">(<span class=\"hljs-params\">element, useClass = <span class=\"hljs-literal\">false</span></span>) =></span> {\n    <span class=\"hljs-keyword\">if</span> (!(element <span class=\"hljs-keyword\">instanceof</span> HTMLElement)) {\n        <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">'input is not a HTML element!'</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>;\n    }\n    <span class=\"hljs-keyword\">let</span> domPath = [];\n    <span class=\"hljs-keyword\">let</span> elem = element;\n    <span class=\"hljs-keyword\">while</span> (elem) {\n        <span class=\"hljs-keyword\">let</span> domDesc = getDomDesc(elem, useClass);\n        <span class=\"hljs-keyword\">if</span> (!domDesc) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        domPath.unshift(domDesc);\n        <span class=\"hljs-keyword\">if</span> (querySelector(domPath.join(<span class=\"hljs-string\">'>'</span>)) === element || domDesc.indexOf(<span class=\"hljs-string\">'body'</span>) >= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        domPath.shift();\n        <span class=\"hljs-keyword\">const</span> children = elem.parentNode.children;\n        <span class=\"hljs-keyword\">if</span> (children.length > <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i < children.length; i++) {\n                <span class=\"hljs-keyword\">if</span> (children[i] === elem) {\n                    domDesc += <span class=\"hljs-string\">`:nth-child(<span class=\"hljs-subst\">${i + <span class=\"hljs-number\">1</span>}</span>)`</span>;\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n        domPath.unshift(domDesc);\n        <span class=\"hljs-keyword\">if</span> (querySelector(domPath.join(<span class=\"hljs-string\">'>'</span>)) === element) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        elem = elem.parentNode;\n    }\n    <span class=\"hljs-keyword\">return</span> domPath.join(<span class=\"hljs-string\">'>'</span>);\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>这段代码是关键，获取元素唯一标识domPath</p>\n<p>getDomPath函数传入的是用户点击事件的target对象: getDomPath(event.target)。</p>\n<p>主要思路是找到当前元素event.target</p>\n<p>然后不断的去循环找它的父节点parentNode</p>\n<p>将父节点的tagName当做domPath路径上的节点</p>\n<p>如果当前元素有id，那就取消所有路径的循环，直接讲id赋值给domPath</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">    <span class=\"hljs-keyword\">const</span> children = elem.parentNode.children;\n    <span class=\"hljs-keyword\">if</span> (children.length > <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i < children.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (children[i] === elem) {\n                domDesc += <span class=\"hljs-string\">`:nth-child(<span class=\"hljs-subst\">${i + <span class=\"hljs-number\">1</span>}</span>)`</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    domPath.unshift(domDesc);\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>getDomPath函数中的这段代码</p>\n<p>意思是在同一级上出现了多个相同tagName元素</p>\n<p>那我们要定位到这个event.target这个元素在这一级里的第几个</p>\n<p>假设这个div是同一级的第三个，那返回的就是div:nth-child(3)</p>\n<p>这样就可以在document.querySelector(domPath)里唯一定位到这个元素</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">    _handleEvent(event) {\n        <span class=\"hljs-keyword\">const</span> domPath = getDomPath(event.target);\n        <span class=\"hljs-keyword\">const</span> rect = getBoundingClientRect(event.target);\n        <span class=\"hljs-keyword\">if</span> (rect.width == <span class=\"hljs-number\">0</span> || rect.height == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-built_in\">document</span>.documentElement || <span class=\"hljs-built_in\">document</span>.body.parentNode;\n        <span class=\"hljs-keyword\">const</span> scrollX = (t && <span class=\"hljs-keyword\">typeof</span> t.scrollLeft == <span class=\"hljs-string\">'number'</span> ? t : <span class=\"hljs-built_in\">document</span>.body).scrollLeft;\n        <span class=\"hljs-keyword\">const</span> scrollY = (t && <span class=\"hljs-keyword\">typeof</span> t.scrollTop == <span class=\"hljs-string\">'number'</span> ? t : <span class=\"hljs-built_in\">document</span>.body).scrollTop;\n        <span class=\"hljs-keyword\">const</span> pageX = event.pageX || event.clientX + scrollX;\n        <span class=\"hljs-keyword\">const</span> pageY = event.pageY || event.clientY + scrollY;\n        <span class=\"hljs-keyword\">const</span> data = {\n            <span class=\"hljs-attr\">domPath</span>: <span class=\"hljs-built_in\">encodeURIComponent</span>(domPath),\n            <span class=\"hljs-attr\">trackingType</span>: event.type,\n            <span class=\"hljs-attr\">offsetX</span>: ((pageX - rect.left - scrollX) / rect.width).toFixed(<span class=\"hljs-number\">6</span>),\n            <span class=\"hljs-attr\">offsetY</span>: ((pageY - rect.top - scrollY) / rect.height).toFixed(<span class=\"hljs-number\">6</span>),\n        };\n        <span class=\"hljs-keyword\">this</span>.send(data);\n    }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>这段代码就是得到用户点击某个元素的相对位置的横向位置和竖向位置比例</p>\n<p>得到这个位置的值，就可以反向从埋点数据中得到用户点击元素的具体位置</p>\n<p>因为是个比例值，所以在反向推导中还能自适应页面大小的改变</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">    send(data = {}) {\n        <span class=\"hljs-keyword\">const</span> image = <span class=\"hljs-keyword\">new</span> Image(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n        image.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            image = <span class=\"hljs-literal\">null</span>;\n        };\n        image.src = <span class=\"hljs-string\">`/?<span class=\"hljs-subst\">${stringify(data)}</span>`</span>;\n    }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>得到了用户点击的位置信息和唯一标识domPath</p>\n<p>就可以将数据发送到服务端进行统计了</p>\n<p>用image的src，将数据进行传输</p>\n<p>用image的src有个好处就是轻量，并且还支持跨域</p>\n<p>打点基本上都用的这个方法进行发送数据</p>\n<h3 class=\"heading\" data-id=\"heading-10\">结尾</h3>\n<p>两个多月没写文章了，因为在忙着晋升</p>\n<p>这次晋升最大的感悟就是，如果你只一心专注业务，是很难晋升成功的</p>\n<p>需要在日常工作中做一些技术型需求</p>\n<p>而无痕埋点，是一个不错的选择</p>\n<p>但是这篇文章仅仅只是无痕埋点的一个简单实现</p>\n<p>对整个无痕埋点体系来说，这些只是冰山一角</p>\n<p>真正的无痕埋点，还需要做统计、分析、差量预测、标记策略、智能降噪、可视化无痕、无痕分桶、反向推导热力图、大数据中台等等\n涉及到前端、后端、运维、DBA和算法</p>\n<p>一起干下来，那你就是江湖顶级的前端渣男了</p>\n<p>以上就是文章的全部了，谢谢你能全部看完</p>\n<p>最后，祝你过上幸福快乐的生活</p>\n<blockquote>\n<p>作者：第一名的小蝌蚪</p>\n</blockquote>\n<blockquote>\n<p>微信公众号：前端屌丝</p>\n</blockquote>\n<blockquote>\n<p>github： <a target=\"_blank\" href=\"https://github.com/airuikun/blog\" rel=\"nofollow noopener noreferrer\">github.com/airuikun/bl…</a></p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-11\">往期文章</h2>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/airuikun/blog/issues/6\" rel=\"nofollow noopener noreferrer\">小蝌蚪传记：端口转发——夜店传说</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/airuikun/blog/issues/5\" rel=\"nofollow noopener noreferrer\">小蝌蚪传记：git时光穿梭机——女神的侧颜</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/airuikun/blog/issues/1\" rel=\"nofollow noopener noreferrer\">小蝌蚪传记：PNG图片压缩原理——屌丝的眼泪</a></li>\n</ul>\n",
      "id": "5gtok2hezx80",
      "author": "西岚",
      "title": "小蝌蚪传记：200行代码实现前端无痕埋点"
    },
    {
      "content": "<h1 class=\"heading\" data-id=\"heading-0\">写在前言</h1>\n<p>要知道在深圳上班是非常痛苦的事情，特别是我上班的科兴科技园这一块，去的人非常多，每天上班跟春运一样，如果我能换到以前的大冲上班那就幸福了，可惜，换不得。</p>\n<p>尤其是我这个站等车的多的一笔，上班公交挤的不行，车满的时候只有少部分人能硬挤上去。通常我只会用两个字来形容这种人：“公交怪”</p>\n<p>想当年我朋友瘦的像只猴还能上去，老子身高182体重72kg挤个公交，不成问题，反手一个阻挡，闷声发大财，前面的阿姨你快点阿姨，别磨磨唧唧的，快上去啊阿姨，嗯？你还想挤掉我？你能挤掉我？你能挤掉我！我当场！把车吃了！</p>\n<p>....</p>\n<p>咳咳，挤公交是不可能挤公交滴，因为今天我发现了一个可以定制路线的网约巴士公众号【深圳xxx】</p>\n<p>但是呢，票经常会被抢光，同时我还我发现，有时候会有人退票，这时候就有空余票了，关键是我不可能时时都在公众号上盯着，于是，我就写了一个抢票+短信通知的小工具</p>\n<h1 class=\"heading\" data-id=\"heading-1\">获取接口信息</h1>\n<h2 class=\"heading\" data-id=\"heading-2\">查看页面结构</h2>\n<p>这个就是订票页面，显示当前月的车票情况，根据图示，红色为已满，绿色为已购，灰色为不可选\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbb8fe1d3f8fc3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"1092\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"1092\"></svg>\"><figcaption></figcaption></figure>\n如果是可选就是白色的小方块，并且在下面显示余票，如下图所示：<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/17/16dd8cd6b2201199?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"324\" data-height=\"162\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"324\" height=\"162\"></svg>\"><figcaption></figcaption></figure>\n我们打算这么做，<p></p>\n<ol>\n<li>定时抓取返回的接口信息</li>\n<li>根据接口返回值判断是否有余票</li>\n</ol>\n<p>好，审查下源代码看下接口信息，等等，微信浏览器没办法审查源代码，于是</p>\n<h2 class=\"heading\" data-id=\"heading-3\">使用chrome 调试微信公众号网页页面</h2>\n<p>首先面临个问题，如果直接copy公众号网页Url在chrome打开的话，就会显示这个画面，他被302重定向到了这个页面，所以是行不通的，只有获取OAuth2.0授权才能进去</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16ddaee758b42b4e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"356\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"356\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>所以我们得先通过抓包工具，知道手机访问微信公众号网页的时候，需要带什么信息过去，这时候我们就得借助抓包工具，因为我电脑是Mac，用不了<code>Fiddler</code>，我用的是<code>Charles</code>花瓶，就是下面这位仁兄</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbba130282d533?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"380\" data-height=\"348\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"380\" height=\"348\"></svg>\"><figcaption></figcaption></figure>\n借助这个工具，我们只需3步就可以轻松搞定手机数据抓包：<p></p>\n<ol>\n<li><strong>获取本机IP地址和端口</strong></li>\n<li><strong>设置代理手机上网</strong></li>\n<li>依次执行上面两步</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-4\">获取本机IP地址和端口</h3>\n<p>第一步，找到端口号，一般默认是8088，但是为了确认可以打开<code>Proxy</code>/<code>Proxy Setting</code>看下，哦原来我之前设置成了8888</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbbb6d83d75fc2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"766\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"766\"></svg>\"><figcaption></figcaption></figure>\n然后找到<code>Charles</code>的<code>help</code>/<code>Local IP Address</code>，点击它就会看到自己的本机地址，找到本机地址记下来，然后进行下一步<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dde2ebaec1fcae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"807\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"807\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-5\">设置代理手机上网</h3>\n<p>首先保证手机跟电脑连接的是同一个wifi，然后在wifi设置那里会有设置代理信息，比如我的猴米...不对，小米9手机！设置如下：</p>\n<p>输入上一步获取主机名，端口号就ok了\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbbb54704d737e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"590\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"590\" height=\"1280\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>输入完成，点击确定后。<code>Charles</code>就会弹出一个对话框，问你是否同意接入代理，点击确定allow就行了。</p>\n<h3 class=\"heading\" data-id=\"heading-6\">用手机访问目标网页</h3>\n<p>我们用手机访问微信公众号【深圳x出行】进入到抢票页面后，发现<code>Charles</code>已经成功抓包到了网页信息，当我们进入这个抢票页面的时候，他会发起两个请求，一个是获取document文档内容，一个post请求获取票务信息。</p>\n<p>仔细分析了下，大概明白了业务逻辑：</p>\n<p>整个项目技术站是java+jsp，传统写法，用户身份验证主要是cookie+session方案，前端这一块主要是使用<code>jQuery</code>。</p>\n<p>当用户进入页面的时候，会携带查询参数，如起始站点，时间，车次等信息和cookie请求document文档，\n也就是圈起来的这一块，\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dde3053bbff4f2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"193\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"193\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16ddaf459b557988?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"1119\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"1119\"></svg>\"><figcaption></figcaption></figure>\n而我们想要的核心内容：日历表，一开始是不显示的<p></p>\n<p>因为还要在请求一次</p>\n<p>第二次请求，携带cookie和以上的查询参数发起一个post请求，获取当月的车票信息，也就是日历表内容</p>\n<p>下面这个是请求当月票务信息，然而发现他返回的是一堆html节点</p>\n<p>好吧...估计是获取到之后直接<code>append</code>到<code>div</code>里面的，然后渲染生成日历表内容\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbde3d055047f3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"545\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"545\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>接着在手机上操作，选择两个日期，然后点击下单，发送购票请求，拉取购票接口，我们看下购票接口的请求和返回内容：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/17/16dd8d12313f69f7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"566\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"566\"></svg>\"><figcaption></figcaption></figure>\n看下request 内容，根据字段的意思大概明白是线路，时间，以及车票金额，还有支付方式<p></p>\n<p>在看看返回的内容：返回一个json字符串数据，里面大概涵盖了下单的成功返回码，时间，id号等等信息\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/17/16dd8d1bc2cb32ba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"114\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"114\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-7\">记录所需要的信息内容</h3>\n<p>根据上面的分析，总结下内容：\n整个项目用户身份验证是使用<code>cookie</code>和<code>session</code>方案，请求数据用的是<code>form data</code>方式，请求字段啥的我们也都清楚，唯独有一点，就是请求余票的时候，返回的是html节点代码，而不是我们预期的json数据，这样就有个麻烦，我们没办法一目了然的明白他余票的时候是如何显示的</p>\n<p>所以我们只能通过<code>chrome</code>进行调试，才能得出他是如何判断余票的。</p>\n<p>我们找个记事本，记录下信息，记录的内容有：</p>\n<ol>\n<li><strong>请求余票接口和购票接口的<code>url</code>地址</strong></li>\n<li><strong><code>cookie</code>信息</strong></li>\n<li><strong>各自的<code>request</code>参数字段</strong></li>\n<li><strong><code>user-Agent</code>信息</strong></li>\n<li><strong>各自的<code>response</code>返回内容</strong></li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-8\">设置chrome</h3>\n<p>有以上信息后，我们就可以开始用chrome调试了，\n首先打开<code>More tools</code>/<code>Network conditions</code></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbe019d9130e8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1235\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1235\" height=\"1280\"></svg>\"><figcaption></figcaption></figure>\n把<code>user-Agent</code>填入到<code>Custom</code>里面<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbe02119166380?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"486\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"486\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-9\">Charles抓包本地请求</h3>\n<p>因为我们要把获取到的cookie填入到chrome里面，以我们的用户身份去访问网页，所以我们需要在请求目标地址的时候，改包修改cookie</p>\n<p>首先我们需要开启 <code>macOS Proxy</code>，抓包我们的http请求</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbe201ca6bd22e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"440\" data-height=\"484\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"440\" height=\"484\"></svg>\"><figcaption></figcaption></figure>\n打开chrome访问目标网址，我们可以看到<code>Charles</code>上已经抓包到了我们访问的目标url地址，然后给目标url地址打上断点，方便调试<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbeb7f0e72b6e4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"860\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"860\"></svg>\"><figcaption></figcaption></figure>\n然后再次访问，这时候断点就生效了，弹出一个tab名为<code>break points</code>，可以看到之所以我们还是不能访问到目标网址，是因为<code>sessionId</code>不对，所以我们把抓取到的<code>cookie</code>在填入到里面，点击<code>execute</code><p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dde356cd8baabc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"668\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"668\"></svg>\"><figcaption></figcaption></figure>\n这时候，能够正确跳到目标页面了。<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/12/16dbed1e1521cab4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"804\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"804\"></svg>\"><figcaption></figcaption></figure>\n大概看了下他整体布局，和<code>jQuery</code>代码<code>CSS</code>代码，特别是日历表那一块<p></p>\n<p>审查了下元素发现：</p>\n<ol>\n<li><strong>小方块的结构为：</strong></li>\n</ol>\n<pre><code class=\"hljs html copyable\" lang=\"html\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"b\"</span>></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">span</span>></span>这里为日期<span class=\"hljs-tag\"></<span class=\"hljs-name\">span</span>></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">span</span>></span>如果有余票则显示余票数量<span class=\"hljs-tag\"></<span class=\"hljs-name\">span</span>></span>\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">td</span>></span>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><ol start=\"2\">\n<li><strong>td的样式名为<code>a</code>代表不可选</strong></li>\n<li><strong>样式名为<code>e</code>代表已满</strong></li>\n<li><strong>样式名为<code>d</code>代表已购</strong></li>\n<li><strong>样式名为<code>b</code>则是我们要找的，代表可选，也就是有余票</strong></li>\n</ol>\n<p>到这一步，整个购票流程就清楚了</p>\n<p>到时候我们通过Node.js请求的时候，处理返回数据，用正则去判断是否有余票的class名<code>b</code>\n，有余票的话，在获取div里面的余票数量内容就Ok了</p>\n<h1 class=\"heading\" data-id=\"heading-10\">Node.js 请求目标接口</h1>\n<h2 class=\"heading\" data-id=\"heading-11\">分析需要开发的功能点</h2>\n<p>写代码之前我们需要想好功能点，我们需要什么功能:</p>\n<ol>\n<li><strong>请求余票接口</strong></li>\n<li><strong>定时请求任务</strong></li>\n<li><strong>有余票则自动请求购票接口下订单</strong></li>\n<li><strong>调用腾讯云短信api接口发送短信通知</strong></li>\n<li><strong>多个用户抢票功能</strong></li>\n<li><strong>抢某个日期的票</strong></li>\n</ol>\n<p>首先<code>mkdir ticket</code> 创建名为ticket的文件夹，接着<code>cd ticket</code>进入文件夹<code>npm init</code>一路瞎几把回车也无妨。\n下面开始安装依赖，根据上面的功能需求，我们大概需要：</p>\n<ol>\n<li>请求工具，这里看个人习惯，你也可以使用原生的<code>http.request</code>，我这里选择用的是<code>axios</code>，毕竟<code>axios</code>在node端底层也是调用<code>http.request</code></li>\n</ol>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">cnpm install axios --save\n<span class=\"copy-code-btn\">复制代码</span></code></pre><ol start=\"2\">\n<li>定时任务 <code>node-schedule</code></li>\n</ol>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">cnpm install node-schedule --save\n<span class=\"copy-code-btn\">复制代码</span></code></pre><ol start=\"3\">\n<li>node端选择dom节点工具 <code>cheerio</code></li>\n</ol>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">cnpm install cheerio --save\n<span class=\"copy-code-btn\">复制代码</span></code></pre><ol start=\"4\">\n<li>腾讯发短信的依赖包 <code>qcloudsms_js</code></li>\n</ol>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">cnpm install qcloudsms_js \n<span class=\"copy-code-btn\">复制代码</span></code></pre><ol start=\"5\">\n<li>热更新包，诺豆的妈妈，<code>nodemon</code> （其实不用也可以）</li>\n</ol>\n<pre><code class=\"hljs shell copyable\" lang=\"shell\">cnpm install nodemon --save-dev\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h2 class=\"heading\" data-id=\"heading-12\">开发请求余票接口</h2>\n<p>接着<code>touch index.js</code>创建核心js文件，开始编码：</p>\n<p>首先引入所有依赖</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">\n<span class=\"hljs-keyword\">const</span> axios = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'axios'</span>)\n<span class=\"hljs-keyword\">const</span> querystring = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"querystring\"</span>); <span class=\"hljs-comment\">//序列化对象，用qs也行，都一样</span>\n<span class=\"hljs-keyword\">let</span> QcloudSms = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"qcloudsms_js\"</span>);\n<span class=\"hljs-keyword\">let</span> cheerio = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cheerio'</span>);\n<span class=\"hljs-keyword\">let</span> schedule = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-schedule'</span>);\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>然后我们先定义请求参数,来一个obj</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-keyword\">let</span> obj = {\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">lineId</span>: <span class=\"hljs-number\">111130</span>, <span class=\"hljs-comment\">//路线id</span>\n    vehTime: <span class=\"hljs-number\">0722</span>, <span class=\"hljs-comment\">//发车时间，</span>\n    startTime: <span class=\"hljs-number\">0751</span>, <span class=\"hljs-comment\">//预计上车时间</span>\n    onStationId: <span class=\"hljs-number\">564492</span>, <span class=\"hljs-comment\">//预定的站点id</span>\n    offStationId: <span class=\"hljs-number\">17990</span>,<span class=\"hljs-comment\">//到站id</span>\n    onStationName: <span class=\"hljs-string\">'宝安交通运输局③'</span>,  <span class=\"hljs-comment\">//预定的站点名称</span>\n    offStationName: <span class=\"hljs-string\">\"深港产学研基地\"</span>,<span class=\"hljs-comment\">//预定到站名称</span>\n    tradePrice: <span class=\"hljs-number\">0</span>,<span class=\"hljs-comment\">//总金额</span>\n    saleDates: <span class=\"hljs-string\">'17'</span>,<span class=\"hljs-comment\">//车票日期</span>\n    beginDate: <span class=\"hljs-string\">''</span>,<span class=\"hljs-comment\">//订票时间，滞空，用于抓取到余票后填入数据</span>\n  },\n  <span class=\"hljs-attr\">phoneNumber</span>: <span class=\"hljs-number\">123123123</span>, <span class=\"hljs-comment\">//用户手机号，接收短信的手机号</span>\n  cookie: <span class=\"hljs-string\">'JSESSIONID=TESTCOOKIE'</span>, <span class=\"hljs-comment\">// 抓取到的cookie</span>\n  day: <span class=\"hljs-string\">\"17\"</span> <span class=\"hljs-comment\">//定17号的票，这个主要是用于抢指定日期的票，滞空则为抢当月所有余票</span>\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>接着声明一个名为<code>queryTicket</code>的类，为啥要用类呢，因为基于第五个需求点，多个用户抢票的时候，我们分别<code>new</code>一下就行了，</p>\n<p>同时我们希望能够记录请求余票的次数，和当抢到票后自动停止查询余票得操作，所以给他加上个计数变量<code>times</code>和是否停止的变量，布尔值<code>stop</code></p>\n<p>编写代码:</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryTicket</span></span>{\n  <span class=\"hljs-comment\">/**\n   *Creates an instance of QueryTicket.\n   * @param {Object} { data, phoneNumber, cookie, day }\n   * @param data {Object} 请求余票接口的requery参数\n   * @param phoneNumber {Number} 用户手机号，短信需要用到\n   * @param cookie {String} cookie信息\n   * @params day {String} 某日的票，如'18'\n   * @memberof QueryTicket 请求余票接口\n   */</span>\n  <span class=\"hljs-keyword\">constructor</span>({ data, phoneNumber, cookie, day }) {\n    <span class=\"hljs-keyword\">this</span>.data = data \n    <span class=\"hljs-keyword\">this</span>.cookie = cookie\n    <span class=\"hljs-keyword\">this</span>.day = day\n    <span class=\"hljs-keyword\">this</span>.phoneNumber = phoneNumber\n    <span class=\"hljs-keyword\">this</span>.postData = querystring.stringify(data)\n    <span class=\"hljs-keyword\">this</span>.times = <span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">//记录次数</span>\n    <span class=\"hljs-keyword\">let</span> stop = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">//通过特定接口才能修改stop值，防止外部随意串改</span>\n    <span class=\"hljs-keyword\">this</span>.getStop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">//获取是否停止</span>\n      <span class=\"hljs-keyword\">return</span> stop \n    }\n    <span class=\"hljs-keyword\">this</span>.setStop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ifStop</span>) </span>{ <span class=\"hljs-comment\">//设置是否停止</span>\n      stop = ifStop\n    }\n  }\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>下面开始定义原型方法，为了方便维护，我们把逻辑拆分成各个函数</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryTicket</span></span>{\n  <span class=\"hljs-keyword\">constructor</span>({ data, phoneNumber, cookie, day }) {\n  <span class=\"hljs-comment\">//constructor代码... </span>\n  }\n    init(){}<span class=\"hljs-comment\">//初始化</span>\n    handleQueryTicket(){}<span class=\"hljs-comment\">//查询余票的逻辑</span>\n    requestTicket(){} <span class=\"hljs-comment\">//调用查询余票接口</span>\n    handleBuyTicket(){} <span class=\"hljs-comment\">//购票相关逻辑</span>\n    requestOrder(){}<span class=\"hljs-comment\">//调用购票接口</span>\n    handleInfoUser(){}<span class=\"hljs-comment\">//通知用户的逻辑</span>\n    sendMSg(){} <span class=\"hljs-comment\">//发短信接口</span>\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>所有数据都是基于查询余票的操作，因此我们先开发这部分功能</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryTicket</span></span>{\n  <span class=\"hljs-keyword\">constructor</span>({ data, phoneNumber, cookie, day }) {\n  <span class=\"hljs-comment\">//constructor代码... </span>\n  }\n  <span class=\"hljs-comment\">//初始化,因为涉及到异步请求，所以我们使用`async await`</span>\n   <span class=\"hljs-keyword\">async</span> init(){\n          <span class=\"hljs-keyword\">let</span> ticketList = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.handleQueryTicket() <span class=\"hljs-comment\">//返回查询到的余票数组</span>\n    }\n    <span class=\"hljs-comment\">//查询余票的逻辑</span>\n    handleQueryTicket(){ \n    <span class=\"hljs-keyword\">let</span> ticketList = [] <span class=\"hljs-comment\">//余票数组</span>\n    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.requestTicket()\n    <span class=\"hljs-keyword\">this</span>.times++ <span class=\"hljs-comment\">//计数器，记录请求查询多少次</span>\n    <span class=\"hljs-keyword\">let</span> str = res.data.replace(<span class=\"hljs-regexp\">/\\\\/g</span>, <span class=\"hljs-string\">\"\"</span>) <span class=\"hljs-comment\">//格式化返回值</span>\n    <span class=\"hljs-keyword\">let</span> $ = cheerio.load(<span class=\"hljs-string\">`<div class=\"main\"><span class=\"hljs-subst\">${str}</span></div>`</span>) <span class=\"hljs-comment\">// cheerio载入查询接口response的html节点数据</span>\n    <span class=\"hljs-keyword\">let</span> list = $(<span class=\"hljs-string\">\".main\"</span>).find(<span class=\"hljs-string\">\".b\"</span>) <span class=\"hljs-comment\">//查找是否有余票的dom节点</span>\n    <span class=\"hljs-comment\">// 如果没有余票，打印出请求多少次,然后返回，不执行下面的代码</span>\n    <span class=\"hljs-keyword\">if</span> (!list.length) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`用户<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.phoneNumber}</span>：无票，已进行<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.times}</span>次`</span>)\n      <span class=\"hljs-keyword\">return</span>\n    }\n\n    <span class=\"hljs-comment\">// 如果有余票</span>\n    list.each(<span class=\"hljs-function\">(<span class=\"hljs-params\">idx, item</span>) =></span> {\n      <span class=\"hljs-keyword\">let</span> str = $(item).html() <span class=\"hljs-comment\">//str这时格式是<span>21</span><span>&$x4F59;0</span></span>\n      <span class=\"hljs-comment\">//最后一个span 的内容其实\"余0\"，也就是无票，只不过是被转码了而已</span>\n      <span class=\"hljs-comment\">//因此要在下一步对其进行格式化</span>\n      <span class=\"hljs-keyword\">let</span> arr = str.split(<span class=\"hljs-regexp\">/<span>|<\\/span>|\\&\\#x4F59\\;/</span>).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> !!item === <span class=\"hljs-literal\">true</span>) \n      <span class=\"hljs-keyword\">let</span> data = {\n        <span class=\"hljs-attr\">day</span>: arr[<span class=\"hljs-number\">0</span>],\n        <span class=\"hljs-attr\">ticketLeft</span>: arr[<span class=\"hljs-number\">1</span>]\n      }\n      \n      <span class=\"hljs-comment\">//如果是要抢指定日期的票</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.day) {\n      <span class=\"hljs-comment\">//如果有指定日期的余票</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">parseInt</span>(data.day) === <span class=\"hljs-built_in\">parseInt</span>(data.day)) {\n          ticketList.push(data)\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">//如果不是，则返回查询到的所有余票</span>\n        ticketList.push(data)\n      }\n    })\n    <span class=\"hljs-keyword\">return</span> ticketList\n    }\n     <span class=\"hljs-comment\">//调用查询余票接口</span>\n    requestTicket(){\n    <span class=\"hljs-keyword\">return</span> axios.post(<span class=\"hljs-string\">'http://weixin.xxxx.net/ebus/front/wxQueryController.do?BcTicketCalendar'</span>, <span class=\"hljs-keyword\">this</span>.postData, {\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/x-www-form-urlencoded'</span>,\n        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12A365 MicroMessenger/5.4.1 NetType/WIFI\"</span>,\n        <span class=\"hljs-string\">\"Cookie\"</span>: <span class=\"hljs-keyword\">this</span>.cookie\n      }\n    })   \n    }\n    handleBuyTicket(){} <span class=\"hljs-comment\">//购票相关逻辑</span>\n    requestOrder(){}<span class=\"hljs-comment\">//调用购票接口</span>\n    handleInfoUser(){}<span class=\"hljs-comment\">//通知用户的逻辑</span>\n    sendMSg(){} <span class=\"hljs-comment\">//发短信接口</span>\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>来解释下那行正则，<code>cheerio</code>抓取到的dom是长这样的，第一个<code>span</code>内容是日期，第二个是余票数量\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16ddcebe5ff5a6e7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"226\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"226\"></svg>\"><figcaption></figcaption></figure>\n所以我们要把它格式化变成这种数组，也就是<code>ticketList</code>\n<figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16ddcec5a3ddac0f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"231\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"231\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-13\">开发购票功能</h2>\n<p>首先我们在<code>init</code>方法里做个判断，如果有余票才去购票，没有余票购个毛</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryTicket</span></span>{\n  <span class=\"hljs-keyword\">constructor</span>({ data, phoneNumber, cookie, day }) {\n  <span class=\"hljs-comment\">//constructor代码... </span>\n  }\n  <span class=\"hljs-comment\">//初始化</span>\n   <span class=\"hljs-keyword\">async</span> init(){\n    <span class=\"hljs-keyword\">let</span> ticketList = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.handleQueryTicket()\n    <span class=\"hljs-comment\">//如果有余票</span>\n    <span class=\"hljs-keyword\">if</span> (ticketList.length) {\n    <span class=\"hljs-comment\">//把余票传入购票逻辑方法，返回短信通知所需要的数据</span>\n      <span class=\"hljs-keyword\">let</span> resParse = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.handleBuyTicket(ticketList)\n    }\n    }\n    \n    <span class=\"hljs-comment\">//查询余票的逻辑</span>\n   <span class=\"hljs-keyword\">async</span> handleQueryTicket(){\n    <span class=\"hljs-comment\">// 查询余票代码...</span>\n    }\n    <span class=\"hljs-comment\">//调用查询余票接口</span>\n    requestTicket(){\n    <span class=\"hljs-comment\">//调用查询余票接口代码...    </span>\n    } \n    <span class=\"hljs-comment\">//购票相关逻辑</span>\n   <span class=\"hljs-keyword\">async</span> handleBuyTicket(ticketList){\n    <span class=\"hljs-keyword\">let</span> year = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() <span class=\"hljs-comment\">//年份，</span>\n    <span class=\"hljs-keyword\">let</span> month = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getMonth() + <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">//月份，拼接购票日期用得上，因为余票接口只返回几号</span>\n    <span class=\"hljs-keyword\">let</span> {\n      onStationName,<span class=\"hljs-comment\">//起始站点名</span>\n      offStationName,<span class=\"hljs-comment\">//结束站点名</span>\n      lineId,<span class=\"hljs-comment\">//线路id</span>\n      vehTime,<span class=\"hljs-comment\">//发车时间</span>\n      startTime,<span class=\"hljs-comment\">//预计上车时间</span>\n      onStationId,<span class=\"hljs-comment\">//上车的站台id</span>\n      offStationId <span class=\"hljs-comment\">//到站的站台id</span>\n      } = <span class=\"hljs-keyword\">this</span>.data <span class=\"hljs-comment\">// 初始化的数据</span>\n\n    <span class=\"hljs-keyword\">let</span> station = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${onStationName}</span>-<span class=\"hljs-subst\">${offStationName}</span>`</span> <span class=\"hljs-comment\">//站点，发短信时候用到:\"宝安交通局-深港产学研基地\"</span>\n    <span class=\"hljs-keyword\">let</span> dateStr = <span class=\"hljs-string\">\"\"</span>; <span class=\"hljs-comment\">//车票日期</span>\n    <span class=\"hljs-keyword\">let</span> tickAmount = <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\">//总张数</span>\n    ticketList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> {\n      dateStr = dateStr + <span class=\"hljs-string\">`<span class=\"hljs-subst\">${year}</span>-<span class=\"hljs-subst\">${month}</span>-<span class=\"hljs-subst\">${item.day}</span>,`</span>\n      tickAmount = tickAmount + <span class=\"hljs-string\">`<span class=\"hljs-subst\">${item.ticketLeft}</span>张,`</span>\n    })\n\n    <span class=\"hljs-keyword\">let</span> buyTicket = {\n      lineId,<span class=\"hljs-comment\">//线路id</span>\n      vehTime,<span class=\"hljs-comment\">//发车时间</span>\n      startTime,<span class=\"hljs-comment\">//预计上车时间</span>\n      onStationId,<span class=\"hljs-comment\">//上车的站点id</span>\n      offStationId,<span class=\"hljs-comment\">//目标站点id</span>\n      tradePrice: <span class=\"hljs-string\">'5'</span>, <span class=\"hljs-comment\">//金额</span>\n      saleDates: dateStr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>),\n      <span class=\"hljs-attr\">payType</span>: <span class=\"hljs-string\">'2'</span> <span class=\"hljs-comment\">//支付方式，微信支付</span>\n    }\n\n    <span class=\"hljs-comment\">// 调用购票接口</span>\n     <span class=\"hljs-keyword\">let</span> data = querystring.stringify(buyTicket)\n     <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.requestOrder(data) <span class=\"hljs-comment\">//返回json数据，是否购票成功等等</span>\n     <span class=\"hljs-comment\">//把发短信所需要数据都要传入</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.assign({}, <span class=\"hljs-built_in\">JSON</span>.parse(res.data), { <span class=\"hljs-attr\">queryParam</span>: { dateStr, tickAmount, startTime, station } })\n    }<span class=\"hljs-comment\">//购票相关逻辑</span>\n    <span class=\"hljs-comment\">//调用购票接口</span>\n    requestOrder(obj){\n    <span class=\"hljs-keyword\">return</span> axios.post(<span class=\"hljs-string\">'http://weixin.xxxx.net/ebus/front/wxQueryController.do?BcTicketBuy'</span>, obj, {\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/x-www-form-urlencoded'</span>,\n        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12A365 MicroMessenger/5.4.1 NetType/WIFI\"</span>,\n        <span class=\"hljs-string\">\"Cookie\"</span>: <span class=\"hljs-keyword\">this</span>.cookie\n      }\n    })\n    }\n    handleInfoUser(){}<span class=\"hljs-comment\">//通知用户的逻辑</span>\n    sendMSg(){} <span class=\"hljs-comment\">//发短信接口</span>\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>到这里，查询余票，购票这两个核心操作已经完成。</p>\n<p>目前还剩下，如何通知用户是否购票成功。</p>\n<p>之前我尝试过使用qq邮箱的smtp服务，抢票成功后发送邮件通知，但是我觉得吧，并不好用，主要是我没有打开邮箱的习惯，没网也收不到，所以，并没有采纳这个方案。</p>\n<p>加上之前我注册过企业认证的公众号，腾讯云免费送了我1000条短信通知，而且短信也比较直观，所以我这里就安装腾讯云的SDK，部署了一套发短信的功能。</p>\n<h2 class=\"heading\" data-id=\"heading-14\">腾讯云短信的相关内容</h2>\n<p>其实看看文档就行了，我也是copy文档，注意看短信单发那部分</p>\n<p><a target=\"_blank\" href=\"https://cloud.tencent.com/document/product/382/3772\" rel=\"nofollow noopener noreferrer\">cloud.tencent.com/document/pr…</a></p>\n<p>如果跟我一样有企业认证的话，看快速入门这里就行了，一步步跟着操作\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dddd7629b40c48?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"489\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"489\"></svg>\"><figcaption></figcaption></figure>\n看下短信正文，<code>{Number}</code>这些里面的数字是变量。<p></p>\n<p>就是说短信的模板是固定的，但是里面有<code>{Number}</code>的内容可以自定义</p>\n<p>调用的时候，里面的数字对应着传过去的参数数组序号，{1}代表数组[0]参数，以此类推\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dddd6c1dd1a411?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"539\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"539\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>提交审核，审核一般很快就通过，也就是几十万毫秒吧</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dddf02494589bf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1210\" data-height=\"108\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1210\" height=\"108\"></svg>\"><figcaption></figcaption></figure>\n<figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dddefa8b62db68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"116\" data-height=\"120\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"116\" height=\"120\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-15\">开发通知功能</h2>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QueryTicket</span></span>{\n  <span class=\"hljs-keyword\">constructor</span>({ data, phoneNumber, cookie, day }) {\n  <span class=\"hljs-comment\">//constructor代码... </span>\n  }\n  <span class=\"hljs-comment\">//初始化</span>\n   <span class=\"hljs-keyword\">async</span> init(){\n    <span class=\"hljs-keyword\">let</span> ticketList = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.handleQueryTicket()\n    <span class=\"hljs-comment\">//如果有余票</span>\n    <span class=\"hljs-keyword\">if</span> (ticketList.length) {\n    <span class=\"hljs-comment\">//把余票传入购票逻辑方法，返回短信通知所需要的数据</span>\n      <span class=\"hljs-keyword\">let</span> resParse = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.handleBuyTicket(ticketList)\n    <span class=\"hljs-comment\">//执行通知逻辑</span>\n     <span class=\"hljs-keyword\">this</span>.handleInfoUser(resParse)\n    }\n    }\n    \n    <span class=\"hljs-comment\">//查询余票的逻辑</span>\n   <span class=\"hljs-keyword\">async</span> handleQueryTicket(){\n    <span class=\"hljs-comment\">// 查询余票代码...</span>\n    }\n    <span class=\"hljs-comment\">//调用查询余票接口</span>\n    requestTicket(){\n    <span class=\"hljs-comment\">//调用查询余票接口代码...    </span>\n    } \n    <span class=\"hljs-comment\">//购票相关逻辑</span>\n   <span class=\"hljs-keyword\">async</span> handleBuyTicket(ticketList){\n    <span class=\"hljs-comment\">//购票代码...</span>\n    }\n    <span class=\"hljs-comment\">//调用购票接口</span>\n    requestOrder(obj){\n    <span class=\"hljs-comment\">//购票接口请求代码...</span>\n    }\n    <span class=\"hljs-comment\">//通知用户的逻辑</span>\n    <span class=\"hljs-keyword\">async</span> handleInfoUser(parseData){\n    <span class=\"hljs-comment\">//获取上一步购票的response数据和我们拼接的数据</span>\n    <span class=\"hljs-keyword\">let</span> { returnCode, <span class=\"hljs-attr\">returnData</span>: { <span class=\"hljs-attr\">main</span>: { lineName, tradePrice } }, <span class=\"hljs-attr\">queryParam</span>: { dateStr, tickAmount, startTime, station } } = parseData\n    <span class=\"hljs-comment\">//如果购票成功，则返回500</span>\n    <span class=\"hljs-keyword\">if</span> (returnCode === <span class=\"hljs-string\">\"500\"</span>) {\n      <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.sendMsg({\n        dateStr, <span class=\"hljs-comment\">//日期</span>\n        tickAmount: tickAmount.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>), <span class=\"hljs-comment\">//总张数</span>\n        station, <span class=\"hljs-comment\">//站点</span>\n        lineName, <span class=\"hljs-comment\">//巴士名称/路线名称</span>\n        tradePrice,<span class=\"hljs-comment\">//总价</span>\n        startTime,<span class=\"hljs-comment\">//出发时间</span>\n        phoneNumber: <span class=\"hljs-keyword\">this</span>.phoneNumber,<span class=\"hljs-comment\">//手机号</span>\n      })\n      <span class=\"hljs-comment\">//如果发信成功，则不再进行抢票操作</span>\n      <span class=\"hljs-keyword\">if</span> (res.result === <span class=\"hljs-number\">0</span> && res.errmsg === <span class=\"hljs-string\">\"OK\"</span>) {\n        <span class=\"hljs-keyword\">this</span>.setStop(<span class=\"hljs-literal\">true</span>)\n      } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">//失败不做任何操作</span>\n        <span class=\"hljs-built_in\">console</span>.log(res.errmsg)\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">//失败不做任何操作</span>\n      <span class=\"hljs-built_in\">console</span>.log(resParse[<span class=\"hljs-string\">'returnInfo'</span>])\n    }        \n    }\n    <span class=\"hljs-comment\">//发短信接口</span>\n    sendMSg(){\n    <span class=\"hljs-keyword\">let</span> { dateStr, tickAmount, station, lineName, phoneNumber, startTime, tradePrice } = obj\n    <span class=\"hljs-keyword\">let</span> appid = <span class=\"hljs-number\">140034324</span>;  <span class=\"hljs-comment\">// SDK AppID 以1400开头</span>\n    <span class=\"hljs-comment\">// 短信应用 SDK AppKey</span>\n    <span class=\"hljs-keyword\">let</span> appkey = <span class=\"hljs-string\">\"asdfdsvajwienin23493nadsnzxc\"</span>;\n    <span class=\"hljs-comment\">// 短信模板 ID，需要在短信控制台中申请</span>\n    <span class=\"hljs-keyword\">let</span> templateId = <span class=\"hljs-number\">7839</span>;  <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> 这里的模板ID`7839`只是示例，真实的模板 ID 需要在短信控制台中申请</span>\n    <span class=\"hljs-comment\">// 签名</span>\n    <span class=\"hljs-keyword\">let</span> smsSign = <span class=\"hljs-string\">\"测试短信\"</span>;  <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名\"腾讯云\"只是示例，真实的签名需要在短信控制台申请</span>\n    <span class=\"hljs-comment\">// 实例化 QcloudSms</span>\n    <span class=\"hljs-keyword\">let</span> qcloudsms = QcloudSms(appid, appkey);\n    <span class=\"hljs-keyword\">let</span> ssender = qcloudsms.SmsSingleSender();\n    <span class=\"hljs-comment\">// 这里的params就是短信里面可以自定义的内容，也就是填入{1}{2}..的内容</span>\n    <span class=\"hljs-keyword\">let</span> params = [dateStr, station, lineName, startTime, tickAmount, tradePrice];\n    <span class=\"hljs-comment\">//用promise来封装下异步操作</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n      ssender.sendWithParam(<span class=\"hljs-number\">86</span>, phoneNumber, templateId, params, smsSign, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res, resData</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (err) {\n          reject(err)\n        } <span class=\"hljs-keyword\">else</span> {\n          resolve(resData)\n        }\n      });\n    })\n    } \n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>如果发信成功，返回<code>result:0</code>\n</p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dddf647e452e11?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"142\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"142\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p>到这里，大部分需求已经完成了，还剩下一个定时任务</p>\n<h2 class=\"heading\" data-id=\"heading-16\">定时任务</h2>\n<p>也声明一个类，这里我们用到的是<code>schedule</code></p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\"><span class=\"hljs-comment\">// 定时任务</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SetInter</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>({ timer, fn }) {\n    <span class=\"hljs-keyword\">this</span>.timer = timer <span class=\"hljs-comment\">// 每几秒执行</span>\n    <span class=\"hljs-keyword\">this</span>.fn = fn <span class=\"hljs-comment\">//执行的回调</span>\n    <span class=\"hljs-keyword\">this</span>.rule = <span class=\"hljs-keyword\">new</span> schedule.RecurrenceRule(); <span class=\"hljs-comment\">//实例化一个对象</span>\n    <span class=\"hljs-keyword\">this</span>.rule.second = <span class=\"hljs-keyword\">this</span>.setRule() <span class=\"hljs-comment\">// 调用原型方法，schedule的语法而已</span>\n    <span class=\"hljs-keyword\">this</span>.init()\n  }\n  setRule() {\n    <span class=\"hljs-keyword\">let</span> rule = [];\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (i < <span class=\"hljs-number\">60</span>) {\n      rule.push(i)\n      i += <span class=\"hljs-keyword\">this</span>.timer\n    }\n    <span class=\"hljs-keyword\">return</span> rule <span class=\"hljs-comment\">//假设传入的timer为5，则表示定时任务每5秒执行一次</span>\n    <span class=\"hljs-comment\">// [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56] </span>\n  }\n  init() {\n    schedule.scheduleJob(<span class=\"hljs-keyword\">this</span>.rule, () => {\n      <span class=\"hljs-keyword\">this</span>.fn() <span class=\"hljs-comment\">// 定时调用传入的回调方法</span>\n    });\n  }\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h2 class=\"heading\" data-id=\"heading-17\">多个用户抢票</h2>\n<p>假设我们有两个用户要抢票，所以定义两个obj，实例化下<code>QueryTicket</code>类</p>\n<pre><code class=\"hljs javascript copyable\" lang=\"javascript\">  data: { <span class=\"hljs-comment\">//用户1</span>\n    lineId: <span class=\"hljs-number\">111130</span>,\n    <span class=\"hljs-attr\">vehTime</span>: <span class=\"hljs-number\">0722</span>,\n    <span class=\"hljs-attr\">startTime</span>: <span class=\"hljs-number\">0751</span>,\n    <span class=\"hljs-attr\">onStationId</span>: <span class=\"hljs-number\">564492</span>,\n    <span class=\"hljs-attr\">offStationId</span>: <span class=\"hljs-number\">17990</span>,\n    <span class=\"hljs-attr\">onStationName</span>: <span class=\"hljs-string\">'宝安交通运输局③'</span>,\n    <span class=\"hljs-attr\">offStationName</span>: <span class=\"hljs-string\">\"深港产学研基地\"</span>,\n    <span class=\"hljs-attr\">tradePrice</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">saleDates</span>: <span class=\"hljs-string\">''</span>,\n    <span class=\"hljs-attr\">beginDate</span>: <span class=\"hljs-string\">''</span>,\n  },\n  <span class=\"hljs-attr\">phoneNumber</span>: <span class=\"hljs-number\">123123123</span>,\n  <span class=\"hljs-attr\">cookie</span>: <span class=\"hljs-string\">'JSESSIONID=TESTCOOKIE'</span>,\n  <span class=\"hljs-attr\">day</span>: <span class=\"hljs-string\">\"17\"</span>\n}\n<span class=\"hljs-keyword\">let</span> obj2 = { <span class=\"hljs-comment\">//用户2</span>\n  data: {\n    <span class=\"hljs-attr\">lineId</span>: <span class=\"hljs-number\">134423</span>,\n    <span class=\"hljs-attr\">vehTime</span>: <span class=\"hljs-number\">1820</span>,\n    <span class=\"hljs-attr\">startTime</span>: <span class=\"hljs-number\">1855</span>,\n    <span class=\"hljs-attr\">onStationId</span>: <span class=\"hljs-number\">4322</span>,\n    <span class=\"hljs-attr\">offStationId</span>: <span class=\"hljs-number\">53231</span>,\n    <span class=\"hljs-attr\">onStationName</span>: <span class=\"hljs-string\">'百度国际大厦'</span>,\n    <span class=\"hljs-attr\">offStationName</span>: <span class=\"hljs-string\">\"裕安路口\"</span>,\n    <span class=\"hljs-attr\">tradePrice</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">saleDates</span>: <span class=\"hljs-string\">''</span>,\n    <span class=\"hljs-attr\">beginDate</span>: <span class=\"hljs-string\">''</span>,\n  },\n  <span class=\"hljs-attr\">phoneNumber</span>: <span class=\"hljs-number\">175932123124</span>,\n  <span class=\"hljs-attr\">cookie</span>: <span class=\"hljs-string\">'JSESSIONID=TESTCOOKIE'</span>,\n  <span class=\"hljs-attr\">day</span>: <span class=\"hljs-string\">\"\"</span> \n}\n<span class=\"hljs-keyword\">let</span> ticket = <span class=\"hljs-keyword\">new</span> QueryTicket(obj) <span class=\"hljs-comment\">//用户1</span>\n<span class=\"hljs-keyword\">let</span> ticket2 = <span class=\"hljs-keyword\">new</span> QueryTicket(obj2) <span class=\"hljs-comment\">//用户2</span>\n\n<span class=\"hljs-keyword\">new</span> SetInter({\n  <span class=\"hljs-attr\">timer</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">//每秒执行一次，建议5秒，不然怕被ip拉黑，我这里只是为了方便下面截图</span>\n  fn: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    [ticket,ticket2].map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> { <span class=\"hljs-comment\">//同时进行两个用户的抢票</span>\n      <span class=\"hljs-keyword\">if</span> (!item.getStop()) {  <span class=\"hljs-comment\">//调用实例的原型方法，判断是否停止抢票，如果没有则继续抢</span>\n        item.init()\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// 如果抢到票了，则不继续抢票</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'stop'</span>)\n      }\n    })\n  }\n})\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p><code>node index.js</code> 运行下，跑起来了</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/21/16dedde47ecd677b?imageslim\" data-width=\"800\" data-height=\"364\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"364\"></svg>\"><figcaption></figcaption></figure>\n如果他抢到票的话，我就会收到短信通知：<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16dde1daec3f1eab?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"635\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"635\" height=\"1280\"></svg>\"><figcaption></figcaption></figure>\n打开手机，看下订单信息<p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/18/16ddf278e51019c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"516\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"516\"></svg>\"><figcaption></figcaption></figure>\n搞定，收工<p></p>\n<h1 class=\"heading\" data-id=\"heading-18\">写在最后</h1>\n<p>其实可以在此基础上还能添加更多功能，比如直接抓取登录接口获取cookie，指定路线抢票，还有错误处理啊啥的</p>\n<p><strong>值得注意的是，请求接口不能太频繁，最好控制在5秒一次的频率，不然会给别人造成困扰，也容易被ip拉黑</strong></p>\n<p>如果想把它做成一个完整的项目，建议使用ts加持\n，关于ts我推荐阅读这篇JD前端写的文章</p>\n<p><a target=\"_blank\" href=\"https://juejin.im/post/5d8efeace51d45782b0c1bd6\" rel>juejin.im/post/5d8efe…</a></p>\n<p>希望各位能有所收获</p>\n<h1 class=\"heading\" data-id=\"heading-19\">特别声明</h1>\n<blockquote>\n<p><strong>本文只做为技术分享，文中代码仅做学习用途</strong></p>\n</blockquote>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e1304d8a5f2026?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"344\" data-height=\"344\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"344\" height=\"344\"></svg>\"><figcaption></figcaption></figure>\n不定期更新js各种好玩的用法，欢迎关注，不发广告，不靠这个恰饭<p></p>\n<p>（主要是我没授权给其他公众号，他们擅自就转载了我的文章，搞得我好不爽，不如自己弄一个公众号算了）</p>\n",
      "id": "5yzhe5dhsvs0",
      "author": "极客James",
      "title": "Node.js 实现抢票小工具&短信通知提醒"
    },
    {
      "content": "<p><code>阅读时间预计5分钟,干货满满,记得点赞加收藏哦😄</code></p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/23/16df7b4e851e3c18?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"712\" src=\"https://user-gold-cdn.xitu.io/2019/10/23/16df7b4e851e3c18?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-0\">一、写在前面</h3>\n<p>各位掘友久等了,最近在写Vue全家桶+Vant从零开发搭建电商App实战项目,项目基本完结,后面会不定期分享出来,期待各位掘友的关注。</p>\n<h3 class=\"heading\" data-id=\"heading-1\">二、注册登录</h3>\n<p>注册登录,几乎是所有电商App必备模块,正好今天想把这块知识拆出来,详尽的写下来了,用过掘金的小伙伴都知道,掘金PC端的登录界面非常的萌,当你输入账号的时候萌猫会很开心,输入密码的时候,萌猫会捂眼睛,看到这个可爱的设计,着实让我喜欢,所以我就借鉴了掘金的萌猫图写了个登录注册模块,以下是完整UI.</p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb7507e629ee1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1004\" data-height=\"598\" src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb7507e629ee1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure>\n<br><p></p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb778aa7cce3d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"998\" data-height=\"600\" src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb778aa7cce3d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-2\">三、整体UI搭建思路</h3>\n<p>UI部分非常的简单,整体就是最外层一个大盒子放一张图片,里面放一张小盒子设备边框圆角,然后把萌猫定位到小盒子的顶部中间位置,然后借助Vant来完成相关输入框,按钮的搭建.</p>\n<h3 class=\"heading\" data-id=\"heading-3\">四、Vant 使用</h3>\n<p><a target=\"_blank\" href=\"https://youzan.github.io/vant/#/zh-CN/intro\" rel=\"nofollow noopener noreferrer\">Vant</a>是有赞开源的很适合做电商App的UI组件,用起来非常爽,我整个项目都采用Vant UI搭建,风格统一,使用简单方便.\n首先将Vant引入到项目中,建议创建一个单独的文件来管理Vant的组件引入模块,按需加载,原则是用哪个就加载哪个.</p>\n<p>注册登录的切换用到了Vant的标签页组件,快速的实现登录和注册页面的切换。</p>\n<p><a target=\"_blank\" href=\"https://youzan.github.io/vant/#/zh-CN/tab\" rel=\"nofollow noopener noreferrer\">Vant tab</a>按照文档来,非常的简单和好用。</p>\n<p>输入框用到了Vant的Field组件<a target=\"_blank\" href=\"https://youzan.github.io/vant/#/zh-CN/field\" rel=\"nofollow noopener noreferrer\">Vant Field</a></p>\n<p>按钮用到了Vant的Button组件<a target=\"_blank\" href=\"https://youzan.github.io/vant/#/zh-CN/button\" rel=\"nofollow noopener noreferrer\">Vant Button</a></p>\n<h3 class=\"heading\" data-id=\"heading-4\">五、萌猫切换</h3>\n<p>萌猫根据你所在的输入框不同切换不同的样式,其实就是三张图片的切换,要么一次把三张图片都加载到页面,然后通过<code>v-show</code>的方式来控制他们的显示,这种方式感觉有点麻烦,我采用数据驱动界面的方式,点击到哪个位置,就让<code>img</code>标签来加载哪张图片.</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">// 改变萌猫\n    changeImage (index) {\n      <span class=\"hljs-keyword\">if</span> (index == 0) {\n        this.imageURL = require(<span class=\"hljs-string\">'./../../images/login/greeting.png'</span>)\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (index == 1) {\n        this.imageURL = require(<span class=\"hljs-string\">'./../../images/login/blindfold.png'</span>)\n      } <span class=\"hljs-keyword\">else</span> {\n        this.imageURL = require(<span class=\"hljs-string\">'./../../images/login/normal.png'</span>)\n      }\n    },\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-5\">六、倒计时</h3>\n<p>倒计时其实就是个定时器,先设置好总时长,然后每秒减一,直到减到0,然后恢复按钮点击的状态.</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"> // 发送手机验证码\n    <span class=\"hljs-function\"><span class=\"hljs-title\">sendVerifyCode</span></span> () {\n      Toast({\n        message: <span class=\"hljs-string\">'发送验证码'</span>,\n        duration: 800\n\n      });\n      this.countDown = 60;\n      this.timeIntervalID = <span class=\"hljs-built_in\">set</span>Interval(() => {\n        this.countDown--;\n        // 如果减到0 则清除定时器\n        <span class=\"hljs-keyword\">if</span> (this.countDown == 0) {\n          clearInterval(this.timeIntervalID);\n        }\n      }, 1000)\n    }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-6\">七、手机号码正则验证</h3>\n<p>通过计算属性来验证输入的手机号码是否正确,然后在合适的位置调用这个计算属性就可以</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"> computed: {\n    // 手机号码正确验证\n    <span class=\"hljs-function\"><span class=\"hljs-title\">phoneNumVerify</span></span> () {\n      <span class=\"hljs-built_in\">return</span> /[1][3,4,5,6,7,8][0-9]{9}$/.test(this.tel_registered);\n    }\n  },\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-7\">八、验证码模块</h3>\n<p>验证码其实就是<code>img</code>标签请求接口获取图片,当点击图片的时候再次请求获取最新的图片.</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">// 切换验证码\n    <span class=\"hljs-function\"><span class=\"hljs-title\">getCaptcha</span></span> () {\n      // 获取验证码的标签\n      <span class=\"hljs-built_in\">let</span> captchaEle = this.<span class=\"hljs-variable\">$refs</span>.captcha;\n      this.<span class=\"hljs-variable\">$set</span>(captchaEle, <span class=\"hljs-string\">'src'</span>, <span class=\"hljs-string\">'http://192.168.0.1/web/xlmc/api/captcha?time='</span> + new Date());\n    },\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-8\">九、总结</h3>\n<p>注册登录仅仅是整个项目的一部分,先分享出来,后面会将整个完整的电商项目分享出来,希望大家能点赞加关注,你的点赞能让更多的人一起学习,一起进步😄</p>\n<h3 class=\"heading\" data-id=\"heading-9\">十、完整电商项目</h3>\n<h4 class=\"heading\" data-id=\"heading-10\">首页模块</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb781663eb60a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1036\" data-height=\"596\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1036\" height=\"596\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-11\">分类模块</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb7882d5b9fd0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1022\" data-height=\"582\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1022\" height=\"582\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-12\">吃什么模块</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb7904fd0405a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1036\" data-height=\"574\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1036\" height=\"574\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-13\">购物车模块</h4>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb79b80990194?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1026\" data-height=\"592\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1026\" height=\"592\"></svg>\"><figcaption></figcaption></figure>\n<br><p></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb7a53bb8f4f2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1040\" data-height=\"590\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1040\" height=\"590\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-14\">个人中心模块</h4>\n<div>\n<img alt=\"图片说明\" height=\"300px\" style=\"padding:5px\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/24/16dfb5f78e4fd55c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"526\" data-height=\"944\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"526\" height=\"944\"></svg>\">\n</div>\n<h3 class=\"heading\" data-id=\"heading-15\">往期分享链接</h3>\n<ul>\n<li>\n<p><strong>Vue甜小白系列专栏</strong>:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d64f31ae51d4561db5e3a74\" rel>Vue从甜小白到皮大佬系列(一) Vue是个啥?</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d652fb351882505a87a976b\" rel>Vue从甜小白到皮大佬系列(二) v-指令</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d6675716fb9a06b10273c1c\" rel>Vue从甜小白到皮大佬系列(三) 生命周期\n</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d673ad7f265da03934bf266\" rel>Vue从甜小白到皮大佬系列(四) 自定义指令\n</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d67eac7e51d453c12504e3a\" rel>Vue从甜小白到皮大佬系列(五) 组件\n</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d699e2b6fb9a06ae3727746\" rel>Vue从甜小白到皮大佬系列(六) 组件通信\n</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d6e6f366fb9a06b32609021\" rel>Vue从甜小白到皮大佬系列(七) Vue Router\n</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d6f5801f265da03da24b365\" rel>Vue从甜小白到皮大佬系列(八) Vuex</a></li>\n</ul>\n</li>\n<li>\n<p>每周一道算法题系列</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d6bed3e6fb9a06af372d069\" rel>逆波兰表达式求值</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d7505c7f265da03c61e775a\" rel>斐波那契数列</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d7e48dbe51d4557dc774f3a\" rel>合并两个有序链表</a></li>\n</ul>\n</li>\n</ul>\n<p><strong>最后感谢您的关注!</strong></p>\n<p><a target=\"_blank\" href=\"https://github.com/Geek-James/Blog\" rel=\"nofollow noopener noreferrer\">我的GitHub</a>,希望能得到你的小星星~</p>\n<blockquote>\n<p>希望我的分享对你能有帮助,有不正确的地方也希望得到您的勘误!本人将不胜感激,另外如果你想获取前端整期学习视频和资料扫一扫下面的二维码,回复<strong>学习</strong>即可,也希望在前端进阶的路上,我们一起成长,一起进步!</p>\n</blockquote>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/1/16ceae13d9c4953e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1024\" data-height=\"300\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1024\" height=\"300\"></svg>\"><figcaption></figcaption></figure><p></p>\n",
      "id": "4672fvo25q00",
      "author": "Void_0",
      "title": "Vue登录注册-掘金可爱萌猫"
    },
    {
      "content": "<h3 class=\"heading\" data-id=\"heading-0\">项目初衷</h3>\n<p>开发一个H5的通用架子，让前端同学开箱即用，迅速投入战斗。</p>\n<blockquote>\n<p>截止到2019-10-29 10:25，已经被fork了34次，如果您在使用过程中还希望能给我提<a target=\"_blank\" href=\"https://github.com/Ljhhhhhh/h5vue/issues\" rel=\"nofollow noopener noreferrer\">issue</a>,或者直接加我微信13216698987 ❤️ ❤️ ❤️</p>\n</blockquote>\n<hr>\n<ul>\n<li>扫码预览：\n<figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bf63d281fabe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"260\" data-height=\"260\" src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bf63d281fabe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><br>\n<strong>项目源码在文章结尾处，记得查收哦~</strong></li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-1\">主要功能</h3>\n<ol>\n<li>常用目录别名</li>\n<li>Vant/Rem适配</li>\n<li>scss支持、_mixin.scss、_variables.scss</li>\n<li>页面切换动画+keepAlive</li>\n<li>页面标题</li>\n<li>自动注册：自动注册路由表/自动注册Vuex/svg图标引入</li>\n<li>mock server</li>\n<li>axios封装、api管理</li>\n<li>用户鉴权</li>\n<li>vuex-loading</li>\n<li>vo-pages/dayjs/vconsole</li>\n<li>生产环境优化</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-2\">常用目录别名</h3>\n<p></p><figure><img alt=\"alias配置\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bbbc7d2dc664?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"737\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"737\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-3\">Vant/Rem适配</h3>\n<p>按照Vant官网推荐自动按需引入组件，同样，Vant官网中也有对Rem适配的推荐配置，按照官网说明的使用。需要注意的是postcss的配置中，autoprefixer下的<code>browsers</code>需要替换成<code>overrideBrowserslist</code>，否则会有报错信息。具体如图<br>\n</p><figure><img alt=\"postcss配置\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bbaee5e8e497?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"777\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1280\" height=\"777\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-4\">scss支持、_mixin.scss、_variables.scss</h3>\n<p>选择scss作为css预处理，并对mixin、variables、common.scss作全局引入。</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\">css: {\n    <span class=\"hljs-comment\">// 是否使用css分离插件 ExtractTextPlugin</span>\n    extract: !!IS_PRODUCTION,\n    <span class=\"hljs-comment\">// 开启 CSS source maps?</span>\n    sourceMap: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-comment\">// css预设器配置项</span>\n    <span class=\"hljs-comment\">// 启用 CSS modules for all css / pre-processor files.</span>\n    modules: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">loaderOptions</span>: {\n      <span class=\"hljs-attr\">sass</span>: {\n        <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">'@import \"style/_mixin.scss\";@import \"style/_variables.scss\";@import \"style/common.scss\";'</span> <span class=\"hljs-comment\">// 全局引入</span>\n      }\n    }\n  }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-5\">页面切换动画+keepAlive</h3>\n<p>利用vuex存取/更新页面切换方向，配合vue的transition做页面切换动画，router设置keepAlive判断页面是否需要缓冲。</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">// vuex中</span>\nstate: {\n  <span class=\"hljs-attr\">direction</span>: <span class=\"hljs-string\">'forward'</span> <span class=\"hljs-comment\">// 页面切换方向</span>\n},\n<span class=\"hljs-attr\">mutations</span>: {\n  <span class=\"hljs-comment\">// 更新页面切换方向</span>\n  updateDirection (state, direction) {\n    state.direction = direction\n  }\n},\n<span class=\"hljs-comment\">// App.vue</span>\n<template>\n  <div id=\"app\">\n    <transition :name=\"transitionName\">\n      <keep-alive v-if=\"$route.meta.keepAlive\">\n        <router-view class=\"router\"></router-view>\n      </keep-alive>\n      <router-view class=\"router\" v-else></router-view>\n    </transition>\n  </div>\n</template>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-6\">页面标题</h3>\n<p>在vue-router页面配置中添加meta的title信息，配合<code>vue-router</code>的<code>beforeEach</code>注册一个前置守卫用户获取到页面配置的title</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">// get-page-title.js</span>\n<span class=\"hljs-keyword\">import</span> defaultSettings <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/settings'</span>\n\n<span class=\"hljs-keyword\">const</span> title = defaultSettings.title || <span class=\"hljs-string\">'H5Vue'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPageTitle</span> (<span class=\"hljs-params\">pageTitle</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (pageTitle) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${pageTitle}</span> - <span class=\"hljs-subst\">${title}</span>`</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${title}</span>`</span>\n}\n<span class=\"hljs-comment\">// permission.js</span>\nrouter.beforeEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span>, next</span>) =></span> {\n  <span class=\"hljs-comment\">// set page title</span>\n  <span class=\"hljs-built_in\">document</span>.title = getPageTitle(to.meta.title)\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-7\">自动注册</h3>\n<p>先来了解一下<code>require.context()</code>:</p>\n<blockquote>\n<p>你可以通过 <code>require.context()</code> 函数来创建自己的 context。</p>\n<p>可以给这个函数传入三个参数：一个要搜索的目录，一个标记表示是否还搜索其子目录， 以及一个匹配文件的正则表达式。</p>\n<p>webpack 会在构建中解析代码中的 <code>require.context()</code> 。</p>\n</blockquote>\n<p>上面的是官网原话，可能你跟我一样没太看懂，说白了，他可以用来导入模块。</p>\n<p>来看一下如何使用，我的router下的文件结构是这样的：<br></p>\n<p></p><figure><img alt=\"router-tree\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bbae89d4fb5b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"286\" data-height=\"220\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"286\" height=\"220\"></svg>\"><figcaption></figcaption></figure><br><p></p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">// 利用require.context()自动引入article.js和user.js</span>\n<span class=\"hljs-keyword\">const</span> routerContext = <span class=\"hljs-built_in\">require</span>.context(<span class=\"hljs-string\">'./'</span>, <span class=\"hljs-literal\">true</span>, /\\.js$/)\nrouterContext.keys().forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">route</span> =></span> {\n  <span class=\"hljs-comment\">// 如果是根目录的 index.js 、不处理</span>\n  <span class=\"hljs-keyword\">if</span> (route.startsWith(<span class=\"hljs-string\">'./index'</span>)) {\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-keyword\">const</span> routerModule = routerContext(route)\n  <span class=\"hljs-comment\">/**\n   * 兼容 import export 和 require module.export 两种规范\n   */</span>\n  routes = routes.concat(routerModule.default || routerModule)\n})\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>需要额外注意的是，404页面需要在自动引入后向路由数组concat上去，否则会提前匹配到404页面。</p>\n<p>对于vuex也同样引入，记得把引入的vuex按照文件名注册为对应的模块中。</p>\n<h3 class=\"heading\" data-id=\"heading-8\">mock server</h3>\n<p>Mock server部分可直接参看<a target=\"_blank\" href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/mock-api.html\" rel=\"nofollow noopener noreferrer\">vue-element-admin</a>的mock方案</p>\n<h3 class=\"heading\" data-id=\"heading-9\">axios封装</h3>\n<p>axios部分，配置了baseUrl、超时时间，利用拦截器对header添加了用户的Token，方便下一步的用户鉴权，并对错误做了Toast提示。具体错误的code需要视各业务而定，本项目只做为示例参考。</p>\n<h3 class=\"heading\" data-id=\"heading-10\">用户鉴权</h3>\n<p>在<code>vue-router</code>的<code>beforeEach</code>中，添加用户鉴权功能。当用户登录后使用cookie持续化保存用户token，并赋值到vuex，后续可利用token获取用户信息。具体代码如下图：\n</p><figure><img alt=\"permission\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bbaebd72c9e1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1055\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"1055\" height=\"1280\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-11\">vuex-loading</h3>\n<p>在vuex3.1.0中对<a target=\"_blank\" href=\"https://vuex.vuejs.org/zh/api/#subscribe\" rel=\"nofollow noopener noreferrer\">vuex.subscribeAction</a>做了改动，使其拥有了before/after钩子函数。</p>\n<pre><code class=\"hljs js copyable\" lang=\"js\"><span class=\"hljs-comment\">// subscribeAction官网示例</span>\nstore.subscribeAction({\n  <span class=\"hljs-attr\">before</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">action, state</span>) =></span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`before action <span class=\"hljs-subst\">${action.type}</span>`</span>)\n  },\n  <span class=\"hljs-attr\">after</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">action, state</span>) =></span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`after action <span class=\"hljs-subst\">${action.type}</span>`</span>)\n  }\n})\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>有了它，配合<code>vuex</code>的<a target=\"_blank\" href=\"https://vuex.vuejs.org/zh/guide/plugins.html\" rel=\"nofollow noopener noreferrer\">插件</a>功能，实现对应action的状态监听也不再是难题。</p>\n<p><a target=\"_blank\" href=\"https://github.com/Ljhhhhhh/h5vue/blob/master/src/utils/vuex-loading.js\" rel=\"nofollow noopener noreferrer\">点击查看具体实现代码</a></p>\n<blockquote>\n<p>参照自<a target=\"_blank\" href=\"https://juejin.im/post/5cdd2457f265da034e7eb2f9#heading-2\" rel>vue 在移动端体验上的优化解决方案</a></p>\n</blockquote>\n<pre><code class=\"hljs vue copyable\" lang=\"vue\">// 使用方法\ncomputed: {\n  ...mapState({\n    loading: state => state['@@loading'].effects['test/onePlusAction']\n  })\n}\n// 其中 test对应的是vuex中的模块名，onePlusAction对应模块内的actions\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>具体效果：<br></p><figure><img alt=\"loading\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bbaea0ae09cb?imageslim\" data-width=\"248\" data-height=\"248\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"248\" height=\"248\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-12\">列表页（vo-pages的使用）</h3>\n<p>列表页这里，使用了本人自己写的组件<code>vo-pages</code>，详细使用可查看<a target=\"_blank\" href=\"https://juejin.im/post/5d81da4551882556ba55e50e\" rel>一款易用、高可定制的vue翻页组件</a></p>\n<p>实现效果：<br></p>\n<p></p><figure><img alt=\"vo-pages\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bbaf99131ad2?imageslim\" data-width=\"719\" data-height=\"1280\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"719\" height=\"1280\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\" data-id=\"heading-13\">生产环境优化</h3>\n<p>上线前，得优化一下资源了，该项目做了如下几步操作</p>\n<ol>\n<li>通用库改用CDN</li>\n<li>关闭sourcemap防止源码泄露</li>\n<li>丑化html/css/js</li>\n<li>生成gzip</li>\n<li>移除掉debugger/console</li>\n<li>利用webpack-bundle-analyzer做资源分析，提供进一步优化的数据分析\n想对性能、资源了解更多的，推荐<a target=\"_blank\" href=\"https://juejin.im/post/5bd2b60e6fb9a05d27794c5e\" rel>Vue SPA 项目webpack打包优化指南</a>这篇文章。</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-14\">更多</h3>\n<p>花了不少时间开发了这个项目，希望能提高您的H5开发效率。也欢迎大家跟我一起交流学习。</p>\n<h3 class=\"heading\" data-id=\"heading-15\">相关链接</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/Ljhhhhhh/h5vue\" rel=\"nofollow noopener noreferrer\">源码地址</a></li>\n<li><a target=\"_blank\" href=\"http://h5vue.cixi518.com\" rel=\"nofollow noopener noreferrer\">在线预览</a></li>\n<li>扫码预览：\n<figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/27/16e0bf6610401416?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"260\" data-height=\"260\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"260\" height=\"260\"></svg>\"><figcaption></figcaption></figure><br></li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-16\">文章参考</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5cbf32bc6fb9a03236393379\" rel>基于vue-cli3.0构建功能完善的移动端架子</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5bd2b60e6fb9a05d27794c5e\" rel>Vue SPA 项目webpack打包优化指南</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5cdd2457f265da034e7eb2f9\" rel>vue 在移动端体验上的优化解决方案</a></li>\n<li><a target=\"_blank\" href=\"https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/\" rel=\"nofollow noopener noreferrer\">vue-element-admin</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/59bb864b5188257e7a427c09\" rel>手摸手，带你优雅的使用 icon</a></li>\n<li><a target=\"_blank\" href=\"https://juejin.im/post/5d81da4551882556ba55e50e\" rel>一款易用、高可定制的vue翻页组件</a></li>\n</ul>\n",
      "id": "60oc0q6ixic0",
      "author": "黄轶",
      "title": "基于vue+vant搭建H5通用架子"
    },
    {
      "content": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>2018 年 6 月我在慕课网发布了 Vue.js 2.x 的源码解析课程 <a target=\"_blank\" href=\"https://coding.imooc.com/class/228.html\" rel=\"nofollow noopener noreferrer\">《Vue.js 源码全方位深入解析》</a>，同时也开源了课程配套<a target=\"_blank\" href=\"https://ustbhuangyi.github.io/vue-analysis/\" rel=\"nofollow noopener noreferrer\">电子书</a>。时隔一年多，Vue 官方也开源了 Vue.js 3.x，那么在不久的将来，我也会系统化地做 Vue.js 3.x 的源码分析，同时更新我的这门课程视频以及电子书。</p>\n<p>Vue.js 3.x 源码刚开源不久，很多人都非常兴奋，我也不例外。我写下这篇文章作为 Vue.js 3.x 源码解析课程的先导片，和大家聊聊我对 Vue.js 源码的一些感悟。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">聊聊 Vue.js 3.x</h2>\n<h3 class=\"heading\" data-id=\"heading-2\">Vue.js 3.x 目前的状态</h3>\n<p>Vue.js 3.x 目前处于 <strong>Pre-Alpha</strong> 的状态，从 Vue 官方的 <a target=\"_blank\" href=\"https://github.com/vuejs/vue/projects/6\" rel=\"nofollow noopener noreferrer\">Roadmap</a> 来看，2019 年 Q3 结束前开源 Vue 3.x 的源码，Q4 除了继续完善 Vue.js 核心源码之外，还要补齐周边的生态建设：如 <code>vue-router</code>、<code>vuex</code>、<code>vue-cli</code>、<code>Vue Devtools</code>、<code>JSX</code> 等，在 Q4 结束前才会发布 Alpha 版本。但是 Alpha 版本也只是内部测试版本，之后还要经历 Beta 对外测试版本，RC 候选发布版本、最后才会到正式的 Realase 版本，所以距离大家在生产环境投入使用还有很长的时间。那么这段时间，对于 Vue.js 3.x 我可以做哪些事情呢。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">Vue.js RFC</h3>\n<p>Vue.js 官方设立 RFC 的初衷是为了让 Vue.js 本身的开发流程更加规范化，当有一个新功能的想法出现，会先发布一份 RFC 的提案，由社区在一起讨论，当提案通过后再去开发实现。</p>\n<p>Vue.js 3.x 在开发之前也发布了多份 RFC 提案，其中讨论比较多的是 Vue.js 3.x 关于组件的写法，由最初的 <a target=\"_blank\" href=\"https://github.com/vuejs/rfcs/pull/17\" rel=\"nofollow noopener noreferrer\">Class-API</a> 提案被废弃到之后热烈讨论的 <a target=\"_blank\" href=\"https://github.com/vuejs/rfcs/pull/42\" rel=\"nofollow noopener noreferrer\">Function-based component API</a>，再到最后确认的基于 <code>Function-based component API</code> 修订的 <a target=\"_blank\" href=\"https://github.com/vuejs/rfcs/pull/78\" rel=\"nofollow noopener noreferrer\">Composition API</a>，经历了很长一段的时间，期间社区出现了不少反对的声音，比如 “和 React 更像了，为啥我不直接用 React”、“Class API 更好”、“Vue.js 变得一点都不简单了” 等等，官方都做了很好的<a target=\"_blank\" href=\"https://github.com/vuejs/rfcs/blob/function-apis/active-rfcs/0000-function-api.md\" rel=\"nofollow noopener noreferrer\">回应</a>，因此学习 Vue.js 3.x，你应该先去学习这份 <a target=\"_blank\" href=\"https://vue-composition-api-rfc.netlify.com/\" rel=\"nofollow noopener noreferrer\">RFC</a>。</p>\n<p>通过这份 RFC 的学习，你会大致了解 Vue.js 3.x 组件的写法、详细设计、甚至是一些”缺点“。Vue.js 3.x 摒弃了 2.x <code>Options API</code>，拥抱了 <code>Composition API</code>，为了更好的逻辑复用、代码组织以及更好的类型推导。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">Vue.js 3.x 尝鲜</h3>\n<p>Vue.js 3.x <a target=\"_blank\" href=\"https://github.com/vuejs/vue-next\" rel=\"nofollow noopener noreferrer\">源码</a>已经开放，虽然没有发布，但是我们可以 clone 下来，安装好相关依赖，构建一份打包后的代码为自己所用。</p>\n<p>在阅读完 <code>Composition API</code> 的 RFC 后，我们已经对 Vue.js 3.x 组件的写法有了一定了解，并且 2.x 的大部分 feature 3.x 都已经支持，我们用 3.x 写一个简单的 demo 问题应该不大。我前段时间就基于 Vue 3.x 写了一个 todomvc 的 demo，感兴趣的同学可以去 <a target=\"_blank\" href=\"https://github.com/ustbhuangyi/vue-3.x-demos\" rel=\"nofollow noopener noreferrer\">GitHub</a>  clone 下来跑跑看看。</p>\n<p>在写 demo 的时候我还遇到了 <code>v-model</code> 实现的坑，对源码一番调试后大致定位了原因，不过由于牵涉到核心的改动会比较多，所以我和尤大反馈了一下（微信提 issue），官方很快就修复了这个问题。</p>\n<h3 class=\"heading\" data-id=\"heading-5\">Vue.js 3.x 源码</h3>\n<p>Vue.js 3.x 源码放出来的第二天，社区就有出来源码分析的文章，不过看了好几篇都是在分析 <code>Reactive</code> 相关的 API，给人的错觉好像 Vue 只有响应式一样，甚至还有某些培训机构也跟着蹭起了热度。有些文章写的还是很不错的，比如我记得掘金有一篇是教大家从单测看起，确实是一个很好的学习源码的思路，但还有几篇也未免有蹭热度之嫌。对我而言，除了 <code>Reactive</code>，我更愿意去关注 <code>Setup</code> 函数的初始化逻辑、<code>Compile</code> 过程的优化、<code>Render</code> 写法的变化、以及 <code>Patch</code> 过程的优化。</p>\n<p>Vue.js 3.x 源码采用了 monorepo 的管理方式，采用 TypeScript 编写，对于 Vue.js 的开发者而言，这种方式是更易于维护源码的。如果你想学习 Vue.js 3.x 的源码，首先你得学会 TypeScript。</p>\n<p>对于大部分人而言，现在去看 Vue.js 3.x 的源码还为时过早了，主要是你现在还用不到，我之前在掘金发布过一篇文章<a target=\"_blank\" href=\"https://juejin.im/post/5b18d2d7f265da6e410e0e20\" rel>来聊聊源码学习</a>，现在还不是学习 Vue.js 3.x 源码的好时机。</p>\n<p>但是如果你是一个对技术非常有热情的人，在早期去学习 Vue.js 3.x 源码，甚至去参与 Vue.js 3.x 的开发共建，对自己的技术提升还是有很大帮助的。</p>\n<h2 class=\"heading\" data-id=\"heading-6\">Vue.js 2.x 源码过时了吗</h2>\n<p>Vue.js 3.x 源码开放了，很多小伙伴不免担心，我现在学习 Vue.js 2.x 的源码过时了吗？</p>\n<h3 class=\"heading\" data-id=\"heading-7\">成熟稳定的 Vue.js 2.x</h3>\n<p>Vue.js 2.x 从 16 年底发布距今已接近 3 年，有无数大厂已经使用 Vue.js 重构和开发项目，Vue.js 2.x 的 npm 下载量每月有 90 多万，Jsdelivr CDN 每月有 5 亿次引用，Chrome DevTools 每周有 90 万的活跃用户。如此庞大的用户量足以说明 Vue.js 是一个非常靠谱和成熟的框架，另外官网对 Issue、Pull Request 的响应也是比较快的，除了高达 97% 的单元测试之外，官方还尝试做了一些<a target=\"_blank\" href=\"https://github.com/vuejs/regression-testing\" rel=\"nofollow noopener noreferrer\">回归测试</a>。</p>\n<p>我们知道 Vue.js 是一个渐进式框架，除了官方提供的一些生态插件 <code>vue-router</code>、<code>vuex</code>、<code>vue-cli</code> 之外，社区还有非常多的优秀的轮子如 <code>element-ui</code>、<code>cube-ui</code>、<code>vue-lazyload</code>、<code>vue-i18n</code> 等，这些插件能很好地辅助我们平时的业务开发。</p>\n<h3 class=\"heading\" data-id=\"heading-8\">升级的成本</h3>\n<p>Vue .js 2.x -> Vue.js 3.x 升级还是有一定的成本的，虽然说官方会出一个保留 <code>Options API</code> 的写法的版本，但是未免还会有一些 breaking change 的，比如手写 <code>render</code> 函数部分语法就已经发生了改变，模板写法也会发生一些变化。未来应该会出一个代码升级的指南，甚至会用工具帮我们做一部分工作，但是大规模的产线项目做核心框架升级，还是有相当大的成本和风险的。</p>\n<p>如果你的业务代码升级到 Vue.js 3.x，也就意味着你依赖的生态插件也需要升级到 Vue.js 3.x，比如 <code>element-ui</code> 这种大型项目，升级起来也是有相当大的工作量的，所以你需要先等到你依赖的生态插件升级到 Vue.js 3.x 并且稳定后，你才能考虑在你的业务中做框架升级。</p>\n<p>Vue.js 1.x -> Vue.js 2.x 的升级似乎没有那么麻烦，那是因为 Vue.js 1.x 的时候用户规模还很小，生态也没有起来，甚至很多公司直接上手的 Vue.js 2.x，并没有历史包袱。</p>\n<h3 class=\"heading\" data-id=\"heading-9\">痛点</h3>\n<p>Vue.js 1.x -> Vue.js 2.x 的升级变化还是很明显的，虚拟 DOM 在 Vue.js 2.x 中得以实现，它让服务端渲染、跨端渲染成为可能。我们来看一下 Vue.js 3.x 的设计目标：更小、更快、加强 TypeScript 支持、加强 API 设计一致性、提升自身可维护性、开放更多的底层功能。对大部分用户而言，更小更快是一个吸引点，对于 TypeScript 用户而言，加强 TypeScript 支持是一个吸引点，但是这些能解决开发中的痛点么？</p>\n<p>除非  Vue.js 3.x 能解决 Vue.js 2.x 开发中的痛点（比如我这个项目有性能瓶颈，性能的提升能帮助我解决这个性能瓶颈），否则重构的成本和它来带来的收益就是一个需要权衡的问题。另外考虑到 Vue.js 3.x 用了一些 ES6 的新特性如 Proxy，在浏览器兼容性这块也是需要考虑的。</p>\n<p>老板通常是不会允许你做这种纯技术重构的，如果你想用 Vue.js 3.x 做重构，一定要抓到痛点，把重构的收益和老板说清楚。</p>\n<p>虽然老项目用 Vue.js 3.x 重构会有很大的成本和风险，我们也可以在一些非核心的新项目中去尝试新技术，当然这一切也是需要等待 Vue.js 3.x 正式发布以及依赖的 Vue 插件都更新支持 Vue.js 3.x 才可以。</p>\n<h3 class=\"heading\" data-id=\"heading-10\">结论</h3>\n<p>Vue.js 3.x 想全面替代 Vue.js 2.x 需要有相当长的路要走，未来相当长一段时间 Vue.js 2.x 仍然是主流，Vue.js 2.x 的源码学习并没有过时，如果你是一个 Vue.js 2.x 的使用者，就应该去学习 Vue.js 2.x 的源码。</p>\n<h2 class=\"heading\" data-id=\"heading-11\">我应该学习源码吗</h2>\n<p>很多人都有困惑，我会使用不就行了吗，为什么还要学习源码呢？</p>\n<h3 class=\"heading\" data-id=\"heading-12\">学习源码的好处</h3>\n<p>学习是为了更好的工作，工作中难免会遇到一些问题，学习源码最直接的好处是能帮你直接定位问题的根本原因，从而帮助你解决问题。很多人抱怨加班多，不妨问问自己，有多少时间是在写业务，多少时间是在写（找） bug。快速定位问题解决 bug，可以有效地提升你的工作效率，很可能就不用加班了，甚至会多出学习的时间，形成一个良性循环。</p>\n<p>学习源码可以很好地巩固基础，修炼内功，提升技术。前端几乎都会学习 JS 的基础知识，如类型、变量、函数、作用域、闭包、原型链、event loop 等知识，但很多人很难把这些知识在实践中运用自如，主要原因还是实践的少了，大部分时间都在写业务的胶水代码。学习 Vue.js 这类框架的源码，会不断去巩固这些知识点，如果你源码看熟练了，那么你的 JS 基础就会更扎实。</p>\n<p>学习源码有助于你更好地理解所用的技术栈，更熟练地在工作中运用。比如你深入学习了 Vue.js 的核心源码，你会理解 Vue.js 框架产生的意义、Vue.js 的职责边界、数据驱动的本质；你还会知道如何实现的组件化，在什么生命周期应该做什么事情，如何编写 Vue.js 的插件，如何和其它第三方 JS 库深度结合。你再也不会问“如何用 Vue 实现 XXX” 的傻问题了。</p>\n<p>学习源码可以让我们站在巨人的肩膀上，Vue.js 这么优秀，尤大也是参考了很多其他优秀源码的实现，比如 Vue.js 2.x  <code>Virtual DOM</code> 部分参考了 <a target=\"_blank\" href=\"https://github.com/snabbdom/snabbdom\" rel=\"nofollow noopener noreferrer\">snabbdom</a>，Vue.js 3.x <code>Reactive</code> 的实现参考了<a target=\"_blank\" href=\"https://docs.meteor.com/api/tracker.html\" rel=\"nofollow noopener noreferrer\">Meteor Tracker</a> 和 <a target=\"_blank\" href=\"https://github.com/salesforce/observable-membrane\" rel=\"nofollow noopener noreferrer\">salesforce/observable-membrane</a> 等。我们在阅读的源码的时候，也可以把源码中的优秀的设计思想、代码实现吸纳到我们平时的开发工作中。</p>\n<p>学习源码还有一个偏功利的作用，应付面试。越来越多的公司在面试环节会考察候选人对所用技术栈实现原理的考察，主要目的还是考察候选人的技术能力以及技术热情和追求，因为通常对技术热爱的人通常都会保持技术好奇，乐于探究所用到的技术栈的实现原理。但是往往以这个目的去学习源码的同学是学不好的，对源码的理解很浅，甚至出现了死记硬背的情况。所以学习好源码可以帮助我们在面试中应答自如，但是我们不应该为了面试去学习源码。</p>\n<h3 class=\"heading\" data-id=\"heading-13\">学源码的时机</h3>\n<p>通常我们去学习一个技术栈的源码的时机是在我们对他的使用已经很熟练的情况，比如你是一个 Vue.js 的一年以上经验的使用者，那么你已经可以去学习它的源码了，这时候你的学习应该是系统化地学习。</p>\n<p>当你工作中使用某一个新框架的时候遇到一个奇怪的问题，通过查阅文档也未能解决，这个时候你也可以去看源码，当然这个时候并不需要系统地去学习，只需要把和你问题相关的源码理解了，找到问题即可。当然想达到这一步就需要你有快速阅读源码定位问题的能力，这个能力也是在你不断去阅读大量优秀源码过程中锻炼的。</p>\n<h3 class=\"heading\" data-id=\"heading-14\">学不动了怎么办</h3>\n<p>源码学习的好处我们已经介绍了很多，但是源码学习的本身是枯燥的，抽象的，它没有直观酷炫的效果，学习起来费脑子，是很多人直呼学不动的原因。</p>\n<p>其实学不动的主要原因还是因为没掌握好的学习方法，好的方法能让你事半功倍，正如我在<a target=\"_blank\" href=\"https://juejin.im/post/5b18d2d7f265da6e410e0e20\" rel>来聊聊源码学习</a> 文章中提到的几个方法，全盘了解、问题驱动、主线优先、参与共建、阅读技巧、辅助资料。除了这些方法，根据我源码课程中一些学的不错的同学的经验，自己在学习的过程中多记笔记，多在课程问答区提问，甚至最后自己产出源码分析系列文章，都能非常好的辅助学习源码。其实做这些事情都是不断在帮助自己建立自信和成就感，激发学习兴趣，把无趣的事情变得有趣和有意义。</p>\n<h2 class=\"heading\" data-id=\"heading-15\">课程后续计划</h2>\n<p>源码课程会等待 Vue.js 3.x 发布正式版本且稳定后会开始准备重新录制，仍然是电子书和视频的方式。</p>\n<p>重新录制的源码课程不仅仅会讲清楚源码实现流程，还会多加入一些使用场景、设计原因的分析。</p>\n<p>翻新课程是在原课程的基础上增加 Vue.js 3.x 的章节，已购买课程的同学可以继续学习，无需购买新课程。</p>\n<p>先学会用再学原理，因此在 Vue.js 3.x 正式发布后，我会优先重新录制 <a target=\"_blank\" href=\"https://coding.imooc.com/class/107.html\" rel=\"nofollow noopener noreferrer\">《Vue2.0开发企业级移动端音乐Web App》</a>课程，同样是免费升级喔。</p>\n<p>音乐课程 + 源码课程的重新录制，是我明年的主要计划，暂无计划出新课程了。除了版本的升级，我会像<a target=\"_blank\" href=\"https://coding.imooc.com/class/74.html\" rel=\"nofollow noopener noreferrer\">《Vue.js2.5 + cube-ui重构饿了么App》</a>升级课程那样尽量往课程中加入一些新东西的，敬请期待~</p>\n",
      "id": "3npuf44to0e0",
      "author": "前端小智",
      "title": "Vue.js 3.x 源码解析先导"
    },
    {
      "content": "<blockquote>\n<p>作者：Duomly</p>\n<p>译者：前端小智</p>\n<p>来源：dev.to</p>\n</blockquote>\n<hr>\n<p><strong>阿里云服务器很便宜火爆，今年比去年便宜，10.24~11.11购买是1年86元，3年229元，可以点击 下面链接进行参与：</strong>\n<a target=\"_blank\" href=\"https://www.aliyun.com/1111/2019/group-buying-share?ptCode=FBEDBE5CCBE365B176BB470C64C499DD647C88CF896EF535&userCode=pxuujn3r&share_source=copy_link\" rel=\"nofollow noopener noreferrer\">www.aliyun.com/1111/2019/g…</a></p>\n<hr>\n<p>数组是 JS 最常见的一种数据结构，咱们在开发中也经常用到,在这篇文章中,提供一些小技巧,帮助咱们提高开发效率。</p>\n<h2 class=\"heading\" data-id=\"heading-0\">1. 删除数组的重复项</h2>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa852a1d1bf6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"314\" src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa852a1d1bf6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-1\">2. 替换数组中的特定值</h2>\n<p>有时在创建代码时需要替换数组中的特定值，有一种很好的简短方法可以做到这一点，咱们可以使用<code>.splice(start、value to remove、valueToAdd)</code>，这些参数指定咱们希望从哪里开始修改、修改多少个值和替换新值。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa870084b618?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"261\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"261\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-2\">3. Array.from 达到 .map 的效果</h2>\n<p>咱们都知道 <code>.map()</code> 方法，<code>.from()</code> 方法也可以用来获得类似的效果且代码也很简洁。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa883dfc8695?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"429\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"429\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-3\">4.置空数组</h2>\n<p>有时候我们需要清空数组，一个快捷的方法就是直接让数组的 <code>length</code> 属性为 <code>0</code>，就可以清空数组了。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa89a5b762dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"698\" data-height=\"774\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"698\" height=\"774\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-4\">5. 将数组转换为对象</h2>\n<p>有时候，出于某种目的，需要将数组转化成对象，一个简单快速的方法是就使用展开运算符号(<code>...</code>):</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa8ac3dc7095?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"324\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"324\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-5\">6. 用数据填充数组</h2>\n<p>在某些情况下，当咱们创建一个数组并希望用一些数据来填充它，这时 <code>.fill()</code>方法可以帮助咱们。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa8c58885093?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"225\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"225\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-6\">7. 数组合并</h2>\n<p>使用展开操作符，也可以将多个数组合并起来。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa8d766b8ec9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"257\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"257\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-7\">8.求两个数组的交集</h2>\n<p>求两个数组的交集在面试中也是有一定难度的正点，为了找到两个数组的交集，首先使用上面的方法确保所检查数组中的值不重复，接着使用<code>.filter</code> 方法和<code>.includes</code>方法。如下所示：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa8ec0988182?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"266\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"266\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-8\">9.从数组中删除虚值</h2>\n<p>在 JS 中，虚值有 <code>false</code>, <code>0</code>，<code>''</code>， <code>null</code>, <code>NaN</code>, <code>undefined</code>。咱们可以 <code>.filter()</code> 方法来过滤这些虚值。</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa8fdc8fe989?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"298\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"298\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-9\">10. 从数组中获取随机值</h2>\n<p>有时我们需要从数组中随机选择一个值。一种方便的方法是可以根据数组长度获得一个随机索引，如下所示：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa9146b84abb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"248\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"248\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-10\">11.反转数组</h2>\n<p>现在，咱们需要反转数组时，没有必要通过复杂的循环和函数来创建它，数组的 <code>reverse</code> 方法就可以做了：</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa925550abc1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"206\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"206\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-11\">12 lastIndexOf() 方法</h2>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa93994c0055?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"355\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"355\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-12\">13.对数组中的所有值求和</h2>\n<p>JS 面试中也经常用 <code>reduce</code> 方法来巧妙的解决问题</p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/28/16e0fa94e42554ee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"418\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"418\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-13\">总结</h2>\n<p>在本文中，介绍了13个技巧，希望它们可以帮助编写简洁代码，如果你还有更好的办法，欢迎留言讨论。</p>\n<p><strong>代码部署后可能存在的BUG没法实时知道，事后为了解决这些BUG，花了大量的时间进行log 调试，这边顺便给大家推荐一个好用的BUG监控工具 <a target=\"_blank\" href=\"https://www.fundebug.com/?utm_source=xiaozhi\" rel=\"nofollow noopener noreferrer\">Fundebug</a>。</strong></p>\n<p>原文：\n<a target=\"_blank\" href=\"https://dev.to/duomly/13-useful-javascript-array-tips-and-tricks-you-should-know-2jfo\" rel=\"nofollow noopener noreferrer\">dev.to/duomly/13-u…</a></p>\n<h2 class=\"heading\" data-id=\"heading-14\">交流</h2>\n<p>阿里云最近在做活动，低至2折，有兴趣可以看看：<a target=\"_blank\" href=\"https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=pxuujn3r\" rel=\"nofollow noopener noreferrer\">promotion.aliyun.com/ntms/yunpar…</a></p>\n<p>干货系列文章汇总如下，觉得不错点个Star，欢迎 加群 互相学习。</p>\n<blockquote>\n<p><a target=\"_blank\" href=\"https://github.com/qq449245884/xiaozhi\" rel=\"nofollow noopener noreferrer\">github.com/qq449245884…</a></p>\n</blockquote>\n<p>因为篇幅的限制，今天的分享只到这里。如果大家想了解更多的内容的话，可以去扫一扫每篇文章最下面的二维码，然后关注咱们的微信公众号，了解更多的资讯和有价值的内容。</p>\n<p></p><figure><img alt=\"clipboard.png\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/23/16df5ed14ee6d44b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"800\" data-height=\"400\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"800\" height=\"400\"></svg>\"><figcaption></figcaption></figure><p></p>\n<p><strong>每次整理文章，一般都到2点才睡觉，一周4次左右，挺苦的，还望支持，给点鼓励</strong></p>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/29/16d7c9e2a5bfb741?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"200\" data-height=\"260\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"200\" height=\"260\"></svg>\"><figcaption></figcaption></figure><p></p>\n",
      "id": "6lk3u3ywcjc0",
      "author": "dragonet",
      "title": "13 个 JS 数组精简技巧，一起来看看"
    },
    {
      "content": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>自己也只是一个前端的小白，因为公司大佬都比较忙，面试这种事就落到了我这小白身上，第一次叫我去的时候我是百般拒绝的，因为自己还是有自知之明的，但是别人实在抽不开身，没办法只能去了，他们开玩笑说就按你这水平来就行了，啥时候你问不住了就让他来复试就行。<br>\n前前后后也面了一些人，加上自己面试时候整理的一些问题，写了这篇文章，感谢拨冗翻阅拙作,敬请斧正。</p>\n<p>下面进入正文，本文会列举一些平时面试时问到的问题和答案，并说明我在当时问到这个问题时所期望对方的回答：</p>\n<h2 class=\"heading\" data-id=\"heading-1\">vue生命周期（钩子函数）</h2>\n<h3 class=\"heading\" data-id=\"heading-2\">问题</h3>\n<p>请说一下vue的生命周期函数（钩子函数）。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">问题描述</h3>\n<p>首先关于生命周期函数，一般我的第一个问题就是这个，我认为是每个使用vue的都要清楚的，如果这个问题答的问题很大其实我都不太想继续往下进行了。<br>\n即使英语不标准（我就是不标准的人，并不是说这是个问题）也要去把关键点说清楚，哪个地方有ed哪个地方没有ed其实是很关键的，或者可以手写下来，因为常用的就是created和mounted所以前4个可以清楚的手写出来并不难，后面4个不去详细说明都没事。（我自己工作中基本没用过后面4个）<br>\n在哪个周期能够首次拿到data数据和在哪个周期能够首次拿到mounted中的dom元素，如果没有说到这个问题，我一般会一直往下问，直到他说出来这两个答案。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">期望答案</h3>\n<p>beforeCreate、created（此时需说明可以在created中首次拿到data中定义的数据）、beforeMount、mounted（此时需说明dom树渲染结束，可访问dom结构）、beforeUpdate、updated、beforeDestroy、destroyed</p>\n<h2 class=\"heading\" data-id=\"heading-5\">computed中的getter和setter</h2>\n<h3 class=\"heading\" data-id=\"heading-6\">问题</h3>\n<p>说一下computed中的getter和setter。</p>\n<h3 class=\"heading\" data-id=\"heading-7\">问题描述</h3>\n<p>很多情况，我问到这个问题的时候对方的回答都是vue的getter和setter、订阅者模式之类的回答，我就会直接说问的并不是这个，而是computed，直接让对方说computed平时怎么使用，很多时候得到的回答是computed的默认方式，只使用了其中的getter，就会继续追问如果想要再把这个值设置回去要怎么做，当然一般会让问到这个程度的这个问题他都答不上来了。</p>\n<h3 class=\"heading\" data-id=\"heading-8\">期望答案</h3>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\"><!--直接复制的官网示例-->\ncomputed: {\n  fullName: {\n    // getter\n    get: <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n      <span class=\"hljs-built_in\">return</span> this.firstName + <span class=\"hljs-string\">' '</span> + this.lastName\n    },\n    // setter\n    <span class=\"hljs-built_in\">set</span>: <span class=\"hljs-keyword\">function</span> (newValue) {\n      var names = newValue.split(<span class=\"hljs-string\">' '</span>)\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h2 class=\"heading\" data-id=\"heading-9\">watch监听对象</h2>\n<h3 class=\"heading\" data-id=\"heading-10\">问题</h3>\n<p>如何watch监听一个对象内部的变化。</p>\n<h3 class=\"heading\" data-id=\"heading-11\">问题描述</h3>\n<p>这个问题我感觉是一个不应该不会的问题，可是我遇到的人大部分都没有给出我所期望的答案，有些人会说直接监听obj，好一点的会说直接点出来监听obj.key，但是很少有人回答deep，开始我还会去问immediate，但是太多人不知道了，所以后来我就只问监听对象了，只有回答出deep的才会去问immediate的作用。</p>\n<h3 class=\"heading\" data-id=\"heading-12\">期望答案</h3>\n<p>如果只是监听obj内的某一个属性变化，可以直接obj.key进行监听。</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">watch: {\n    <span class=\"hljs-string\">'obj.question'</span>: <span class=\"hljs-keyword\">function</span> (newQuestion, oldQuestion) {\n      this.answer = <span class=\"hljs-string\">'Waiting for you to stop typing...'</span>\n      this.debouncedGetAnswer()\n    }\n  }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>如果对整个obj深层监听</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">watch: {\n    obj: {\n        handler: <span class=\"hljs-keyword\">function</span> (newQuestion, oldQuestion) {\n          this.answer = <span class=\"hljs-string\">'Waiting for you to stop typing...'</span>\n          this.debouncedGetAnswer()\n        },\n        deep: <span class=\"hljs-literal\">true</span>,\n        immediate: <span class=\"hljs-literal\">true</span>\n    }\n  }\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>immediate的作用：当值第一次进行绑定的时候并不会触发watch监听，使用immediate则可以在最初绑定的时候执行。</p>\n<h2 class=\"heading\" data-id=\"heading-13\">v-for循环key的作用</h2>\n<h3 class=\"heading\" data-id=\"heading-14\">问题</h3>\n<p>v-for循环时为什么要加key。</p>\n<h3 class=\"heading\" data-id=\"heading-15\">问题描述</h3>\n<p>问这个问题时，好多人再先回答的都是页面有警告，编辑器有提示，我会直接说不考虑报错和提示的问题，或者会问如果不加key的话，页面会不会出现什么异常情况。有的人会说是一个标识，标识他的唯一性，我会继续追问为什么要标识唯一性呢，不加又怎么样？</p>\n<h3 class=\"heading\" data-id=\"heading-16\">期望答案</h3>\n<p>vue的dom渲染是虚拟dom，数据发生变化时，diff算法会只比较更改的部分，如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的改变，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。举例说明：有一个列表我们现在在中间插入了一个元素，diff算法会默认复用之前的列表并在最后追加一个，如果列表存在选中一类的状态则会随着复用出现绑定错误的情况而不是跟着原元素，key的作用就可以给他一个标识，让状态跟着数据渲染。（这一块是我自己的一个大概理解，表述不太清楚，具体的可以去查一下文档，本文就不具体描述此问题了。）</p>\n<h2 class=\"heading\" data-id=\"heading-17\">$nextTick</h2>\n<h3 class=\"heading\" data-id=\"heading-18\">问题</h3>\n<p>$nextTick用过吗，有什么作用。</p>\n<h3 class=\"heading\" data-id=\"heading-19\">问题描述</h3>\n<p>问到这个问题时，很多人都会说到可以处理异步，而往下追问为什么要用nextTick，他解决了什么问题，不用他会怎么样的时候就很多人说不上来了。</p>\n<h3 class=\"heading\" data-id=\"heading-20\">期望答案</h3>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。(官网解释)<br>\n解决的问题：有些时候在改变数据后立即要对dom进行操作，此时获取到的dom仍是获取到的是数据刷新前的dom，无法满足需要，这个时候就用到了$nextTick。</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">// 修改数据\nvm.msg = <span class=\"hljs-string\">'Hello'</span>\n// DOM 还没有更新\nVue.nextTick(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n  // DOM 更新了\n})\n\n// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)\nVue.nextTick()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n    // DOM 更新了\n  })\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h2 class=\"heading\" data-id=\"heading-21\">$set</h2>\n<h3 class=\"heading\" data-id=\"heading-22\">问题</h3>\n<p>vue中的$set用过吗，为什么要用它，解决了什么问题</p>\n<h3 class=\"heading\" data-id=\"heading-23\">问题描述</h3>\n<p>这个问题知道的人就基本都能说出来，但是不知道的就是一点不了解，有的还会说到es6的set结构</p>\n<h3 class=\"heading\" data-id=\"heading-24\">期望答案</h3>\n<p>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 this.myObject.newProperty = 'hi')（官方示例）</p>\n<p>我自己的理解就是，在vue中对一个对象内部进行一些修改时，vue没有监听到变化无法触发视图的更新，此时来使用$set来触发更新，使视图更新为最新的数据。</p>\n<h2 class=\"heading\" data-id=\"heading-25\">组件间的传值</h2>\n<h3 class=\"heading\" data-id=\"heading-26\">问题</h3>\n<p>说一下组件间的传值方式，你知道的所有方式都说一下</p>\n<h3 class=\"heading\" data-id=\"heading-27\">问题描述</h3>\n<p>这个问题其实就是想看官方文档有没有具体看过，因为很多传值方式官方文档上有描述，但是项目中用的相对较少。</p>\n<p>基本都能回答上来，父传子：props；子传父：$emit；兄弟：eventbus；vuex；有一些会说到sessionStorage和localStorage、路由传参（这个答案其实并不是我想要问的，不过也可以实现一定的传值）</p>\n<p>以下传值方式的具体使用方式本文不具体描述了，这个链接是对这几种组件传值的具体介绍。</p>\n<p><a target=\"_blank\" href=\"https://juejin.im/post/5dafc84a6fb9a04de04d98d5\" rel>你不知道的vue组件传值方式</a></p>\n<h3 class=\"heading\" data-id=\"heading-28\">期望答案</h3>\n<ol>\n<li>provide / inject<br>\n这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</li>\n<li>Vue.observable<br>\n让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。<br>\n返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景：</li>\n</ol>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">const state = Vue.observable({ count: 0 })\n\nconst Demo = {\n  render(h) {\n    <span class=\"hljs-built_in\">return</span> h(<span class=\"hljs-string\">'button'</span>, {\n      on: { click: () => { state.count++ }}\n    }, `count is: <span class=\"hljs-variable\">${state.count}</span>`)\n  }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><ol start=\"3\">\n<li>$attrs<br>\n包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$attrs\" 传入内部组件——在创建高级别的组件时非常有用。</li>\n<li>$listeners<br>\n包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=\"$listeners\" 传入内部组件——在创建更高层次的组件时非常有用。</li>\n<li>props</li>\n<li>$emit</li>\n<li>eventbus</li>\n<li>vuex</li>\n<li>$parent / $children / ref</li>\n</ol>\n",
      "id": "65e6mus54nk0",
      "author": "前端劝退师",
      "title": "面试时面试官想要听到什么答案（关于一些vue的问题）"
    }
  ],
  "searchArticleDetailList": [
    {
      "content": "<p>Tic-tac, tic-tac, tic-tac...</p><p>La aguja del reloj</p><p>no paraba de deslizarse en el incómodo silencio reinante de su cuarto.</p><p>Exasperada, comprobó otra vez el móvil pero no había ninguna llamada ni</p><p>mensaje suyo. Soltó un largo suspiro de fastidio y oteó el exterior a</p><p>través de la ventana abierta. La farola de la calle, próxima al balcón</p><p>de sus padres, iluminaba tenuemente su habitación pero por suerte, los</p><p>vecinos del segundo piso de enfrente ya debían estar durmiendo a pierna</p><p>suelta. Se mordió un labio y maldijo su suerte por lo bajo.</p><p>Nunca los astros se</p><p>habían conjugado de aquella forma para ella. Los vecinos dormidos, sus</p><p>padres roncando, ajenos a cualquier ruido o presencia extraña en la</p><p>casa, sumamente confiados en los cerrojos de la puerta de entrada, ese</p><p>agradable calorcito nocturno que invitaba a quitarse la ropa... Esa</p><p>noche él debería estar ahí, y ella lo sabía muy bien. Se levantó de la</p><p>cama, aproximándose al gran espejo de cuerpo entero que se encontraba</p><p>frente a la cama.</p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com\" target=\"_blank\" rel=\"nofollow\">porno</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/xvideos/\" target=\"_blank\" rel=\"nofollow\">xvideos</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/redtube/\" target=\"_blank\" rel=\"nofollow\">redtube</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/youporn/\" target=\"_blank\" rel=\"nofollow\">youporn</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/pornhub/\" target=\"_blank\" rel=\"nofollow\">pornhub</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/xnxx/\" target=\"_blank\" rel=\"nofollow\">xnxx</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/xhamster/\" target=\"_blank\" rel=\"nofollow\">xhamster</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/beeg/\" target=\"_blank\" rel=\"nofollow\">beeg</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/tubegalore/\" target=\"_blank\" rel=\"nofollow\">tubegalore</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/keezmovies/\" target=\"_blank\" rel=\"nofollow\">keezmovies</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/fuq/\" target=\"_blank\" rel=\"nofollow\">fuq</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/xtube/\" target=\"_blank\" rel=\"nofollow\">xtube</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/yuvutu/\" target=\"_blank\" rel=\"nofollow\">yuvutu</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/tube8/\" target=\"_blank\" rel=\"nofollow\">tube8</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/youjizz/\" target=\"_blank\" rel=\"nofollow\">youjizz</a></p><p><a href=\"https://link.jianshu.com?t=https://www.gatitasconcam.com\" target=\"_blank\" rel=\"nofollow\">chicas webcam</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/petardas/\" target=\"_blank\" rel=\"nofollow\">petardas</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/babosas/\" target=\"_blank\" rel=\"nofollow\">babosas</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/cerdas/\" target=\"_blank\" rel=\"nofollow\">cerdas</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/pornotube/\" target=\"_blank\" rel=\"nofollow\">pornotube</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/zorras-putitas/\" target=\"_blank\" rel=\"nofollow\">zorras</a></p><p><a href=\"https://link.jianshu.com?t=https://www.bingoporno.com/rubias/\" target=\"_blank\" rel=\"nofollow\">rubias </a></p><p>¿Qué podía haber</p><p>salido mal? Se preguntaba una y otra vez, inspeccionando su reflejo.</p><p>Giró su cuerpo hacia un lado y hacia el contrario, observando como la</p><p>tenue luz amarillenta resbalaba por la sugerente línea de sus nalgas</p><p>cubiertas por unas provocativas braguitas azules y observó con una media</p><p>sonrisa como la punta de sus pezones parecían capturar la luz eléctrica</p><p>y liberar un cautivador brillo. En su piel aún residía alguna que otra</p><p>escueta gota de la ducha que había tomado, larga y deliberada, dejando</p><p>que el agua limpiara y purificara cada uno de sus poros, preparándose</p><p>para esta espléndida noche.</p><p>Se palpó con la yema</p><p>de los dedos el gracioso hoyuelo de su ombligo, acariciando su piel</p><p>hasta rozar la curvatura de sus senos y enredarse con los mechones</p><p>tostados por el sol de sus cabellos castaños y lisos, que descansaban</p><p>sobre sus hombros finos. Sus grandes ojos miraron por última vez su</p><p>cuerpo, delgado pero fibroso y cuativador. Ella lo había visto, había</p><p>reconocido en sus ojos ese brillo insinuante y había captado el mensaje</p><p>que se escondía tras su sonrisa sagaz.</p><p>Había notado como</p><p>sus ojos la habían desnudado, desprendiéndola con un parpadeo de la</p><p>pieza de arriba del bikini y con una sonrisa de la braguita del</p><p>conjunto. Y en ese momento, el silencio se había hecho alrededor de</p><p>ellos, y las risas y palabras de los que los rodeaban enmudecieron, y</p><p>sus ojos quedaron petrificados y clavados en el infinito, y no hubo más</p><p>salpicaduras de agua, ni carcajadas estrepitosas, ni más pies desnudos</p><p>anduvieron por el césped. El mundo había olvidado que debía seguir</p><p>girando y ellos eran los únicos conscientes de ese momento. Ella se</p><p>había acercado a Mark, o tal vez él había sido quien le había tendido</p><p>los brazos para acogerla en su pecho. Eso carecía de importancia, lo</p><p>destacable era que él estaba ahí, besándola, acariciando su piel con sus</p><p>dedos, amándola con la mirada, haciéndola disfrutar y gemir como jamás</p><p>ella hubiera podido sospechar que pudiera hacer...</p><p>Inmersa en sus</p><p>ensoñaciones, apenas fue consciente de que se había desprendido de las</p><p>braguitas, quedando a merced del juicio total e implacable del cristal.</p><p>Sin embargo, por más que le preguntara, el espejo no le respondía. ¿Cómo</p><p>esa maravillosa tarde de miradas cómplices y mensajes velados podía</p><p>haberse tornado en nada?</p><p>Un sinfin de dudas</p><p>tormentosas asaltaban su mente. ¿Tal vez Mark había jugado con ella en</p><p>un cruel juego de seducción para luego dejarla desamparada, añorante y</p><p>desnuda en su cuarto? Ella era su princesa, su Helena de Troya</p><p>prometida, solo que él aún no era consciente de ello...</p><p>Sus ojos se alejaron</p><p>del triángulo de secretos misteriosos entre sus muslos dispuestos a ser</p><p>descubiertos y se fijaron en el móvil abandonado encima de su cama. ¿Y</p><p>si le mandaba una foto a Mark? ¿Sería ese el último impulso que</p><p>necesitaría para hacerle decidirse? Se mordió un labio, pensativa. Sabía</p><p>que otras amigas suyas de su misma edad mandaban ese tipo de fotos a</p><p>sus chicos, impresionándoles y atrayéndoles hasta ellas. Imágenes</p><p>provocativas, audaces y sensuales, de ellas desnudas o con ropa</p><p>insinuante, mostrándoles todo aquello al alcance de sus posibilidades.</p><p>Agarró el móvil con una mano, notando los latidos de su encabritado</p><p>corazón agolpándose en su cuello.</p><p>Era una maniobra muy</p><p>arriesgada, quizá demasiado. Una vocecilla en su cabeza le susurraba</p><p>que no sabía lo que Mark podría hacer con esa foto, pero otra voz, más</p><p>poderosa y firme, una voz más instintiva y primigenia, le instaba a</p><p>hacerlo, a captar a Mark mediante los detalles de su fisonomía, en</p><p>mostrarle a su Helena prometida y que tanto persistía en ignorar.</p><p>Activó la cámara,</p><p>situándose en posición frontal al espejo, para mostrarse sin tapujos. Se</p><p>removió en el sitio, insegura. Tal vez sería mejor una foto evocadora,</p><p>ocultando alguna zona, posiblemente su triángulo de vello rizado</p><p>mediante alguna posición sugerente de sus braguitas.</p><p>¿Qué podría</p><p>impresionar a Mark? Sus dudas se acrecentaban, aumentaban de intensidad,</p><p>como las olas encabritadas de un mar virulento. ¿Acaso no le había</p><p>bastado con la posibilidad de llevarse consigo su preciada virginidad?</p><p>¿No le saciaba ser el primer hombre que se uniera con ella en una cama?</p><p>Una furia repentina la inundó, y estuvo a punto de estampar una patada a</p><p>un oso de peluche cercano.</p><p>Abandonó la idea de</p><p>la foto arrojando el móvil a la cama. Resignada, se encaminó hacia ella y</p><p>se sentó allí, notando como el colchón cedía ante el peso de su cuerpo.</p><p>Acarició con los dedos su superficie, examinándola, apretando aquí y</p><p>allá y volvió a soltar un suspiro. Aquella cama no hubiera delatado la</p><p>presencia de sus cuerpos retozando sobre ella, no habría delatado a Mark</p><p>tumbado sobre su cuerpo, penetrándola con cuidado y detenimiento,</p><p>observando con sus fascinantes ojos de color esmeralda la expresión</p><p>anhelante y regocijadora de su rostro mientras lo recibía en su</p><p>interior. Se dejó caer en la cama, con desgana. Parecía que continuaría</p><p>siendo la única chica virgen del grupo.</p><p>Ya se estaba</p><p>empezando a cansar de aquella incómoda situación, de sus sonrisillas</p><p>malévolas y sus comentarios envenados que minaban lentamente las</p><p>defensas de su orgullo. Las observaba con disimulada envidia e infinita</p><p>paciencia y no perdía detalle de sus rostros iluminados, sus sonrisas</p><p>espléndidas y el brillo cálido de sus ojos cuando sus parejas las</p><p>besaban o paseaban con ellas de la mano. Le reconcomía observar sus</p><p>figuras y sus curvas, que resaltaban más que las suyas propias y se</p><p>mortificaba preguntándose si era a su cuerpo lo que miraba Mark esa</p><p>tarde o el de Sonia que se encontraba a su lado.</p><p>No, no podía ser a</p><p>Sonia a quien contemplaba. Era ella. Era a sus labios. Los mismos que</p><p>había estado probando en las últimas semanas en encuentros esporádicos y</p><p>furtivos, cuando ambos huían hacia el bosque cercano al pueblo,</p><p>refugiándose en sus sombras. Recordó con deleite cuando, en las pausas</p><p>frecuentes que hacían, él se acercaba sigiloso, haciendo crujir las</p><p>hojas caídas del suelo, la estrechaba entre sus brazos y posaba sus</p><p>labios sobre los suyos.</p><p>Si por Elena hubiera</p><p>sido, no habría dudado en abandonarse a sus encantos, permitiendo que</p><p>los rayos del sol que se filtrasen por las copas de los árboles</p><p>iluminaran su piel desnuda e incendiaran sus cabellos y que su cántico</p><p>de gemidos y jadeos se fundieran vibrantes con los chirridos de las</p><p>cigarras.</p><p>Ella lo sabía y Mark</p><p>lo intuía. Estaba destinada a él. Se conocían desde los cinco años de</p><p>edad, habían jugado juntos, compartido grandes momentos, se habían visto</p><p>crecer y madurar. Incluso, recordó en ese instante, había visto por</p><p>accidente a Mark una vez desnudo, con trece años, cuando por una</p><p>equivocación se aturulló él mismo y se descuidó, permitiendo que la</p><p>toalla que ceñía su cintura se desprendiera cuando se estaba cambiando</p><p>el bañador. Ella no olvidó las carcajadas crueles que se clavaron ese</p><p>día sobre el avergonzado y colorado chiquillo, que hacía lo imposible</p><p>por tapar su exámine miembro y pelusilla con una mano mientras con la</p><p>otra pugnaba por subirse el bañador.</p><p>En ese momento, algo</p><p>restalló dentro de su cabeza. Escuchaba las carcajadas de los demás</p><p>como si fueran sonidos lejanos e incomprensibles y parecía que sus</p><p>cuerpos se tornaban en sombras difusas y distantes, ecos irrisorios e</p><p>insignificantes en un mundo sobrecogedoramente ralentizado. Únicamente</p><p>importaba aquel joven Mark y, guiada por un impulso que nunca supo</p><p>descifrar, obedeciendo a una poderosa llamada irrefrenable e irracional,</p><p>se encaminó hacia aquel pobre desgraciado deshaciendo el nudo de su</p><p>toalla.</p><p>Recordaba cada</p><p>momento como si fuera a cámara lenta. Azotó el aire con la toalla como</p><p>si fuera un látigo mientras caminaba desnuda hacia Mark, dispuesta a</p><p>reclamar la atención de los demás sobre ella. Las figuras sombrías que</p><p>les rodeaban se giraron hacia su figura, y algunos se doblaron sobre sí</p><p>mismos y continuaron riéndose cruelmente y otros permanecieron callados y</p><p>serios, con gestos congelados de sorpresa en sus rostros petrificados.</p><p>Sus mejillas le ardían de vergüenza, notaba sus miradas viscosas y</p><p>fangosas resbalando por su piel y escuchaba los ecos de sus comentarios</p><p>tóxicos y risotadas, clavándose como dardos incendiarios en su cuerpo.</p><p>Pero ella continuó</p><p>caminando, desafiante, con la cabeza erguida, sin cubrirse, permitiendo</p><p>que se regocijaran en su crueldad, dejando que vieran los nacientes</p><p>pétalos de sus senos y el irrisorio y escueto vello entre sus piernas.</p><p>Sin embargo, nada la amedentró, y cubrió a Mark con la toalla hasta que</p><p>éste, estupefacto y enmudecido, reaccionó y se vistió. Y luego él tapó</p><p>su cuerpo y los dos marcharon juntos fuera del recinto de la piscina, en</p><p>silencio, analizando lo ocurrido y, cuando él se detuvo y le susurró</p><p><>, Elena miró sus ojos y supo que aquel joven iba a ser el primer</p><p>chico que la besara, y no hizo ningún amago por apartarlo cuando se</p><p>aproximó a ella.</p><p>El tiempo fluyó y se</p><p>dispersó en mil y una corrientes, erosionando aquel suceso y</p><p>reduciéndolo a una simple anécdota divertida, luego un hecho esporádico,</p><p>más tarde continuó relatatándose como si fuera la fantasía de alguien</p><p>muy ingenioso y con un gusto extraño y finalmente, aquella vivencia se</p><p>disipó como las últimas volutas de una vela extinguida. El tiempo</p><p>también les afectó a ambos y se distanciaron hasta acabar limitándose a</p><p>observarse de reojo y nunca solos. Ella creía escuchar algún susurro</p><p>huido de sus labios y él creyó apreciar algún brillo anhelante en sus</p><p>ojos, y conocieron a nuevas personas y experimentaron.</p><p>Al menos ella, se</p><p>recordó a sí misma Elena. Sus grandes y vivaces ojos castaños cautivaban</p><p>los deseos de muchos, y algunos arrojados se envalentonaban e</p><p>intentaban someter a sus defensas, y unos pocos lo consiguieron,</p><p>recompensados con algún beso en noches de feria. Sin embargo, casi</p><p>ninguno dejó el más mínimo rastro en sus recuerdos, y se esfumaron como</p><p>las sombras al amanecer. Pese a ello, hubo uno que sí consiguió algo</p><p>más.</p><p>Ocurrió el año</p><p>pasado, cuando tenía dieciséis años. Casi todo el mundo había huido del</p><p>pueblo por las vacaciones, exceptuando a alguna familia limitada, como</p><p>la suya misma, y se vio resignada a matar el aburrimiento como podía en</p><p>un pueblo casi fantasmal. En una tarde insólita, ella se encontraba a la</p><p>sombra del gran haya de la plaza ojeando un libro y entró por la puerta</p><p>norte un joven mozo, rubio, de ojos azules y tez blanca, cubierto con</p><p>un orgulloso sombrero de dos picos, montando sobre un brioso podenco.</p><p>Los cascos del corcel resonaron sobre los adoquines y levantaban</p><p>nubecillas de arena, y el mozo se aproximó a ella, deteniendo el caballo</p><p>ante su expresión asombrada.</p><p>Se llamaba George, y</p><p>resultó ser hijo de un terrateniente de la zona, de ascendencia</p><p>inglesa. No hablaba muy bien español y tenía un pronunciado acento</p><p>británico, un rasgo que le llamó mucho la atención. Le contó que habían</p><p>vuelto a España porque su madre añoraba sus raíces nacionales y el padre</p><p>había consentido a regañadientes volver a sus terrenos, arrendados a un</p><p>buen conocido de la familia. Esa tarde George y ella hablaron largo y</p><p>tendido y él se volvió a su casa montado con la aparición de las</p><p>estrellas y la promesa de un nuevo encuentro. Cada día, George pasaba</p><p>por allí a la misma hora y allí se encontraba Elena, fiel a la cita.</p><p>Resultó ser un joven</p><p>avispado, inteligente y perspicaz, que la dejaba embobada y atónita con</p><p>sus historias sobre la Gran Ciudad, como ella denominaba a Londres,</p><p>donde residía la familia de George. El joven inglés acompañaba sus risas</p><p>cuando ella intentaba sorprenderle con alguna historieta o suceso</p><p>cómico del pueblo. Su amplia boca de labios regordetes se curvaba en una</p><p>sonrisa abierta y risueña, mientras sus ojos un tanto hundidos y de un</p><p>tinte verde pantano, sagaces y seguros, no perdían detalle de las formas</p><p>que se dibujaban bajo la ropa de aquella pueblerina aburrida.</p><p>George la invitó a</p><p>cabalgar juntos, y ella accedió, y continuaron hablando y divirtiéndose.</p><p>El británico tenía una inteligencia aguda y captó el brillo interesado y</p><p>curioso en la mirada de Elena, aprovechándose de él, aturdiéndola con</p><p>historietas y fugaces comentarios y gestos halagadores y ademanes</p><p>propios de un amante delicado y afectuoso. Confeccionó con paciencia su</p><p>trampa y la preparó sin precipitaciones, hasta que una buena tarde,</p><p>consiguió captar un beso de sus labios, entregado por ella misma, en un</p><p>escenario idílico, junto a un precipio con la luz del atardecer</p><p>enrojeciendo las copas de los árboles.</p><p>Casi tras un mes de</p><p>conocerse, cuando acudían al bosque, era para abrazarse y besarse, como</p><p>amantes proscritos, resguardándose de cualquier vigilante y acechante</p><p>mirada. Así pues, una calurosa tarde, George condujo su caballo hasta un</p><p>riachuelo próximo, cuyo curso desaparecía aquí y allá dejando un lecho</p><p>pedregoso a su paso, hasta detenerlo junto a una poza prácticamente</p><p>cristalina.</p><p>-¿Te apetece un</p><p>baño?-le preguntó George, desmontando y quitándose el sombrero. Le</p><p>tendió una mano a Elena para ayudarla a bajar.</p><p>-Si, no estaría nada</p><p>mal pero no tengo ningún bikini-se excusó Elena, con un deje de</p><p>tristeza. Los ojos del británico relucieron, anhelando el desarrollo</p><p>venidero.</p><p>-<i>Well</i>,<i>if you don´t mind</i>, podríamos bañarnos sin...<i>clothes</i>?-preguntó él, fingiendo dificultades en la formulación en español. Los ojos de la joven se abrieron de par en par, sorprendidos y unos coloretes vivos asomaron en sus mejillas.</p><p>-No,<i>not good</i>-empezó a farfullar ella, haciendo aspavientos para frenar a su joven amigo, quien ya había comenzado a desprenderse de la camisa. George le sonreía, amistoso y confiable, seguro de sí mismo, ante el escándalo y temor reflejados en su rostro.</p><p>-<i>Don´t worry</i>, hoy hace mucho calor, nadie viene aquí-le decía. Elena continuaba quieta, estupefacta, observándole con cierto espanto, sin embargo, el británico creyó vislumbrar un brillo de curiosidad bajo aquella máscara aterrada. Debía actuar confiado, para infundirle el suficiente valor, y no dudo en bajarse los pantalones. Giró su rostro un tanto, para no ser tan descarado y se bajó los calzoncillos, quedándose desnudo. Escuchó a sus espaldas un grito ahogado de Elena y corrió hacia la poza, saltando sobre ella sin temor.</p><p>-Vamos, no temas,<i>come on</i>-le susurraba él, tendiéndole una mano. Insistió un par de veces más y, a la tercera, encogió los hombros y se volvió de espaldas. Mantuvo aquella posición un tiempo prolongado, aguardando la respuesta de Elena.</p><p>-No te vuelvas-le</p><p>advirtió ella, con un tono amenazador. Él asintió con la cabeza,</p><p>sonriendo triunfadoramente. En su cabeza, recreaba como aquella</p><p>pueblerina se desprendía de cada prenda y se encaminaba desnuda hacia la</p><p>poza. Se regocijó al pensar que, si continuaba así, conseguiría</p><p>llevarse una flor de aquel pueblo olvidado e insignificante.</p><p>El británico ahogó</p><p>una exclamación de sorpresa al notar como Elena se aferraba a su cuerpo</p><p>con sus brazos y piernas y se estremeció al sentir la punta afilada de</p><p>los pezones de la joven clavados en su piel. Intentó liberarse de su</p><p>improvisada inmovilización y ella, entre risas y sonrisas, se alejó de</p><p>él, huyendo de la persecución a la que la sometió.</p><p>Se comportaron como</p><p>dos niños salpicándose agua y riéndose, y los ojos del británico no</p><p>perdían detalle de los muslos y el cuerpo desnudo de la pueblerina. Sus</p><p>pechos no parecían grandes y la blancura de la piel de sus nalgas</p><p>revelaba un culo firme y apetecible, perfecto para ser aferrado entre</p><p>sus dedos. Finalmente, consiguió acorralar a Elena entre dos rocas, y</p><p>ella se volvió hacia él, con el cabello pegado y respirando con fuerza.</p><p>Pese a verse atrapada, intentó zafarse de sus brazos, pero George se lo</p><p>impidió sin brusquedad y sin perder su sonrisa encantadora.</p><p>-Vaya, parece que</p><p>estoy en tus manos-susurró Elena, aproximando su rostro lentamente hacia</p><p>el de él, como si estuviera siendo atraída por la fuerza de un imán.</p><p>George no le respondió, ya que sus palabras enmudecieron con el beso que</p><p>le dio ella.</p><p>Aquel beso</p><p>inesperado se fue tornando más pasional y adquirió un cierto tinte</p><p>salvaje, danzando entre sí las lenguas hasta que acabaron resoplando,</p><p>pugnando por capturar aire en el menor tiempo posible. Los ojos de Elena</p><p>brillaban con un fuego extraño, que George interpretó como una</p><p>sugerencia y se pegó un poco más al cuerpo de ella, deslizando su mano</p><p>lentamente por su espalda desnuda hasta posarse plácidamente en su culo.</p><p>Ella correspondió a</p><p>su caricia con una sonrisa agradecida y tuvo el impulso de aferrarse con</p><p>sus manos a la espalda del británico, acercándose aun más a él. George</p><p>sabía lo que ocurriría, era un momento delicado y arriesgado, y no debía</p><p>precipitarlo. Detectó la mueca de sorpresa de su rostro y vio como los</p><p>ojos de Elena bajaron hasta hallar la cosa alargada y dura que se había</p><p>aplastado contra su cuerpo.</p><p>-Te quiero, Elena-susurró él con un tono suave como la seda. Ella alzó sus ojos y parpadeó, sonrojándose.</p><p>-De...deberíamos</p><p>secarnos, ¿no crees?-le dijo y él asintió con la cabeza, con pesadumbre.</p><p>Permitió que Elena se escabullera hacia la orilla arenosa. Ella fue la</p><p>primera en emerger de la poza y los ojos de George se abrieron</p><p>agradecidos al ver por primera vez a la luz del sol el cuerpo desnudo de</p><p>aquella muchacha.</p><p>Ella le daba la</p><p>espalda y se detuvo, quizá advirtiendo en ese momento que se encontraba</p><p>desnuda y expuesta a él, sin embargo, se volvió lentamente hacia él</p><p>hasta que los ojos de ambos se encontraron, intercambiándose mensajes</p><p>íntimos. La suposición que George había hecho sobre ella era acertada.</p><p>Elena tenía un cuerpo sensual caracterizado por unas curvas que eran</p><p>ligeramente sugerentes. Su cuerpo era el de una joven delicada atrapada</p><p>en una vida lastrada por los esfuerzos rurales, y su fisonomía se fundía</p><p>con los rasgos finos de su rostro, con su nariz pequeña, sus finas</p><p>cejas ligeramente arqueadas y unos sugerentes y carnosos labios, cuya</p><p>belleza era eclipsada por la profundidad y hermosura del color de sus</p><p>ojos.</p><p>Elena se había</p><p>arriesgado, le había lanzado un órdago y él no dudó y lo aceptó sin</p><p>rechistar. Emergió con decisión y confiado, y aguardó con serenidad el</p><p>escrutinio disimulado que Elena hacía de su desnudez. Las mejillas de</p><p>Elena volvieron a incendiarse y George sonrió.</p><p>-¿Nunca habías visto</p><p>a un hombre desnudo?-le preguntó, colocando sus brazos en jarras. Elena</p><p>dio un respingo y volvió a clavar sus ojos en su rostro, enrojeciendo</p><p>violentamente. Hizo un amago de cubrir su desnudez con las manos pero</p><p>las mantuvo junto a los costados.</p><p>-No, no eres el</p><p>primero-empezó a decir Elena y, tras apreciar la sorpresa reflejada en</p><p>George, se apresuró a decir.-Quiero decir, no es que yo haya hecho...ya</p><p>sabes. Me refiero a que ya he visto antes a un chico desnudo, solo que</p><p>tenía trece años y esa cosa la tenía muy pequeña.</p><p>George se rio y se</p><p>encogió de hombros, restando gravedad a la situación. Se acercó a Elena</p><p>hasta situarse junto a ella, a una distancia de apenas diez centímetros.</p><p>Sus ojos seguían mirándose, retándose a ver cual de los dos era el</p><p>primero en desviar la mirada.</p><p>-Puedes mirar todo</p><p>lo que quieras, eres la primera chica que veo sin ropa-le indicó George,</p><p>con un tono calmado y confiado. Tras escuchar aquello, Elena respiró</p><p>aliviada, perdiendo parte de su tensión. George sabía disimular muy bien</p><p>las mentiras, y lo que necesitaba aquella chica era sentirse segura y</p><p>confiada, sin la presión de poder ser comparada con otras.</p><p>-Tiene un aspecto</p><p>muy...curioso-comentó Elena, bajando sus ojos hacia el miembro de</p><p>George. Éste se encontraba casi erecto, y pareció responder al</p><p>comentario de la chica con un leve respingo que provocó una carcajada en</p><p>la joven.</p><p>George alzó su</p><p>mentón con gentileza, sonriéndole abiertamente. Sus ojos escudriñaban el</p><p>interior turbulento del color casi café de los ojos de Elena, captando</p><p>su turbación, su preconcebida repulsa impuesta por las contricciones</p><p>sociales, su curiosidad abierta, su deseo de exploración acallado a</p><p>duras penas...Intentó transmitirle sosiego y calidez a través del océano</p><p>de sus ojos, invitándola a aventurarse entre sus aguas.</p><p>En aquel silencio</p><p>compartido, sus manos se encontraron.Las del británico acogieron las de</p><p>la joven y las guió hacia donde él deseaba, hacia donde los ojos de ella</p><p>le susurraban. Se aproximó a su rostro y rozó con sus labios el lóbulo</p><p>de su oreja, musitándole:</p><p>-No temas.</p><p>El cuerpo de Elena</p><p>se estremeció ligeramente cuando sus dedos rozaron la superficie del</p><p>tronco de la polla de George y él mantuvo sus manos allí, abarcando la</p><p>extensión de su miembro.</p><p>-Está latiendo-comentó Elena, con un tono impresionado-es...increíble.</p><p>La joven seguía sin</p><p>atreverse a mirar hacia abajo y mantenía los ojos cerrados mientras sus</p><p>dedos se movían torpemente por la zona. George acarició su mejilla.</p><p>-Deberías mirar-le</p><p>aconsejó él-tus dedos necesitan la guía de tus hermosos ojos. Ella</p><p>asintió y le obedeció, sin perder el vivo color de sus mejillas.</p><p>-Se ha hecho más...</p><p>-Grande y dura-le</p><p>indicó George. Ella afirmó con la cabeza, con solemnidad mientras sus</p><p>dedos recorrían el tronco, haciendo retroceder y avanzar el prepucio. La</p><p>joven iba adquiriendo poco a poco cierta habilidad y un escalofrío de</p><p>placer sacudió a George. Aquella muchacha estaba enardeciéndole,</p><p>alimentando su deseo como un soplo aviva las ascuas de una hoguera.</p><p>Acercó su rostro al de ella, buscando sus labios mientras una mano suya</p><p>se apoderaba de uno de sus pequeños senos, acariciándolo suavemente.</p><p>La mano libre de Elena se aferró a su cuello, empujándole hacia él impiendo que sus labios se separaran.</p><p>-Para, para...creo que...-dijo repentinamente Elena, separándose de él y recuperando el aliento.</p><p>-Si, sí, te entiendo, no te preocupes-le contestó George.</p><p>-Perdona si te he hecho..., no era mi intención, maldita sea-rezongó Elena.</p><p>-No te preocupes-le</p><p>insistió él, sin perder la serenidad de su tono. Ella se debatió unos</p><p>instantes consigo misma, y le abrazó, apoyando su mejilla en su hombro.</p><p>-No quiero</p><p>decepcionarte-le confesó. Él no le dijo nada, acariciando sus cabellos</p><p>mojados. En ese momento, sus miradas volvieron a encontrarse, rostro</p><p>frente a rostro, leyéndose, analizándose en un flujo constante de</p><p>comunicación. George no hizo ningún amago, ni mueca, aguardando la</p><p>reacción de Elena. Los ojos de la joven parpadearon una sola vez y</p><p>asintió casi imperceptiblemente con la cabeza.</p><p>La joven se agachó</p><p>ante él, apoyando sus rodillas en la orilla arenosa de la poza, aún</p><p>manteniendo sus ojos clavados en los de él. George se apresuró a</p><p>intervenir, haciendo un gesto con sus manos pero Elena negó con</p><p>vehemencia con su cabeza.</p><p>-<i>Let me do</i>-le dijo, con un tono confiado.</p><p>En ese momento, los</p><p>ojos de Elena se clavaron en la polla de George, en aquel mástil de</p><p>carne prominente ligeramente curvado hacia la derecha rematado por una</p><p>zona abultada amoratada. No se lo quiso decir a George, pero su aspecto</p><p>le parecía casi cómico, con aquellas dos protuberancias ovaladas</p><p>colgando del fiero mástil, como si se encontrasen suspendidas en el</p><p>abismo. Además, su vello sobre el pene poseía un color plateado, casi</p><p>traslúcido, que solo se apreciaba si se fijaba bien de cerca, lo cual</p><p>contrastaba tanto con el vello rizado y oscuro que cubría su entrepierna</p><p>húmeda. El pene de George dio una sacudida, sacándola de sus</p><p>ensimismaciones.</p><p>-<i>Good</i>,<i>good</i>, eres muy buena-animaba George, acariciando su cabellera mientras la joven repartía besos por toda la longitud de su polla. Observó como la joven cerraba los ojos y sus labios se posaban sobre su glande, separándose a medida que iba poco a poco desapareciendo en su boca. Un gemido de placer grave y hondo fluyó a través de sus labios, y sonrió triunfalmente, saboreando su victoria.</p><p>Para Elena, estaba</p><p>siendo una experiencia curiosa y extraña. Sentía como su lengua se</p><p>arremolinaba en torno al miembro de George y notaba su calor y dureza</p><p>dentro de su boca. Retrocedió hasta la punta y le dio pequeñas</p><p>lametones, provocando una nueva sacudida en el británico. Se aseguraba</p><p>de vez en cuando con sus ojos de que el joven mantenía los suyos</p><p>cerrados y una y otra vez soportaba implacable los impulsos que sus</p><p>propios deseos le instaban. Notaba sus pezones sensibles, y una</p><p>creciente y cálida humedad en su entrepierna, la cual le palpitaba</p><p>levemente, rogando su atención. Ella conocía los secretos de su cuerpo</p><p>pero mantenía un incomprensible recelo a dejarse llevar y tocarse ella</p><p>misma. Tal vez aún se mantenía en guardia ante la posibilidad de ser</p><p>sorprendida.</p><p>Sin embargo, su</p><p>deseo se hacía cada vez más urgente. Las muecas de placer de George</p><p>también se habían aliado con el instinto de su cuerpo y el ardor que</p><p>notaba en su entrepierna se tornaba en algo difícil de soportar.</p><p>-¡Mmm!-gimió ella</p><p>por lo bajo, mientras sus labios se apretaban en torno al glande George.</p><p>Sus dedos habían tomado una decisión propia y uno de ellos ya actuaba</p><p>como un ariete, entrando y saliendo de su mojada entrada. Rogaría a</p><p>quien fuera con tal de que George no la descubriera, sin embargo, no</p><p>podía evitar reconocer que le producía un misterioso morbo que él la</p><p>viera así.</p><p>En ese momento, algo</p><p>cambió. Elena sintió como la mano de George hacía presión tras su</p><p>cabeza, casi aferrando sus cabellos y notó como era esa mano la que la</p><p>aproximaba y repelía de su polla, casi con el peligro de que la punta de</p><p>su pene tocara el fondo de su garganta. Intentó advertirle a George</p><p>pero sus balbuceos eran sofocados por los gemidos y susurros</p><p>ininteligibles de George.</p><p>Llevada por un</p><p>impulso, clavó sus uñas en los muslos del joven pero este gesto fue</p><p>inútil y solo consiguió encenderle aún más. Su cabeza adquirió un ritmo</p><p>más acelerado y ya casi le estaba costando hasta respirar.</p><p>-Oh,<i>come on</i>,<i>let´s go</i>,<i>let´s go</i>, oh, yeah, oooh, ooooh-gemía George, indiferente ante la situación de Elena. Su mente se encontraba nublada por el oscuro deseo que se había adueñado de su cordura y no fue capaz de apreciar las consecuencias de sus actos hasta que todo terminó y escuchó los insultos e increpaciones de Elena, mezclados con escupitajos. La joven retrocedió ante él, con una mueca furibunda borrando la hermosura de su rostro. Aún un fino hilo blanco pendía de la comisura de su labio, de la cual la joven se desprendió con un gesto brusco.</p><p>George ni siquiera</p><p>hizo el amago de acercarse a ella. Había cometido un terrible error y la</p><p>confianza del cervatillo dócil que había conseguido poseer se había</p><p>disipado, dejando en su lugar a una loba herida y furiosa, que no</p><p>dudaría ni por un instante en aferrar un guijarro y estrellarlo contra</p><p>su cabeza. Por ello, se limitó a observar como la joven se enfundaba de</p><p>nuevo sus ropas con soltura y dinamismo y se fundía de nuevo entre la</p><p>espesura de los árboles, sin perder aquella salvaje mueca de odio y la</p><p>ira acumulada en unos ojos húmedos y brillantes...</p><p>George fue un truhán</p><p>que la encandiló y engañó y que no dudó en usarla hasta que su máscara</p><p>hipócrita voló en mil pedazos justo en el mismo instante en que aquellos</p><p>violentos chorros se estrellaron contra su lengua y el techo de su</p><p>paladar, regando su boca con su repugnante semilla. A nadie contó esa</p><p>efímera aventura, ni el británico osó jamás regresar al pueblo y pasear</p><p>por la plaza, buscándola. Sin embargo, Elena era joven y se</p><p>autoconvenció poco a poco de que George había sido solo una pasajera</p><p>tormenta de verano, fugaz e inesperada. Recuperó su confianza en el sexo</p><p>opuesto, en su honestidad y sinceridad, sin embargo, su candidez había</p><p>sido irremediablemente arrebatada y su virginidad se mantuvo intacta,</p><p>provocando el hastío y decepción de algún ocasional candidato. En esa</p><p>época, su corazón le recondujo tras los pasos de Mark, indicándole que</p><p>él era el adecuado, el hombre que no se había olvidado de la amistad y</p><p>complicidad forjada con los años, quien no le haría daño ni abusaría de</p><p>ella, y no se limitaría a simplemente \"follar\", sino a \"hacer el amor\".</p><p>Pensar en Mark le</p><p>hizo recuperar la sonrisa. Era imposible que él la decepcionara. Sus</p><p>calmados y verdes ojos se lo decían constantemente cuando sus miradas se</p><p>encontraban. Él le transmitía seguridad, confianza y eran garantes de</p><p>experiencia. Eran solo rumores, pero Elena estaba segura que Mark había</p><p>probado las mieles de ese placer oculto y tan deseado como era el sexo.</p><p>Sin embargo, eso no la desanimaba, sino todo lo contrario. Él le</p><p>aportaría su experiencia, y ella le haría entender que todo ese tiempo</p><p>se había encontrado perdido y confundido, y que solo con ella hallaría</p><p>la felicidad. Únicamente a su lado, él podría despertarse feliz,</p><p>complacido y sereno y que solo sus gemidos y sus declaraciones amorosas</p><p>susurradas al oído mientras hacían el amor podrían disipar sus</p><p>perturbaciones e inquietudes.</p><p>Mark, Mark,</p><p>Mark...Su mente recreaba un torrente ilimitado de imágenes suyas,</p><p>recordaba como su piel se erizaba cuando él le hablaba, como sus piernas</p><p>temblaban cuando le rozaba el brazo con la punta de sus dedos. La</p><p>gravedad y calidez de su voz la rodeaban, sus palabras se aproximaban y</p><p>alejaban de ella, sentía el peso de su mirada derramándose por la</p><p>desnudez de su cuerpo.</p><p>-Mark-susurró ella,</p><p>con una voz cargada e intensa. Sus brazos rodeaban la longitud de la</p><p>almohada y sus labios rozaron por una milésima de segundo su suave</p><p>superficie. Se sentía febril. La piel le ardía como si estuviera</p><p>desplazándose un torrente de magna a través de su cuerpo, fluyendo desde</p><p>su bajo vientre, desde donde un calor oprimente continuaba</p><p>empecinándose en descender. Notaba la boca reseca, y su cuerpo vibraba,</p><p>enloquecido por una misteriosa energía.</p><p>-Mark, Mark-continuó</p><p>ella murmullando, rodando por la cama aferrada a la almohada. Su pierna</p><p>derecha se enroscó en torno a la almohada, atrapándola, como si fuese</p><p>el mismísimo cuerpo de Mark. Serpientes de deseo e intenso calor</p><p>reptaban por sus muslos, escalando por ellos hasta concentrarse en su</p><p>zona más íntima, notándola sumamente ardiente y sensible. Casi parecía</p><p>que un pequeño corazón estuviera bombeando frenético entre sus labios,</p><p>los cuales debían encontrarse henchidos. Si hubiera poseído alguna</p><p>prenda de ropa puesta, estaba segura que se la habría arrancado usando</p><p>uñas y dientes. Y no habría sido ella misma, se decía Elena, con una</p><p>orgullosa sonrisa. No, sería el propio Mark quien se la destrozado,</p><p>dejándola desnuda y expuesta frente a la expresión de su rostro,</p><p>triunfal y ufanado de su hazaña. Y ella, abrazándose las rodillas e</p><p>intentando cubrir de esta forma sus vergüenzas, víctima de un estúpido</p><p>sentimiento de pavor ante sus burlas, vencería su reticencia y separaría</p><p>sus brazos y muslos, liberándose, descubriéndose y revelando sus</p><p>secretos.</p><p>Y Mark la poseería.</p><p>Dulcemente, con suavidad, susurrando su nombre entre dientes,</p><p>adentrándose poco a poco en ella, como hacía en sus sueños. Su mente no</p><p>paraba de recrear esas dulces imágenes. Él encima, como se encontraba</p><p>ella en ese momento, dibujando besos en su cuello y cincelando un</p><p>placentero rastro húmedo en su piel. Además, su cintura subiría y</p><p>bajaría, impulsando su miembro dentro de su cuerpo, justo como ella</p><p>hacía, hundiendo en sus cavernidades volcánicas el dedo corazón de la</p><p>mano diestra.</p><p>Si la descubrieran</p><p>en ese instante abriendo la puerta, la sorprenderían desnuda, con su</p><p>cabello liberado y su ropa desperdigada, y observaría ese afortunado</p><p>intruso como sus nalgas ascendían para iniciar un placentero descenso y</p><p>contemplaría complacido sus caderas emergiendo del amparo de las</p><p>tinieblas de la noche para ser bañadas por la luz amarillenta de las</p><p>farolas.</p><p>Si Mark fuese quien</p><p>entrara en su dormitorio, no le importaría. Continuaría así,</p><p>masturbándose y susurrando su nombre, rozándose los labios para paladear</p><p>su nombre, como si las sílabas poseyeran un gusto más dulce y exquisito</p><p>que la miel. De esta forma, el joven conocería cuánto lo necesitaba y</p><p>deseaba. Y ella, ladeando su cabeza, mostrándole apenas un atisbo de su</p><p>rostro, le musitaría:</p><p>-Házmelo así, Mark.</p><p>Otras chicas, como</p><p>su amiga Jessica, le pediría algo más soez y vulgar, como</p><p><>, comentarios más propios de amantes</p><p>furtivas e indecentes usando cualquier tipo de artimaña para engatusar a</p><p>desafortunados, pero ella era distinta. Las llamas del deseo y la</p><p>pasión mordían su piel y crepitaban sacudiendo su cuerpo y despertando</p><p>sus gemidos, sin embargo, Mark le daría afecto, cariño y complicidad</p><p>cuando conociera su cuerpo. Por ello, no le importaría masturbarse ante</p><p>los ojos de Mark, aunque éste se sorprendiera, aunque él pensara que</p><p>ella no lo hacía.</p><p>-Sí, Mark, por ti</p><p>sí-le revelaría, con un tono confiado y se daría la vuelta colocándose</p><p>boca arriba. Abriría más las piernas, ofreciéndole a su anhelado Paris</p><p>la exquisita danza de los dedos en su coño y el delicado baile de su</p><p>mano izquierdo en sus senos, trazando con las yemas sendas invisibles</p><p>que conducían hacia sus pezones. Si tuviera las suficientes tetas,</p><p>incluso estaría dispuesta a alzarlas y llevarlas hacia sus labios,</p><p>mamando de sus pezones, incitando a Mark a que la sustituyera. Sin</p><p>embargo, sus ínfimas tetas solo le permitían pellizcar el pezón y tirar</p><p>suavemente de él, en un fútil intento de alzarlas.</p><p>Pese a ello, a su</p><p>Paris no le importaría. Afrodita había guiado sus pasos desde su tierna</p><p>adolescencia hasta él. Y él se entregaría entre sus brazos, y bebería de</p><p>sus senos como si brotara de ellos un dulce néctar, dominando con sus</p><p>labios los pezones, acogiéndolos en un placentero abrazo. Utilizaría sus</p><p>labios para crear una leve fricción en torno al pezón cautivo y tiraría</p><p>de ellos un poco, siguiendo el consejo y guía del ejemplo que le</p><p>enseñaría Elena con sus propios dedos.</p><p>-Oh, Mark, Mark,</p><p>oooh, mmm-gemía ella, entre jadeos y suspiros entrecortados, como otras</p><p>noches había hecho, fantaseando con él. En noches frías y silenciosas</p><p>cuyos reconfortantes silencios eran quebrados por sus murmullos y</p><p>jadeos, acompañados del frufú de la ropa de la cama y el alegre chapoteo</p><p>amortiguado de sus dedos entrando y saliendo de su gruta. Cuando</p><p>reinaba el calor y sus hormonas campaban a sus anchas adueñándose de</p><p>ella, acababa desnuda totalmente y bañada por la luz lunar o la de las</p><p>farolas, retorciendo su cuerpo y dándose placer, intentando mitigar el</p><p>ardiente deseo que la consumía.</p><p>Esas noches se</p><p>convertía en una víctima atrapada entre las garras de Eros y el capricho</p><p>de Afrodita y su cuerpo se sacudía y vibraba espoleado por las furiosas</p><p>llamas del instinto carnal. Sus dedos danzaban y realizaban unos pasos</p><p>que sólo la experiencia le había enseñado. Sus gemidos y suspiros</p><p>aumentaban hasta casi convertirse en gritos desesperados y preñados de</p><p>deseo, con lo cual, se veía obligada a morderse una mano o la almohada. Y</p><p>su cuerpo se seguía sacudiendo y se veía azotado por el vivaz oleaje de</p><p>una tormenta terrible hasta que su cintura se alzaba empujada por la</p><p>cresta de una inmensa ola y sentía como si sus entrañas fuesen a</p><p>desprenderse de su interior ante su impotencia y deseo. Ansiaba ese</p><p>liberalizador momento y tras el cenit de ese placer se abandonaba a la</p><p>posterior paz y serenidad que la inundaba.</p><p>Esa noche pertenecía</p><p>a esa categoría. Era una de esas noches en las que un solitario dedo no</p><p>bastaría para obtener la serenidad del orgasmo. Chapotearía inútilmente</p><p>entre los fluidos que emanaban de su interior, entrando y saliendo de</p><p>su coño, frotándose contra la franja de vello púbico que se había</p><p>dejado, desplazándose en la oquedad dibujada entre sus muslos.</p><p>Abrió los ojos y</p><p>allí se encontraba Mark, aunque su cuerpo se hallaba sumido en las</p><p>sombras. Sin embargo, eso no importaba. El fulgor de sus ojos esmeralda</p><p>le hacía entender que él la ayudaría. Ni notó como el colchón de su cama</p><p>cedía ante su peso pero se estremeció entera cuando apoyó sus manos</p><p>tibias sobre sus ardientes muslos. Ella los separó por instinto, y</p><p>arqueó el cuello al sentir la calidez de la brisa de su aliento</p><p>revoloteando entre los rizos del monte de Venus y entre sus labios</p><p>humedecidos. Sus labios se despegaron, intentando formular un deseo,</p><p>pero la boca de Mark apoderándose de su coño ahogó sus palabras.</p><p>Ni siquiera parecía</p><p>estorbarle los dos dedos que Elena hundía en su ardiente interior, ni</p><p>como estos se retorcían trazando círculos o iniciaban un mete saca más</p><p>frenético y en otras más calmado, extasiándose en recorrer cada pliegue y</p><p>recovedo. Además, su avispada y enérgica lengua ignoraba</p><p>deliberadamente la yema del dedo índice sobre el hinchado clítoris,</p><p>enhiesto y orgulloso.</p><p>O tal vez todo ello</p><p>solo sucedía en su imaginación. No importaba. Se mordió un labio,</p><p>intentando contener sus gemidos, notando como una impetuosa marea se</p><p>alzaba en su interior, amenazando con desbordarla.</p><p>El deseo la abrasaba</p><p>y la desprendía de cualquier atisbo de decencia, transformándola en una</p><p>criatura furiosa y desesperada. Mark retrocedió un poco, pero Elena le</p><p>agarró con una fuerza extraordinaria del brazo y lo arrojó sobre la</p><p>cama. Su mirada lucía un brillo asustado y su expresión estaba crispada</p><p>en una mueca de sorpresa.</p><p>Un oscuro y poderoso</p><p>orgullo insufló una sonrisa cruel en su rostro y sus labios se</p><p>separaron liberando un gemido ansiado cuando una de sus manos agarró su</p><p>endurecido miembro y se lo introdujo sin miramientos dentro del coño.</p><p>Su espalda se curvó,</p><p>destacando los picudos pezones engreídos de Elena ante los ojos de Mark</p><p>mientras su cintura se movía, sintiendo como aquel pene se removía en</p><p>su interior, llenándola y consumiéndola. Sus movimientos y giros le</p><p>transmitían sensaciones muy similares a cuando se introducía dos dedos.</p><p>Sin embargo, ni eso bastaba para satisfacerla. La marea continuaba su</p><p>ascenso imparable pero necesitaba un último impulso. En su fuero</p><p>interno, en lo más recóndito y oscuro de las mazmorras donde ocultaba</p><p>esa parte suya tan oscura, donde se empecinaba en ocultar el rudimento</p><p>de su despertar sexual, algo se removió, inquieto, entre sueños. Una</p><p>risa retorcida emergió entre los barrotes de aquella prisión, sabedora</p><p>de su debilidad.</p><p>Su cuerpo pareció</p><p>actuar de forma autómona, siguiendo los consejos de esa voz. Se desplazó</p><p>sobre la cama hasta que la iluminación eléctrica del exterior</p><p>desprendió a su cuerpo del cobijo de la oscuridad. Deseaba que Mark la</p><p>viera bien, tal y como él había hecho en esa ocasión.</p><p>Se colocó a cuatro</p><p>patas, agachando su espalda para resaltar sus nalgas, entregándole</p><p>gustosa el tesoro entre sus piernas. Tal vez, eso es lo que él hubiera</p><p>ansiado poseer.</p><p>Mark la penetró de</p><p>esta forma, sin embargo, eso no le haría culminar. No. Necesitaba</p><p>recrear ese humillante recuerdo, hilvanando los fragmentos de sus</p><p>recuerdos, tal y como esa voz retorcida y oscura le indicaba. Su mente</p><p>retrocedió en el tiempo, a cuando tenía trece años, el día en que había</p><p>ayudado a Mark y había ocultado su desnudez con la toalla con la que</p><p>ella misma había estado ocultando la suya propia.</p><p>La mano de Mark se</p><p>alzó, con lentitud, saboreando complacida su vil acción, siguiendo la</p><p>misma trayectoria que la que había trazado él. Y ella temblaba, ante su</p><p>impotencia y rabia, sin embargo, casi inadvertidamente, una extraña</p><p>sensación fue removiéndose en su interior, algo que ella nunca había</p><p>sentido antes.</p><p>¿Qué podía hacer</p><p>ella, una chiquilla de trece años? Sus piernas temblequeaban ante la</p><p>cólera de su voz y esa tarde, cuando volvió a su casa y ésta se hallaba</p><p>sola, se lo encontró como siempre, en el salón. Sin embargo, era</p><p>diferente. Una extraña atmósfera reinaba allí, opresiva y peligrosa. Y</p><p>cuando él se levantó y giró su rostro hacia ella, casi sintió como si se</p><p>hubiera apoderado de su corazón y se dispusiera a estrujarlo.</p><p>Lloriqueó, se lamentó una y otra vez, casi se puso de rodillas</p><p>reclamando su piedad pero todo fue en vano. Obedeció su orden, casi</p><p>apenas aguantando las lágrimas y con un intenso rubor en sus mejillas, y</p><p>una a una, las prendas de su ropa fueron cayendo al suelo. Sin despegar</p><p>los ojos de la punta de sus pies, se enfrentó a él, desnuda e</p><p>indefensa, cubriendo con sus manos sus desnudeces. Sentía su presencia</p><p>allí, asfixiante y terrible, escrutándola con sus ojos, traspasando las</p><p>irrisorias defensas de sus manos y entonces, su voz resonó, poderosa e</p><p>incuestionable.</p><p>-Desvergonzada,</p><p>menuda ofensa para todos nosotros-mascullaba, indiferente al daño que</p><p>aquellos comentarios producían en ella-has cometido una grandísima</p><p>imprudencia, irresponsable.Y ahora no te atreves a volver a hacerlo,</p><p>cría estúpida. ¡Muéstrame lo que has enseñado a todos!.</p><p>A medida que</p><p>hablaba, la ira que rezumaba su voz iba aumentando hasta tal punto que</p><p>acabó llorando a lágrima viva y le obedeció, muerta de vergüenza. Él no</p><p>atendía a ninguna razón, simplemente había ignorado sistemáticamente</p><p>todos sus argumentos ofrecidos. Ni siquiera se atrevía a alzar sus ojos</p><p>para enfrentarse a su rostro. Temía volver a ver su expresión severa y</p><p>crispada, y ese fulgor tan salvaje y espantoso, más propio de un animal</p><p>famélico dispuesto a despedazar a su presa.</p><p>Su llanto disminuyó poco a poco mientras soportaba estoicamente aquel escrutinio que parecía prolongarse hasta la eternidad.</p><p>-Te estás</p><p>convirtiendo en toda una mujercita-susurró él, con un tono perturbador e</p><p>inquietante, un tono que ella jamás le había escuchado y que le erizó</p><p>el vello de la nuca. Casi pareció lamentarse él mismo de lo que había</p><p>dicho, ya que carraspeó y por un instante, dudó, sin embargo, su voz</p><p>volvió a adquirir el tono severo de antes.</p><p>-Ven aquí, y túmbate sobre mis rodillas.</p><p>Sus hombros se</p><p>agitaron, desconsolada y observó impotente como sus piernas desobecedían</p><p>el dictado de la vocecilla que le aconsejaba huir, escaleras arriba, y</p><p>encerrarse donde fuera, lejos de su alcance, hasta que llegara</p><p>ella...Era tan humillante, ¡no se lo merecía!</p><p>Sintió la aspereza</p><p>de sus pantalones vaqueros sobre la piel de sus muslos y hundió la</p><p>cabeza bajo los hombros, ocultando su rostro, rindiéndose a su voluntad.</p><p>Tenía que obedecerle, pero estaba siendo tan injusto...</p><p>La mano de Mark se</p><p>clavó en sus nalgas con la misma violencia que el primer azote que le</p><p>propinó su padre aquella desafortunada tarde. Mark se mostraba</p><p>implacable e inclemente y mientras su polla iba horadando su coño, su</p><p>mano continuaba imperturbable azotándola, liberando por su cuerpo ondas</p><p>de dolor entremezclado con un placer visceral y salvaje.</p><p>La violencia de los</p><p>azotes de su padre pronto enrojecieron sus nalgas marmóleas y el sonoro</p><p>estallido silenciaba los farfullos incontrolables que escapaban de su</p><p>boca jadeante.</p><p>-Eso es, has sido mala...mereces que te castigue...chica muy mala...como tu madre...</p><p>Si hubiera podido,</p><p>se habría tapado los oídos, espantada por las implicaciones que una</p><p>parte de su mente se empecinaba en demostrarle, sin embargo, era como si</p><p>ella se estuviera contemplando a sí misma desde afuera, asistiendo a</p><p>ese horrible espectáculo.</p><p>Además, notaba una</p><p>extraña presencia clavándose en su bajo vientre, que se asemejaba a un</p><p>duro mástil. Su padre rodeó su cintura con un brazo, y alzó el peso de</p><p>su cuerpo como si se tratase de una pluma, mientras su otra mano</p><p>continuaba castigándola.</p><p>-¡Ay, papi, ya vale, por favor, ay, ay!-se quejaba ella.</p><p>Los azotes cesaron</p><p>y, en su lugar, notó como los dedos de su padre trazaban dibujos sobre</p><p>su carne afligida, aliviando el picor y hormigueo que bullía bajo su</p><p>piel. Aquella acción afloró una sonrisa de sosiego en su cara, creyendo</p><p>que esa bestia salvaje y furibunda se había desvanecido y había</p><p>retornado de nuevo su padre afable y protector.</p><p>-Elena, mi Elena, mi</p><p>pequeña Elena-susurraba esa voz, impregnada de cariño. El brazo de su</p><p>padre volvió a descender, apoyando el peso del cuerpo de Elena sobre sus</p><p>muslos otra vez y, en esta ocasión, sintió más notoriamente esa anómala</p><p>presencia, empeñada en rozarse muy cerca de su vagina.</p><p>Se sentia rara, como</p><p>si una fiebre hubiera asaltado repentinamente su cuerpo y un extraño</p><p>cosquilleo y ardor estuviera serpenteando en la flor que asomaba entre</p><p>sus muslos. Dichas sensaciones se iban acrecentando con las caricias que</p><p>su papá le dedicaba, las cuales habían iniciado un tímido descenso por</p><p>sus muslos, asomándose peligrosamente al abismo entre ellos.</p><p>-Papi, por favor, no</p><p>me pegues más, seré muy buena, te lo prometo-le aseguraba ella, pero</p><p>incluso el tono de su voz sonaba inseguro. ¿Realmente deseaba que se</p><p>detuviera la mano cruel e insensible que la había castigado, la misma</p><p>que ahora le estaba trasnmitiendo tanta dulzura y afecto?</p><p>La atmósfera del</p><p>salón se hizo más cargante que nunca, y Elena tuvo la convicción de que a</p><p>todos los espejos, cuadros e incluso al mismo televisor le brotaban</p><p>ojos que volaron como flechas hacia ellos, sin perder detalle alguno de</p><p>como los dedos de su padre resbalaban por sus muslos, buscando la gruta</p><p>oscura que se escondía entre ellos, ni como sus muslos se abrían</p><p>inexplicablemente ofreciéndole un paso seguro. Entrecerró los ojos,</p><p>dejándose arrastrar por las corrientes que arrastraban su cordura y</p><p>razón, y el deseo más instintivo que brotó en su interior se realizó</p><p>cuando los dedos de su padre viraron su rumbo hacia su coño,</p><p>extrañablemente húmedo y sensible.</p><p>Afortunadamente, la</p><p>cordura y serenidad retornaron y su padre recobró las riendas y el</p><p>dominio de su voluntad, alejando su mano de allí y pidiéndole que se</p><p>vistiera con una voz enronquecida y el rostro sofocado. Ella no le</p><p>rechistó, y obedeció incluso su petición de que no dijera nada a nadie,</p><p>ignorando la sospecha de que su padre se hubiera sobrepasado.</p><p>Esas extrañas</p><p>sensaciones remitieron, y rehuyeron el contacto incluso de sus miradas</p><p>durante unos cuantos días, recelosos uno del otro. Recordó que se pasó</p><p>todo ese día sintiéndose rara, como una intrusa en su propia casa y</p><p>aguantó el curioso picor en sus pezones y la perturbadora inclinación a</p><p>cruzar sus muslos y rozarlos entre sí. Incluso no reconocía a su propia</p><p>mente, que se empeñaba en divagar y en pensar en chicos, en sus torsos y</p><p>sonrisas, en la desnudez de Mark, en su beso y en las sensaciones que</p><p>le había despertado...</p><p>Nunca lo pudo</p><p>asegurar, pero hubiera jurado que ese día, las yemas de los dedos de su</p><p>padre acariciaron los rizos de su vello y uno de ellos se llevó</p><p>impregnada una gota de la miel arrebatada de su flor. Igual que no podía</p><p>asegurar la veracidad de lo que había creído ver por el rabillo del ojo</p><p>mientras se escabullía del salón; la imagen de su padre observando</p><p>detenidamente con el ceño fruncido la mano con la que le había castigado</p><p>y como se llevó esa mano hacia sus labios...</p><p>Lo que sí recordaba</p><p>con claridad era a ella misma desvelada, removiéndose sobre la cama, con</p><p>los oídos atenta a cualquier ruido. Por ello, distinguió el sonido de</p><p>las voces de sus padres charlando entre sí, y como sus voces fueron</p><p>remitiendo hasta enmudecer y ser sustituidas por desconcertantes gemidos</p><p>y jadeos, como si estuvieran enzarzados en un insólito combate. Anduvo</p><p>vestida únicamente con el camisón hacia el cuarto de ellos, extrañada y</p><p>confundida, y escuchó en el pasillo sonidos secos y pausados y se</p><p>estremeció al reconocerlos, ya que sonaban igual que los azotes que</p><p>había sufrido.</p><p>Con el corazón en un</p><p>puño, se aproximó a la puerta, con mucho tiento y sigilo y se</p><p>sorprendió al descubrir una pequeña rendija en el umbral. Su rostro se</p><p>contrajo en una mueca de sorpresa al descubrir a sus padres desnudos</p><p>sobre el lecho. Su mamá se encontraba a cuatro patas y sus pechos</p><p>flácidos y grandes se veían sacudidos por las embestidas de su papá,</p><p>quien además azotaba sus generosas caderas con el mismo ímpetu que había</p><p>usado con ella. Los ojos de Elena se abrieron espantados al recordar</p><p>ese momento, consciente y escandalizada por las horribles implicaciones</p><p>del acto de su papá, el cual, absorto en sus esfuerzos, farfullaba entre</p><p>dientes el nombre de su mamá.</p><p>Sin embargo, lejos</p><p>de amedrentarse y refugiarse en algún rincón a lloriquear y consolarse</p><p>en su desgracia, esa inesperada escena desató en su interior el huracán</p><p>de sensaciones y reacciones que esa mañana habían despertado en su</p><p>cuerpo y su mano derecha, siguiendo el compás que su instinto le</p><p>dictaba, descendió por su cuerpo y se coló bajo el camisón, hasta</p><p>posarse sobre el tímido valle oscuro que parecía estar ardiendo. Su dedo</p><p>corazón se hundió entre los labios, sumergiéndose en sus profundidas</p><p>húmedas, y continuó haciéndolo mientras observaba como sus padres</p><p>disfrutaban y gemían...</p><p>Su despertar sexual</p><p>le dejó una impronta indeleble en sus recuerdos y prefirió callar para</p><p>evitar escándalos y terribles calumnias. Por ello, nadie lo sabía,</p><p>exceptuando a Mark, que se encontraba azotándola como su padre e incluso</p><p>le susurraba entre jadeos:</p><p>-Mi Elena, mi pequeña Elena, mi dulce Elena...</p><p>Eso es lo que su</p><p>padre había deseado ese día. Su ira y furia por el descaro de su hijita</p><p>dieron paso a una oscura y retorcida lujuria, y un impetuoso deseo infló</p><p>su ser al ver las futuras redondeces de su retoño y, por unos</p><p>instantes, codició la fruta prohibido que había descubierto y que tenía</p><p>al alcance de su mano. Y ese perturbador deseo continuó rondando los</p><p>sueños húmedos de Elena, despertándola acalorada y excitada, y obligando</p><p>a la jovencita a restregar su hambriento coño contra su manita mientras</p><p>acallaba los gemidos de su propia lascivia.</p><p>Mark la conocía, era</p><p>capaz de adentrarse en la profundidad de sus ojos y descubrir todos sus</p><p>secretos. Ante él, ante sus ojos, no había velo que soportara su</p><p>escutrinio, y quedaba desnuda e indefensa.</p><p>-¡Aah, Mark,</p><p>fóllame, sigue, sigue, fóllame, aah!-gemía ella. Llevaba por el placer,</p><p>retorció su cuello para observar a su amado, pero solo la oscuridad le</p><p>devolvió una mirada cómplice.</p><p>-¡Aaaah!-gimió, y</p><p>mordió la almohada, al tiempo que su mano se transformaba en unas garras</p><p>que se clavaban en sus afligidas nalgas y un torrente de ardiente magma</p><p>erupcionaba de la gruta de su coño, abrasando sus dos dedos y lamiendo</p><p>los nudillos de su mano.</p><p>Se derrumbó,</p><p>complacida y exhausta, con una sonrisa de inmenso alivio reluciendo en</p><p>sus labios. Su cuerpo aún se veía sacudido por los últimos coletazos del</p><p>enérgico orgasmo que había sentido y, con un inmenso esfuerzo, se dio</p><p>la vuelta, jadeante y aliviada.</p><p>Paris aún no había</p><p>acudido hasta su encuentro y ella continuaría aguardando su llegada,</p><p>reservándole su flor y sus secretos. Una inmensa sonrisa cruzó su rostro</p><p>mientras las tinieblas invitaban a sus ojos a cerrarse. La próxima vez,</p><p>sería Mark quien la poseería...</p><p>Exhaló un último</p><p>suspiro antes de abandonarse al sueño, el mismo suspiro que liberó una</p><p>sombra que se removió enfrente de su casa, cuyos atentos ojos no habían</p><p>perdido detalle de como aquella jovencita había estado masturbándose. Y</p><p>él le había acompañado, sacudiendo su polla mientras veía como Elena,</p><p>¡la pequeñita Elena!, esa niña que se había transformado en una linda</p><p>jovencita, saciaba el hambre voraz de su deseo.</p><p>Y cuando su simiente</p><p>regó el alféizar de la ventana, imaginó que era descargada en la</p><p>boquita de esa dulce niña, la misma que todas las mañanas le deseaba</p><p>buenos días con sinceridad y afecto, ofreciendo respeto al vecino</p><p>cincuentón tan amigo y cercano a la familia. El mismo hombre que seguía</p><p>con sus ojos cansados el camino de sus pasos, desnudándola, deleitándose</p><p>al imaginar el delicioso vaivén de sus suculentas y dulces nalgas</p><p>mientras ella se encaminaba al encuentro de su amado.</p><p>Le deseó buenas</p><p>noches al sentir como el sueño le reclamaba, y le dio las gracias por</p><p>mostrarle que aún había maravillas que algún dios compasivo le había</p><p>reservado para su disfrute.</p>",
      "id": "1vyy009l5rts",
      "author": "juancax",
      "title": "Una noche de sueños frustrados"
    },
    {
      "content": "<p>Les «Mémoires» de Simone de Beauvoir, journal intime de son temps</p><p><a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.slate.fr%2Fsource%2F28527%2Fjean-marc-proust\" target=\"_blank\" rel=\"nofollow\">Jean-Marc Proust</a> — 17 mai 2018 à 14h50 — mis à jour le 17 mai 2018 à 15h55 </p><p>La publication à La Pléiade des «Mémoires» de Simone de Beauvoir, ce 17 mai, est l'occasion d'interroger une aventure littéraire singulière, souvent éclipsée par les autres facettes de l'œuvre de l'écrivaine.</p><p>Simone de Beauvoir, le 13 décembre 1970 | Jean Meunier / AFP</p><p>«Ses souvenirs sont les nôtres; en parlant d’elle, Simone de Beauvoir nous parle de nous», écrivit <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FFran%25C3%25A7ois_Nourissier\" target=\"_blank\" rel=\"nofollow\">François Nourissier</a>. Double hommage: celui malicieux du point-virgule, qu'elle utilise beaucoup, celui aussi d’un cycle mémoriel unique, en ce qu’il embrasse à la fois le récit autobiographique, témoigne de la vie intellectuelle de la seconde moitié du XXe siècle, dresse le portrait intime et politique de Sartre et porte plusieurs combats, du communisme au féminisme, en passant par l’anticolonialisme.</p><p>Du couple Sartre-Beauvoir, l’un a longtemps éclipsé l’autre. Ce n’est plus le cas aujourd’hui. D’une certaine manière, réunir en deux volumes de La Pléiade les Mémoires de Simone de Beauvoir met au premier plan le second rôle.</p><p>On ne naît pas icône, on le devient</p><p>Second rôle? Évidemment non. La postérité est taquine. C’est aujourd’hui Simone de Beauvoir qui est lue, commentée, étudiée –bien plus sans doute que Jean-Paul Sartre. Ce dernier reste une référence, mais sa pensée semble bien éloignée du monde contemporain.</p><p>Inversement, Beauvoir suscite des lectures beaucoup plus actuelles et personnelles des jeunes générations. Car la romancière des <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FLes_Mandarins\" target=\"_blank\" rel=\"nofollow\">Mandarins</a> (Prix Goncourt 1954) est moins lue que la philosophe politique, théoricienne du féminisme.</p><p>Hier compagne du Mouvement de libération des femmes (MLF), aujourd’hui inspiratrice de plus jeunes féministes, sa pensée est d’une brûlante actualité. Elle est à ce point à la mode que l’hebdomadaireElle, recensant les sacs, turbans et tee-shirts à son effigie, <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.elle.fr%2FSociete%2FNews%2FSimone-de-Beauvoir-est-elle-devenue-une-pop-star-3450383\" target=\"_blank\" rel=\"nofollow\">la qualifie de «pop-star»</a>. Elle en aurait souri, sans doute.</p><p>Surtout, sa pensée est étudiée sans relâche, notamment aux États-Unis. </p><p>En France, une essayiste, aux États-Unis, une philosophe</p><p>«Il n’y a pas beaucoup de spécialistes de Beauvoir en France, où l’on classe ses ouvrages dans la catégorie des essais, observe <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fceredi.labos.univ-rouen.fr%2Fmain%2F%3Fjean-louis-jeannelle.html\" target=\"_blank\" rel=\"nofollow\">Jean-Louis Jeannelle, professeur de littérature à l’Université de Rouen</a>, chargé de l’édition à La Pléiade. Cette vogue féministe ne touche que peu la recherche universitaire. C’est très différent dans les pays anglo-saxons, où ses travaux sont étudiés comme ceux d’une philosophe.»</p><p>À titre d’exemple, il sort aussitôt de sa bibliothèque un imposant et récent <i><a href=\"https://link.jianshu.com?t=https%3A%2F%2Fwww.wiley.com%2Fen-us%2FA%2BCompanion%2Bto%2BSimone%2Bde%2BBeauvoir-p-9781118796023\" target=\"_blank\" rel=\"nofollow\">A Companion to Simone de Beauvoir</a></i>, publié aux éditions Wiley. «Aux États-Unis, elle est l'un des auteurs les plus étudiés à l’heure actuelle, avec nombre de thèses et articles.»</p><p>Ses écrits sont questionnés avec ceux de «Sartre et d’Hegel, mais aussi de <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FMaurice_Merleau-Ponty\" target=\"_blank\" rel=\"nofollow\">Merleau-Ponty</a>, Lévi-Strauss, Lacan…». On rapproche même «la question de la maternité, qui est polémique chez elle, de celle du consentement et du viol chez Foucault, avec qui elle a pourtant peu à voir».</p><p>En France, en revanche, son rapport à Sartre lui a imposé, écrit-elle, d'«être secondaire», ce qu'elle a «accepté». Outre Atlantique, c’est presque Sartre qui serait le mec de Beauvoir.</p><p>Simone de Beauvoir et Jean-Paul Sartre sur la plage de Copacabana à Rio (Brésil), le 21 septembre 1960 | STF / AFP</p><p>«On a longtemps vu Simone de Beauvoir sous influence de Sartre, poursuit Jean-Louis Jeannelle. Or, et les féministes anglo-saxonnes l’ont très bien montré, elle infléchit la pensée de Sartre quand elle pose ainsi la question de l’existentialisme: qu’est-ce qu’une femme? Cela permet d’incarner un existentialisme jusqu’alors très désincarné, comme dans <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FL%27%25C3%258Atre_et_le_N%25C3%25A9ant\" target=\"_blank\" rel=\"nofollow\">L’Être et le Néant</a>. Elle invente une autre forme de philosophie, qui s’ancre dans la vie ordinaire –même si elle ne se reconnaît pas comme philosophe, préférant dire qu’elle fait de la philosophie.»</p><p>Une mémorialiste égarée aux pays des hommes</p><p>Mais elle est d’abord écrivaine, animée très tôt par ce désir. «Le fait est que je suis écrivain: une femme écrivain, ce n'est pas une femme d'intérieur qui écrit, mais quelqu'un dont toute l'existence est commandée par l'écriture», déclare-t-elle dans La Force des choses, soulignant ainsi la volonté de dépasser le simple récit de soi. </p><p>Au XXe siècle, les femmes sont plutôt «reléguées au genre autobiographique», analyse Jean-Louis Jeannelle. Elle s’en écarte en toute conscience et, dans sa continuité, écrit un cycle de Mémoires «sans équivalent».</p><p>Il s’agit, «des années 1930 à 1970, d’écrire une histoire vivante, de manière très incarnée», avec un statut de témoin engagé –ce qui semblait alors réservé aux acteurs politiques ou militaires (Malraux, De Gaulle...). Des hommes donc, alors que dans ce genre s’était autrefois illustrées <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FHistoire_de_ma_vie_%28George_Sand%29\" target=\"_blank\" rel=\"nofollow\">George Sand</a> (Histoire de ma vie), <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fjournals.openedition.org%2Fitineraires%2F1599\" target=\"_blank\" rel=\"nofollow\">Manon Roland</a>, <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fgallica.bnf.fr%2Fark%3A%2F12148%2Fbpt6k58185042.texteImage\" target=\"_blank\" rel=\"nofollow\">Germaine de Staël</a>, Marguerite de Valois… «À cette époque, on n’attend pas d’une femme qu’elle écrive ses mémoires.»</p><p>Nous voulons voir les écrits des femmes sous l'angle de l'intime</p><p>Dans son cas, c’est d’autant plus inattendu qu’elle est «en milieu de carrière», et qu'elle refuse la facilité des écrits intimes. «Ce n’est pas son projet. D’une part, c’est nous, aujourd’hui, qui sommes obsédés par l’intimité. De l’autre, nous voulons voir les écrits des femmes sous cet angle-là.»</p><p>Ainsi s’explique une forme de «froideur lorsqu’elle parle de sa vie. Un constat clinique, pas du tout habituel au regard d’autres écrivaines du siècle: Colette, qui traduit l’enchantement par la virtuosité stylistique, ou Yourcenar –qui ne parle jamais d’elle». Elle ouvre la voie à d’autres, comme <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FCamille_Laurens_%28%25C3%25A9crivain%29\" target=\"_blank\" rel=\"nofollow\">Camille Laurens</a> ou <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FAnnie_Ernaux\" target=\"_blank\" rel=\"nofollow\">Annie Ernaux</a>, parce qu’il n’y a plus «besoin de trafiquer son existence».</p><p>«Elle s’oblige à ne pas tout dire pour respecter l’intimité de personnes encore vivantes. Elle a effectivement caché ses amours lesbiennes.»</p><p>Jean-Louis Jeannelle, professeur de littérature, chargé de l’édition des Mémoires à La Pléiade</p><p>Bien sûr, elle «oublie» ou minimise certains épisodes, passant sous silence «les relations amoureuses qu’elle noua avec certaines de ses anciennes élèves (Olga, Bianca et Nathalie / “Lise”)», que ses lettres et son journal n’omettent pas.</p><p>Outre que cela «simplifie» le couple formé avec Sartre, «elle s’oblige à ne pas tout dire pour respecter l’intimité de personnes encore vivantes. Elle a effectivement caché ses amours lesbiennes», ce que beaucoup de féministes lui ont reproché. «Un courant lesbien se sent abandonné. En fait, pour elle, je crois que cela n’a pas été important. C’est un phénomène de génération: on en parle peu. C’est très différent chez <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FViolette_Leduc\" target=\"_blank\" rel=\"nofollow\">Violette Leduc</a>, où la sexualité est un projet d’écriture –ce qui n’est pas le cas chez Beauvoir.»</p><p>Multiples Mémoires </p><p>Comme il y a plusieurs Simone de Beauvoir, il existe plusieurs lectures de ses Mémoires. La plus fréquentée est celle qui mène à Sartre, comme source directe de sa vie.</p><p>La plus inattendue est celle de l’enthousiasme sans cesse renouvelé pour les voyages, relatés dans le détail.</p><p>La plus rare est celle de l’humour, l’écrivaine étant plutôt froide, malgré quelques saillies –«Je me suis assise à la terrasse d’un café, au coin de l’avenue d’Orléans. Le Figaro critiquait la manifestation. L’Humanité annonçait 500.000 manifestants, ce qui m’a déçue parce que je croyais qu’on était vraiment500.000»– ou souvenirs potaches –«Le tombeau de Chateaubriand nous sembla si ridiculement pompeux dans sa fausse simplicité que, pour marquer son mépris, Sartre pissa dessus». François Mauriac s’indigna de la «miction sartrienne», annonce d’une ère nouvelle, «celle du crachat ou du pipi sur les tombes illustres» –il n’avait pas tort.</p><p>La plus émouvante, bien qu’elle retienne sa plume, est celle de la femme éprise, qui caresse un rêve avec <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FNelson_Algren\" target=\"_blank\" rel=\"nofollow\">Nelson Algren</a>, retrouve un corps et une jeunesse avec Claude Lanzmann, de dix-sept ans son cadet, alors qu’elle craint déjà de rejoindre le monde des «vieilles peaux». La vieillesse est chez elle une obsession: «J'en avais quarante-quatre, j'étais reléguée au pays des ombres»; avec lui, elle a «retrouvé [son] corps [...]. Il revint à Paris deux semaines après moi et nos corps se retrouvèrent dans la joie.» Comme une liberté gagnée sur le «déclin»: «La présence de Lanzmann auprès de moi me délivra de mon âge.»</p><p></p><p>Simone de Beauvoir, Jean-Paul Sartre et Claude Lanzmann à Gizeh (Égypte), le 4 mars 1967 | AFP</p><p>Écrire l’histoire immédiate</p><p>Reste une lecture, ardue, contradictoire, agaçante et stimulante, celle de l’engagement politique d’une femme «éparpillée aux quatre coins de la terre». Car nous avons le recul que procure la connaissance des événements qu’elle relate, et il est aisé de lister les oublis et les erreurs de jugement. Aisé mais peu honnête, ce récit du siècle étant écrit dans une presque immédiateté. En cela, déjà, l’engagement s’impose, et les combats avec.</p><p>Mais l’intellectuelle qu’elle est s’efforce de ne rien omettre, puisant dans une documentation abondante, lisant beaucoup, prenant des notes, faisant preuve d’une remarquable rigueur. «C’est stupéfiant: il n’y a presque aucune erreur de dates ou de noms!», s’exclame Jean-Louis Jeannelle, pour qui l’index de La Pléiade est devenu un «cauchemar» tant il est fourni. Écrire l’histoire immédiate est aussi «une forme de courage; elle sait qu’elle peut se tromper».</p><p>Le communisme sans les communistes?</p><p>Avec le prisme de l’histoire s'impose l’aveuglement d’une génération d’intellectuelles et intellectuels, fascinés par le communisme et prêts à tout lui pardonner. Une myopie consentante lorsque le rêve se heurte à la réalité.</p><p>Il est des brièvetés qui disent une époque: le <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FViktor_Kravtchenko_%28transfuge%29\" target=\"_blank\" rel=\"nofollow\">procès Kravtchenko</a> est à peine abordé, mais «l’existence des camps de travail» est désormais avérée. «Nous commençâmes à nous demander si l’URSS et les démocraties populaires méritaient d’être appelées des pays socialistes.»</p><p>Lors d’une visite à Prague, en 1954, elle note scrupuleusement, mais sans les analyser, quelques témoignages: «Nous passâmes devant une immense statue de Staline; prévenant tout commentaire, une jeune femme dit sèchement: “Non, elle nous plaît pas du tout”.» «Comme nous visitions une bibliothèque, un des administrateurs se trouva un instant seul avec nous; abruptement, il murmura: “il se passe des choses terribles, ici, en ce moment”.»</p><p>Deux ans après, elle vit, hébétée, l’écrasement de <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.slate.fr%2Fstory%2F160525%2FTurkish\" target=\"_blank\" rel=\"nofollow\">l’insurrection de Budapest</a>: «Quel choc le 24, quand achetant France soir à un kiosque de la piazza Colonna, nous lûmes le gros titre: “Révolution en Hongrie. L’armée soviétique et l’aviation attaquent les insurgés” [...]. Nous ressassions nerveusement les événements sans les comprendre.» </p><p>Compagnons de route, mais pas encartés au Parti communiste, elle et Sartre mesurent alors le poids de la propagande. «La presse communiste s’entêta dans le mensonge; <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fmaitron-en-ligne.univ-paris1.fr%2Fspip.php%3Farticle172107\" target=\"_blank\" rel=\"nofollow\">le “Sourire de Budapest” d’André Stil</a> resta en travers de bien des gorges.» Il s'agira de continuer à défendre l'idéal, en faisant abstraction des hommes.</p><p>La «décourageante platitude» du Petit livre rouge</p><p>Pourtant, elle manifeste parfois un refus de voir qui devient une dangereuse désinvolture. N’écrit-elle pas dans La Force des Choses (1963), à propos de la Chine qu’elle est «le seul grand pays sous-développé qui ait triomphé de la faim?», ignorant ainsi le <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FGrand_Bond_en_avant\" target=\"_blank\" rel=\"nofollow\">Grand Bond en avant</a> de 1958, famine organisée ayant causé au moins vingt millions de morts.</p><p>Plus tard, elle avouera son désarroi face à la Chine de Mao. «Lorsque a éclaté la “révolution culturelle”, personne n’a pu nous expliquer de façon convaincante ce que recouvraient ces mots.» Les informations qu’on lui donne sont «décousues et contradictoires»; les gens en reviennent «abasourdis».</p><p>Elle livre en vrac des témoignages, et avoue en toute simplicité que Le Petit livre rouge lui est «tombé des mains. Sans doute les citations qui le remplissent amorçaient-elles un développement qui a été supprimé: restent des vérités premières d’une décourageante platitude». Si elle adhère aux objectifs de «“l’homme nouveau”, proche de celui dont Marx espérait l’avènement», elle reste prudente: «Je ne saurais accorder à la Chine cette confiance aveugle que jadis l’URSS a suscitée dans tant de cœurs.»</p><p>Elle n’a sans doute pas lu <i><a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FLes_Habits_neufs_du_pr%25C3%25A9sident_Mao\" target=\"_blank\" rel=\"nofollow\">Les Habits neufs du président Mao</a></i> (1971) –Simon Leys n’est pas cité– mais elle ne succombe pas dans le culte de la personnalité, où une partie de la gauche, <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fjournals.openedition.org%2Ftranstexts%2F436\" target=\"_blank\" rel=\"nofollow\">du côté de Tel Quel</a>, sombra.</p><p>La guerre d’Algérie, exil intérieur</p><p>Cette myopie, qui touche toute une génération, est d’autant plus frappante que Simone de Beauvoir a fait preuve d’une entière et immédiate lucidité en choisissant de mener le juste combat de l’anticolonialisme.</p><p>Elle ressent la guerre d’Algérie «avec ses tripes», véritable prise de conscience de l’histoire, qu’elle vivait jusqu’alors de manière détachée. Elle se sent coupable, se voit comme une collaboratrice, constate avec amertume l’indifférence de ses compatriotes: «Nous avions d’abord détesté quelques hommes et quelques factions: il nous a fallu peu à peu constater la complicité de tous nos compatriotes et dans notre propre pays, notre exil.»</p><p>«Ces gens dans les rues, consentants ou étourdis, c’était des bourreaux d’Arabes: tous coupables. Et moi aussi. “Je suis française.” Ces mots m’écorchaient la gorge comme l’aveu d’une tare.»</p><p>Simone de Beauvoir</p><p>Rien ne manque, des discussions avec des inconnus –notamment un chauffeur de taxi– qui la révoltent aux procès bidonnés –elle s’engage personnellement dans la <a href=\"https://link.jianshu.com?t=https%3A%2F%2Ffr.wikipedia.org%2Fwiki%2FDjamila_Boupacha%23Attentat_et_arrestation\" target=\"_blank\" rel=\"nofollow\">défense de Djamila Boupacha</a>, militante du FLN violée et torturée, en passant par les articles et les manifestations, sans oublier <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fexpositions.bnf.fr%2Fsartre%2Freperes%2Find_chrono.htm\" target=\"_blank\" rel=\"nofollow\">l’attentat au plastic contre l’appartement de Sartre</a> au 42 rue Bonaparte.</p><p>Mais tout se concentre sur la vision, obsédante, écœurante, permanente, de la répression et de la torture. Une béance qui la renvoie au nazisme, lui fait haïr la France et éprouver –ce n’est pas neutre dans un pays en guerre– la honte d’être française. «Je ne supportais plus cette hypocrisie, cette indifférence, ce pays, ma propre peau. Ces gens dans les rues, consentants ou étourdis, c’était des bourreaux d’Arabes: tous coupables. Et moi aussi. “Je suis française.” Ces mots m’écorchaient la gorge comme l’aveu d’une tare. Pour des millions d’hommes et de femmes, de vieillards et d’enfants, j’étais la sœur des tortionnaires, des incendiaires, des ratisseurs, des égorgeurs, des affameurs; je méritais leur haine puisque je pouvais dormir, écrire, profiter d’une promenade ou d’un livre.»</p><p>Socialisme et misogynie</p><p>Enfin, engagement ultime, engagement de toute une vie, celui qui lui vaut son actualité, la voici qui soutient pleinement la cause féministe dans les années 1970. L’affaire Boupacha, pour laquelle elle a été sollicitée par Gisèle Halimi, revêtait déjà par bien des aspects la forme d’un combat féministe. </p><p>Elle a compris de longue date que le socialisme et les combats sociaux ne servent guère la lutte des femmes. «Les femmes ont constaté que les mouvements de gauche et le socialisme n’ont pas résolu leurs problèmes. Changer les rapports de production ne suffit pas à transformer les relations des individus entre eux et en particulier dans aucun pays socialiste la femme n’est devenue l’égale de l’homme. Beaucoup de militantes de <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FWomen%27s_liberation_movement\" target=\"_blank\" rel=\"nofollow\">Women's Lib</a> ou du MLF français en ont fait personnellement l’expérience: dans les groupes les plus authentiquement révolutionnaires, la femme est cantonnée dans les tâches les plus ingrates et tous les leaders sont des mâles. Quand à Vincennes une poignée de femmes a levé l’étendard de la révolte, des gauchistes ont envahi la salle en criant: “Le pouvoir est au bout du phallus.” Les Américaines ont fait des expériences analogues.»</p><p>Autant elle et Sartre passent à côté de Mai 68 –question de génération, sans doute, autant elle est pleinement engagée dans ce nouveau combat, qui surgit presque aussitôt après. Elle est âgée mais pas lassée; sa combativité est intacte.</p><p>Elle signe le <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fwww.nouvelobs.com%2Fsociete%2F20071127.OBS7018%2Fle-manifeste-des-343-salopes-paru-dans-le-nouvel-obs-en-1971.html\" target=\"_blank\" rel=\"nofollow\">manifeste des 343 salopes</a>, défile avec le MLF. Elle qui a écrit LeDeuxième Sexe lorsque le féminisme apparaissait comme «un combat dépassé, ridicule» accepte «qu’on utilise sa notoriété pour la cause», analyse Jean-Louis Jeannelle. En 1949, elle avait «recréé le féminisme politique, mais sans avoir conscience de l’impact» durable de ce livre, par-delà la <a href=\"https://link.jianshu.com?t=http%3A%2F%2Fm.lesechos.fr%2Fredirect_article.php%3Fid%3D021837071658\" target=\"_blank\" rel=\"nofollow\">véhémence des réactions qu’il suscita</a>.</p><p>«Je savais à présent que le cours du monde est la texture même de ma propre vie»</p><p>La singularité de ces Mémoires, véritable colonne vertébrale de son œuvre, réside sans doute dans la force de l'engagement et la capacité à transformer le «je» de la narratrice en «nous» d'une génération, comme l'attestent les mots de François Mauriac: «Cet adversaire qui n’écrit mon nom qu’avec hostilité ou mépris, et dont presque toutes les options s’opposent avec violence aux miennes, rien ne peut faire que son histoire ne soit pas mon histoire: revenir à ses souvenirs, c’est revenir aux miens.»</p><p>Aujourd'hui, la déconfiture du rêve communiste rend moins prégnant l'engagement des compagnons de route. Mais qu'il s'agisse de la guerre d'Algérie, aux cicatrices mal refermées, ou du féminisme, renouvelé et parfois divisé, sa parole forte éclaire encore nos discussions. C'est la force d'une philosophe, d'une écrivaine, d'une mémorialiste –toutes ces femmes de lettres que fut Simone de Beauvoir. </p>",
      "id": "61xto8vshjk0",
      "author": "思嘉丽Scarlett",
      "title": "Les «Mémoires» de Simone de Beauvoir, journal intime de son temps"
    },
    {
      "content": "<h2>El Resumen del Autor:<br>\n</h2><p>Qian Zuoyang, nombre original Qian Yi. Novelista, poeta, guionista, ha estudiado en Singapur, Japón, etc. Es miembro de la Asociación de Escritores de Shanghai, miembro de la Sociedad de Poesía de Shanghai, miembro de la Asociación de Comentaristas de Shanghai, miembro de la Sociedad de Literatura Musical de Shanghai, miembro de la Asociación de Música de China, etc. Ha estudiado en el Instituto de Comunicaciones del Ejército de Liberación y La Academia de Teatro de Shanghai. Ha servido como encargado ejecutivo en un hotel subordinado al ayuntamiento municipal. Anteriormente se dedicaba principalmente a la creación de poesías, óperas y dramas. Sus obras han participado en el festival artístico de CCTV. Ha sido uno de los 20 autores finalistas del ¨Himno de la Expo¨. Actualmente ya tiene varios poemarios publicados. Ha publicado novelas como ¨La metamorfosis¨, ¨La cara fea¨, ¨La mujer fatal¨,etc. Ha puesto en escena teatros como ¨¿Quién ha robado mi Corazón?¨,¨El labio del burro y la boca del caballo¨, ¨LaoYu compra pescado¨,¨Madre picante, madre dulce, madre amarga¨, etc. Ahora reside en Shanghai.</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 576px; background-color: transparent;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 60.0%;\"></div>\n<div class=\"image-view\" data-width=\"960\" data-height=\"576\"><img data-original-src=\"//upload-images.jianshu.io/upload_images/5173984-f692001cf433abc2.jpeg\" data-original-width=\"960\" data-original-height=\"576\" data-original-format=\"image/jpeg\" data-original-filesize=\"48763\" class data-image-index=\"0\" style=\"cursor: zoom-in;\" src=\"//upload-images.jianshu.io/upload_images/5173984-f692001cf433abc2.jpeg?imageMogr2/auto-orient/strip|imageView2/2/w/960/format/webp\"></div>\n</div>\n<div class=\"image-caption\"></div>\n</div><p>（TEXTO)</p><h2>           Parte I / 上部<br>\n</h2><h2>      1. REENCUENTRO / 重逢</h2><p>Pensándolo bien, había sido todavía la idea de mi prometida Yin Zhu el venir yo esta vez a Estados Unidos por trabajo yendo de un sitio a otro.</p><p>La tarea asignada por la editorial sólo me había ocupado un día, y la mayoría del tiempo la había usado para hacer el turismo. Estados Unidos es un lugar libre, así son más sus periodistas. Ellos pueden estar tan haraposos destacando la dureza como bien trajeados enseñando la elegancia. En cambio, nosotros, esta gente quien había venido en trajes fuera de temporada, éramos extremadamente rígidos en el fondo. Hablando de este juego de traje mío, con motivo de ir al extranjero, ¡la entidad y la agencia de viajes habían pedido customizarse 20 juegos a una compañía de ropa! La cuestión clave está en estos dos caracteres ¨DING ZHI (la customización)¨. No le hacía falta tomar medidas a tu altura, cuerpo, y confeccionaron una partida como para terminar una tarea. Además, nuestras camisas, corbatas y cinturones todos los decidió el jefe. Los caballeros nos habíamos puesto uniformemente corbata roja. Era obviamente paletísima, pero el jefe dijo que aquélla representaría algo jubiloso. ¿Tú dime si es deprimente o no?</p><p>Esta gran habitación donde yo vivía estaba en la 4ª planta de este hotel. El no. en la tarjeta de habitación era 2046. Esto me recordaba aquella película ¨2046¨ de Wong Kar-wai. Al anochecer, todas las escaleras, pasillos y ascensores de aquí se extendían como un caleidoscopio, muy similar al ambiente en esa película: retro, excéntrico, refinado, y llevaba también un poco de gusto decadente. Realmente todavía había otro hombre quien compartía habitación conmigo. Él hacía visitas junto con todo el mundo de día, no decía ni una palabra. Pero al llegar las noches, mejor dicho después de cenar, este caballero se convertía como si fuera otro, no volvía durante toda la noche. Él decía que se iba a acompañar a familiares lejanos que vivían aquí. Pero según esta conducta suya de que siempre tenía que gastar mucho tiempo para ponerse guapo y perfumarse antes de marchar, parecía más bien que iba a reunirse con alguna mujer.</p><p>En las noches de este hotel, siempre habían mujeres en Qipao que entraban en mis sueños cada noche. Parecían nubes, nieblas y vientos, iguales que aquellas mujeres encantadoras que salen en la película ¨2046¨.</p><p>Había recaído en las hemorroides al día siguiente de llegar a Estados Unidos . Para ir a la compañía Microsoft aquella mañana, estaba sentado en este wáter del lujoso hotel de 5 estrellas, ¡deshaciéndome en suspiros mientras miraba abajo una tina de agua con sangre! Había abajo un autobús que me apresuraba cada 5 minutos. Lo catastrófico era cuanto más urgían peor me salía. ¡Después tenía mi parte abajo chorreando de sangre y el ano reventado!</p><p>Menos mal, luego no salía la silueta de Bill Gates en las fotos sacadas y traídas por los demás, pues así me he podido consolar un poquito.</p><p>Mi Yin Zhu me había encargado dos cosas antes de partir: Una era traer un tapiz de lana, hecho en Brasil. Sería ideal para decorar nuestra futura casa matrimonial. Dos era traerle un par de sacaleches. Esto parecía realmente dos tests de inteligencia que me había hecho YinZhu: me había examinado no sólo el coeficiente intelectual (CI) sino también la inteligencia emocional (IE). Así que, nada más pisar la tierra de EE.UU., mi cerebro ya había estado atiborrado por estos dos objetos molestos.</p><p>El entusiasmo de todo el mundo había llegado a la cumbre al llegar a Los Angeles. Porque el famoso Hollywood estaba cerca. Pero nuestro autobús no quería parar en todo rato. Aquel vehículo corría de acá para allá a lo largo de la avenida de las estrellas como si estuviera cargado de una pandilla de fugitivos. Pues estaba perplejo, y fui corriendo para preguntar a la guía.</p><p>-¿Sabes? ¡He soñado aquí incluso!-</p><p>Todo esto lo sabemos. Dijo la guía.</p><p>-¿Y así todavía no paráis y dejarnos a besar esas gigantes huellas de pies de las estrellas?-</p><p>La guía dijo, - ¡aquí las cosas son caras! No merece la pena dejar que los guiris os peguen el palo.-</p><p>Luego empecé con los movimientos peligrosos en el autobús en marcha. Usaba un ojo para sacar fotos, y otro ojo para mantenerme el equilibrio. A mi enésima ida y vuelta, la manga de mi traje se desgarró por algún tirador del asiento accidentalmente. Todo el mundo, al ver surgir de repente la manga blanca de mi camisa, no sólo se complacían en mi desgracia, todavía se reían a escondidas girando su cabeza uno tras otro.</p><p>Esa guía era mi compañera de instituto, se llamaba Gao Jin. Era realmente cierto que la mujer experimentaba numerosos cambios cuando crecía, la compañera nada atractiva en esos años, ahora era tan erguida y graciosa como una estatua de jade, tenía un temperamento sobresaliente, y delante de ella, no podías evitar echarle unas miradas más.</p><p>Llegamos a Las Vegas de noche, la ciudad del juego, surgió en el horizonte un toque de dorado. Toda la gente del grupo estaba con sueño insuficiente, pero también parecían hiperactivos. Unos caballeros habían invitado a Gao Jin, dijeron que querían que ella les acompañara a dar una vuelta por la ciudad del juego, a cambio de una generosa propina extra. Gao Jin lo rechazó. Ella no estaba nada interesada del juego, en este punto era igual que yo. Ella sólo quería estar conmigo, dijo que quería hablar de los viejos tiempos.</p><p>Estábamos sentados en la parte trasera del autobús, los asientos de allí eran vacíos y amplios. Los sofás olían a un tipo de piel, que presentaba aún más la comodidad del hogar. Este punto era muy importante. Ese chófer de ascendencia india y contratado por la parte norteamericana, enchufó el aire amablemente al enterarse de que habíamos sido antiguos compañeros de clase en la época de la escuela secundaria, pero él mismo se bajó del coche para eludir la situación.</p><p>Gao Jin trajo hilo y aguja, dijo que quería ayudarme a coser esa manga de traje descosida. Estaba un poco dudoso, primero la veía con una mirada escéptica. Y ella, sin decir nada, arrebató la ropa de entre mis brazos directamente.</p><p>La Gao Jin ya casada, seguía teniendo un carácter tan activo y alegre, no tenía pelos en la lengua. Preguntó: -¿Qué te ha pasado?, todavía no te casas, mi hijos ya tienen 8 años.- Encendió el móvil para enseñarme su foto de familia mientras cosía. En la foto habían cuatro personas. Dos mayores, dos niños. Sin embargo, sólo Gao Jin tenía una cara asiática. Hablando con tapujos, se me iba acumulando gradualmente un poco de gargajo en la garganta. Había chachareado algo de carrera,etc., para responder evasivamente el motivo de casarme tarde. En los tiempos del instituto. En el período de la escuela secundaria, era definitivamente un chaval guapo en la clase, sacaba también unas notas sobresalientes. En aquellos tiempos, muchas compañeras de la clase me habían mostrado su adoración, me acordaba de que, Gao Jin era una de ellas. Pues iniciamos nuestro tema de conversación desde esa carta de amor que me había escrito en su momento.</p><p>- Por entonces te había escrito una carta, ¿ por qué no has contestado?- Se bajaba la velocidad de coser la ropa mientras preguntaba.</p><p>- Los estudios eran lo primero. - Me tragué el gargajo de la garganta, y seguía haciéndome sublime.</p><p>- Excusa, todo el mundo estaba estudiando. - Me replicó.</p><p>- Pensaba que seguramente estabas de broma, entonces tampoco pasaría nada sin contestarte. -  Había mentido otra vez.</p><p>- ¡Disparates! Habías contestado la carta de Xiao LiLi, ¡ella nos la enseñó y todo!- Esta vez ella me desmintió directamente. En ese momento, Xiao LiLi era comisaria de literatura y arte en nuestra clase, muy acogida por los chicos. Al ver me callado, Gao Jin venía a empujarme con las manos, para que contestara cómo había estado pensando en aquel entonces.</p><p>La luz dentro del coche se iba oscureciendo aún más, su par de pupilas estaban a una distancia no muy lejana de mí como si fueran ojos de gato, lejos y cerca alternativamente. Poco después, terminó de coser las mangas, rompió el hilo con los dientes, y me dio el traje. Cuando me lo puse otra vez, ella dijo que me daría 5 minutos para pensar para publicar después mis pensamientos verdaderos en esos años.</p><p>Quería reírme un poco por dentro viendo su gesto de inventar líos de la nada. En ese instante, ella sacó otra vez una cosa de la mochila - ¿ Sacaleches?- Exclamé, y lo cogí enseguida. Lo embarazoso para mí era que en el diseño del embalaje estaba el pecho de una mujer. Empecé a percibir un hálito del jabón Doven que se extendía de su cuerpo.</p><p>-¿Porque era fea?- Por fin soltó lo que quería preguntar al erguirse el pecho. Y en cambio, me di cuenta de que aquel pecho elevado de ella estaba a una distancia de sólo un puño de mi brazo. Efectivamente, la Gao Jin de entonces estaba pálida y flaca, realmente no se podía comparar con la de ahora. ¿Pero por qué había tanta diferencia entre las dos? No podía razonar enseguida.</p><p>- Según mi investigación, había en total 9 compañeras de la clase que te habían escrito cartas de ese tipo, sin embargo, sólo habías contestado a una de ellas, y esa persona era Xiao LiLi, ¿sí o no? - , dijo ella.</p><p>Me había enterado de que el marido actual de Gao Jin era un alemán, incluso era bastante rico. La mayoría de sus operaciones turísticas la gestionaba su marido por detrás. He mirado de paso el precio de ese sacabuches, ¡ inesperadamente era una cifra sorprendente! Gao Jin seguramente percibió mis pensamientos, y dijo,- esa cifra es un poco exagerado, no lo creas demasiado. -  y con un boli, corrigió y tachó un poco en ese recibo, cambiando la cifra por otra. En el entretanto mi brazo había tocado casualmente su cintura y cadera varias veces, y ella ya había dejado de esquivarse.</p><p>- ¿Se te ha curado la hemorroide?- De repente, otra vez me había hecho una pregunta muy inconfesable.</p><p>Me quedé un tiempo embarazoso, y le hice una interrogación retórica: - ¿Tú por qué sabes?- Ella se rió diciendo: - De cada diez hombres hay nueve tiene hemorroide, lo debo de saber. -  Mientras tanto, sacó de su bolso una caja de pomada refinamente envasada y me la pasó, - La otra vez cuando fuimos a Microsoft, todo el mundo en el bus te estaba esperando abajo, no bajaste. ¿Todavía te atreves a decirme que ha sido por dolor de barriga?-</p><p>Dicho esto, se puso a reír con las manos sosteniendo la cara: - ¿Hace falta medio día para hacer caga?-</p><p>Al escucharlo, empecé a reírme involuntariamente. Mis risas eran puramente tontas.</p><p>Al ver que mi mirada, o se desplazaba encima de ella, o se perdía observando esa cajita, ella me golpeó la mano ligeramente con la suya, como una información: - Esta pomada es alemana, mi chico también la usa, tiene muy buen efecto.- Me aterrorizó un poco, entonces ya entendí, su marido también tenía la misma hemorroide como yo. ¿Qué más podía decir? Después, habíamos cambiado de asiento. Ella se había sentado en mi siento, y yo en el suyo. Yo sentía mucho calor en el sitio donde ella se había sentado, un bochorno se estaba subiendo. ¡Presumía que en este momento mi asiento de antes también debería de estar quemando!</p><p>Menos mal, enseguida cambié de tema. - Mira, menos mal no te he respondido a tiempo la carta, mira qué bien vives ahora, casada con un guiri, también tienes pasta, para ti salir al extranjero es como visitar a los vecinos. - Inesperadamente，nada más terminar mi palabra, la sonrisa en su cara desapareció, esa cara se escondió enseguida en una sombra.</p><p>Ella dijo: - Se puede pasar muchas cosas estando casada con un guiri. Por ejemplo, es como este conjunto de ropa que llevo, entallado o no, depende de los comentarios que da la gente ajena, cómodo o no, sólo lo sabe una misma. - Al terminar esta palabra, sin esperar mi reacción, volvió al tema anterior rápidamente, - En aquel entonces, ¿sabes cómo te llamábamos?-</p><p>Me hacía el tonto moviendo la cabeza. - ¡El lobo del norte! - se irguió el pecho diciendo.</p><p>- ¿Pero yo no soy del norte? - Estaba confuso.</p><p>Ella me explicó, - te pareces mucho a gente de allí. Eres generoso, perteneces a la enorme planicie. ¿Sabes? ¡Te pareces sobre todo a un cantante! -</p><p>Evocando a mí mismo en su momento, tenía pelo largo, de apariencia fría, mis gestos se parecían precisamente a ese cínico cantante taiwanés Qi Qin.</p><p>Charlando de un incendio de aula sucedido en esos tiempos de graduación, de repente, ella me enseñó la cicatriz que se había dejado en su cuello. Aparté un mechón de pelo suyo siguiendo sus dedos y vi esa cicatriz todavía tan nítida y obvia, ¡se me estremeció el corazón sin querer! Porque ese fuego en el aula de esa vez fue encendido justamente por descuido de nosotros, unos alumnos que fumábamos. Toqué sin querer su pecho cuando ella me cogió la mano para tocar esa cicatriz. Estaba un poco desconcertado, pero ella dijo que no pasaba nada, y otra vez se empezó a burlar de mí: - Bueno Guan Wang, ¿a qué te pones tan colorado? ¡Antes tú no eras así de tímido! -</p><p>Esta palabra parecía cierto estímulo para mí. En este asiento tan estrecho, me quedaba rodeado de cierto hálito concupiscente de alrededor. En eso, el chófer hindú, tosiendo, volvió a subirse al bus, esto es cierto tipo de insinuación. Aquella gente quien no quería jugar dinero también apareció alrededor del coche. Yo sabía que en ese momento tenía la cara como una manzana roja. La gente nos miraba curiosamente, queriendo leer cierto contenido desde nuestros gestos innaturales. Jin Gao bajó primero del autobús cohibidamente. Y después, ella encontró dos botellas de ¨LA FUENTE NONGFU¨ (una marca china de agua mineral) al lado de las maletas y me lanzó una como si lanzara una granada de mano. La cogí, pero no bebí. Veía a ella acabando de cabo a rabo con una botella entera de agua. Su acción de beber agua era bastante refinada: Con el brazo en alto y el cuello hacia atrás. Así se fue corriendo esa botella de ¨FUENTE¨ a su corazón siguiendo esa curva encantadora de su cuerpo. No obstante, esa ¨FUENTE¨ llegó a mojar una gran parte de su ropa cuando fluía rápidamente hacia abajo, lo cual había destacado aún más la silueta de su busto.</p><p>Mientras estaba alterado y caprichoso por su comportamiento y modales, se corría la voz desde el Tour de que algunos se habían perdido.</p><p>Gao Jin estaba preguntando por la situación con el walkie-walkie. Poco después, unos policías con distintos tonos de piel acudieron en la patrulla, y la explicaron la verdad: Resultó que de entre los miembros de la delegación habían dos mujeres que discutieron con otros cuando jugaban en el ¨Atlantic City¨, y ¡habían sido secuestradas! El no poder irse a la hora estipulada, definitivamente afectaría las siguientes actividades. Esto es el mayor tabú para viajar. Efectivamente, pronto algunos miembros ya empezaron a gritar, - ¿cuándo nos vamos de este maldito sitio? -,  - ¡Vamos al parque de Yellowstone, vamos a Las Montañas Rocosas! - Pero menos mal, el esposo de Gao Jin no sólo tenía enchufe en las embajadas, sino también tenía contactos muy profundos en CIA (La Agencia Central de Inteligencia) y FBI (El Buró Federal de Investigaciones). Gao Jin no tardó mucho en encontrar a esas dos mujeres ricas que habían sufrido el ¨secuestro¨, y las rescató.</p><hr><p>Traductora: Yu Li (Mónica Li)</p><p>Resumen:</p><p>Mujer, nacida en Shanghai en 1986, máster de comercio internacional y literatura de la Universidad de Alicante de España. Ha estado viviendo en España y Occidente durante 7 años. Se dedica a la presentación y el intercambio cultural en el ámbito internacional.</p>",
      "id": "2u0fdyxv6rs0",
      "author": "李裕Monica",
      "title": "¨LA REINA DE LA NOCHE ¨ 《昙花》Parte I / 1（traducido por 李裕Mónica)"
    },
    {
      "content": "<p>Política de privacidad</p><p>Persecución de carreras respeta y protege la privacidad de todos los usuarios que utilizan el servicio. Con el fin de brindarle servicios más precisos y personalizados, Persecución de carreras utilizará y divulgará su información personal de acuerdo con esta Política de privacidad. Sin embargo, Persecución de carreras tratará esta información con un alto grado de diligencia y prudencia. Salvo que se indique lo contrario en esta Política de privacidad, Persecución de carreras no divulga ni proporciona esta información a terceros sin su permiso previo. Persecución de carreras actualizará esta Política de privacidad de vez en cuando. Al aceptar el Acuerdo de uso del servicio de Persecución de carreras, se considera que ha aceptado todo el contenido de esta Política de privacidad. Esta Política de privacidad es una parte integral del Acuerdo de uso del servicio de Persecución de carreras.</p><p>1. Ámbito de aplicación</p><p>a) Información de registro personal requerida por Persecución de carreras cuando se registra para la cuenta de Persecución de carreras;</p><p>b) Cuando utiliza el servicio web Persecución de carreras o visita la página web de la plataforma Persecución de carreras, Persecución de carreras recibe y registra automáticamente información en su navegador y computadora, incluyendo, entre otros, el suyo Datos tales como dirección IP, tipo de navegador, idioma utilizado, fecha y hora de acceso, información de funciones de hardware y software, y registros de páginas web que necesita;</p><p>c) Datos personales del usuario obtenidos por Persecución de carreras de un socio comercial a través de medios legales.</p><p>Usted comprende y acepta que la siguiente información no se aplica a esta Política de privacidad:</p><p>a) información de palabras clave que ingresa cuando utiliza el servicio de búsqueda proporcionado por la plataforma Persecución de carreras;</p><p>b) Información relevante sobre su información publicada en Persecución de carreras, incluidas, entre otras, actividades de participación, información de transacciones y detalles de evaluación;</p><p>c) Violación de la ley o violación de las reglas de Persecución de carreras y las medidas que Persecución de carreras haya tomado en su contra.</p><p>2. Uso de la información</p><p>a) \"Persecución de carreras\" no ofrece, vende, alquila, comparte o intercambia su información personal a ningún tercero no relacionado, a menos que tenga su permiso por adelantado, o el tercero y \"Persecución de carreras\" (incluyendo \"Persecución de\" La empresa afiliada de carreras le brinda servicios de manera individual o colectiva, y después de que se termina el servicio, se le prohibirá el acceso a todos los materiales a los que anteriormente ha podido acceder.</p><p>b) \"Persecución de carreras\" tampoco permite que ningún tercero recopile, edite, venda o distribuya su información personal por ningún medio. Cualquier usuario de la plataforma Perceución de carreras que participe en las actividades anteriores, una vez descubierto, \"Persecución de carreras\" tiene derecho a rescindir inmediatamente el acuerdo de servicio con el usuario.</p><p>c) Con el fin de servir al Usuario, \"Persecución de carreras\" puede usar su información personal para proporcionarle información de su interés, que incluye, entre otros, enviarle información de productos y servicios, o cooperar con Persecución de carreras Los socios comparten información para poder enviarle información sobre sus productos y servicios (este último requiere su consentimiento previo).</p><p>3. Divulgación de información</p><p>En las siguientes circunstancias, \"Persecución de carreras\" divulgará su información personal en su totalidad o en parte de acuerdo con sus deseos personales o la ley:</p><p>a) divulgar a terceros con su consentimiento previo;</p><p>b) para proporcionar los productos y servicios que solicita, debe compartir su información personal con terceros;</p><p>c) divulgación a terceros o autoridades administrativas o judiciales de conformidad con las disposiciones pertinentes de la ley, o a solicitud de las autoridades administrativas o judiciales;</p><p>d) Si ha violado las leyes, los reglamentos chinos o el acuerdo de servicio de Persecución de carreras o las normas relacionadas, debe divulgarlo a terceros;</p><p>e) Si usted es un demandante calificado de propiedad intelectual y ha presentado una queja, debe divulgarse al demandado a solicitud del demandante para que ambas partes puedan manejar posibles disputas de derechos;</p><p>f) En una transacción creada en la plataforma Persecución de carreras, si alguna de las partes en la transacción realiza o cumple parcialmente sus obligaciones comerciales y solicita la divulgación, Persecución de carreras tiene el derecho de decidir ofrecer la contraparte a la contraparte. La información necesaria, como el método de contacto para facilitar la finalización de la transacción o la resolución de la disputa.</p><p>g) Otras divulgaciones que Persecución de carreras considere apropiadas de acuerdo con las leyes, reglamentos o políticas del sitio web.</p><p>4. Almacenamiento e intercambio de información.</p><p>La información y los materiales recopilados por Persecución de carreras se guardarán en los servidores de Persecución de carreras y / o sus filiales, que pueden enviarse a su país, región o Persecución de carreras. La información y los materiales se recopilan fuera del país y se accede a ellos, se almacenan y se muestran fuera del país.</p><p>5. Uso de cookies.</p><p>a) Si no se ha negado a aceptar cookies, Persecución de carreras establecerá o recuperará cookies en su computadora.</p><p>Para que pueda iniciar sesión o utilizar el servicio o la función de la plataforma Persecución de carreras que se basa en cookies. \"Persecución de carreras\" utiliza cookies para brindarle servicios más atentos y personalizados, incluidos servicios promocionales. b) Tiene derecho a elegir aceptar o rechazar aceptar cookies. Puede negarse a aceptar cookies modificando la configuración de su navegador. Sin embargo, si elige negarse a aceptar cookies, es posible que no pueda iniciar sesión o utilizar el servicio web o la función Persecución de carreras que se basa en cookies.</p><p>c) Esta política se aplicará a la información obtenida a través de las cookies establecidas por Persecución de carreras.</p><p>6. Seguridad de la información.</p><p>a) La cuenta de Persecución de carreras tiene protección de seguridad. Mantenga su nombre de usuario y contraseña seguros. \"Persecución de carreras\" se asegurará de que su información no se pierda, se use indebidamente ni se modifique mediante medidas de seguridad como el cifrado de contraseñas de usuario. A pesar de las medidas de seguridad mencionadas anteriormente, tenga en cuenta también que no existen \"medidas de seguridad perfectas\" en la red de información.</p><p>b) Al utilizar el servicio web Persecución de carreras para transacciones en línea, inevitablemente divulgará su información personal, como información de contacto o dirección postal, a la contraparte o posible contraparte. Proteja su información personal y proporciónela a otros solo cuando sea necesario. Si descubre que su información personal se ha visto comprometida, especialmente si se han filtrado el nombre de usuario y la contraseña de Persecución de carreras, comuníquese con el servicio al cliente de Persecución de carreras de inmediato, para que Persecución de carreras pueda tomar las medidas correspondientes.</p><p>Número de contacto: +852 26598468</p><p>Correo electrónico de contacto: Josephineflk@gmail.com</p>",
      "id": "ctil32foheg",
      "author": "1_52e2",
      "title": "Protección de la privacidad《Persecución de carreras》"
    },
    {
      "content": "<p>背景：今年开发或经手的小程序也有三个了，每个小程序之间都有一些相同的组件要写，虽然市面上有很多优秀的小程序组件库可以使用，但我更倾向于自己动手去开发这些组件。每次开发新的小程序总要翻出旧项目，将里面的组件拿出来，修修改改放在新项目里面继续使用。</p>\n<p>目的：将自己写过的一些小程序组件集中起来，并新写一些常用组件，统一整理成这个小程序UI库，方便以后再开发小程序时使用。目前还比较简陋，日后会慢慢补充。</p>\n<h2 class=\"heading\" data-id=\"heading-0\">De-ui</h2>\n<p></p><figure><img alt=\"logo.jpg\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/28/1675a39273e107c7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"120\" data-height=\"120\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"120\" height=\"120\"></svg>\"><figcaption></figcaption></figure>\n一个微信小程序UI库<p></p>\n<h3 class=\"heading\" data-id=\"heading-1\">预览：</h3>\n<p></p><figure><img alt=\"wx_code.jpg\" class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/28/1675a36fcca80eb2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"200\" data-height=\"200\" src=\"data:image/svg+xml;utf8,<?xml version=\"1.0\"?><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"200\" height=\"200\"></svg>\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-2\">项目地址：<a target=\"_blank\" href=\"https://github.com/hbxywdk/De-ui\" rel=\"nofollow noopener noreferrer\">github.com/hbxywdk/De-…</a> 欢迎Star</h4>\n<h3 class=\"heading\" data-id=\"heading-3\">使用：</h3>\n<h4 class=\"heading\" data-id=\"heading-4\">1、拉取代码</h4>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:hbxywdk/De-ui.git\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-5\">2、复制文件</h4>\n<p>复制assets、components、de-page文件夹以及app.wxss到项目根目录中</p>\n<h4 class=\"heading\" data-id=\"heading-6\">3、使用组件</h4>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">// json文件中引入对应组件\n{\n  <span class=\"hljs-string\">\"usingComponents\"</span>: {\n    <span class=\"hljs-string\">\"de-button\"</span>: <span class=\"hljs-string\">\"/components/de-button/de-button\"</span>\n  }\n}\n\n// wxml文件中使用\n<de-button <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">'success'</span> <span class=\"hljs-built_in\">bind</span>:click=<span class=\"hljs-string\">\"click\"</span>>成功</de-button>\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h4 class=\"heading\" data-id=\"heading-7\">4、使用操作结果页</h4>\n<p>app.json中引入de-page</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">{\n  <span class=\"hljs-string\">\"pages\"</span>: [\n    <span class=\"hljs-string\">\"de-page/de-msg-page/de-msg-page\"</span>\n  ]\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre><p>js跳转</p>\n<pre><code class=\"hljs bash copyable\" lang=\"bash\">wx.navigateTo({\n    url: <span class=\"hljs-string\">'/de-page/de-msg-page/de-msg-page?type=1&title=操作结果&firstTit=操作成功&secondTit=您的操作成功了&btnText=返回'</span>,\n})\n<span class=\"copy-code-btn\">复制代码</span></code></pre><h3 class=\"heading\" data-id=\"heading-8\">组件列表</h3>\n<ul>\n<li>\n<p>基础</p>\n<ul>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Button 按钮</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Icon 图标</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Flex 对齐方式</li>\n</ul>\n</li>\n<li>\n<p>布局</p>\n<ul>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Layout 栅格布局]</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Title 标题</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Label 标签</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> List 列表</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> FooterTabs 底部标签</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Line 分割线</li>\n</ul>\n</li>\n<li>\n<p>表单</p>\n<ul>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Input 输入框</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Switch 开关</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Radio 单选</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Checkbox 多选</li>\n</ul>\n</li>\n<li>\n<p>功能</p>\n<ul>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Search 搜索</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Progress 进度条</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> IndexSelector 索引选择器</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> SlideDel 滑动删除</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Range 滑块</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Filter 筛选器</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Scroller 滚动区域</li>\n</ul>\n</li>\n<li>\n<p>提示</p>\n<ul>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> TopNotice 顶部公告栏</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Alert 弹窗</li>\n</ul>\n</li>\n<li>\n<p>其他</p>\n<ul>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Loading 加载</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> MsgPage 页面提示</li>\n<li class=\"task-list-item\"><input checked disabled type=\"checkbox\"> Image 图片</li>\n</ul>\n</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-9\">未来要实现的组件</h3>\n<ul>\n<li>布局\n<ul>\n<li>宫格布局 Grid</li>\n<li>SwiperBoxs 滑动盒</li>\n</ul>\n</li>\n<li>功能\n<ul>\n<li>步骤条 Steps</li>\n<li>吸顶容器 Sticky</li>\n<li>顶部弹出提示 TopTips</li>\n<li>环形进度条 Circle</li>\n<li>倒计时 CountDown</li>\n<li>滚动公告 RollingBulletin</li>\n<li>轮播图的封装 Swiper</li>\n<li>迭代Filter 筛选器</li>\n</ul>\n</li>\n<li>提示\n<ul>\n<li>弹出式 Loading</li>\n<li>弹出式密码输入框 Password</li>\n<li>提示 Toast</li>\n</ul>\n</li>\n</ul>\n",
      "id": "40pnb4ts8o80",
      "author": "niaonao",
      "title": "De-ui 自己整理的一套微信小程序组件库"
    },
    {
      "content": "<p>本次给大家带来.NET Reactor学习系列.NET Reactor针对De4Dot脱壳工具的应对，需要的朋友可以收藏哦~</p><p> De4Dot是一个专门反混淆.NET程序的一个工具，支持对于以下工具混淆过的代码的清理：</p><ul><li>Agile.NET (aka CliSecure)</li><li>Babel.NET</li><li>CodeFort</li><li>CodeVeil</li><li>CodeWall</li><li>CryptoObfuscator</li><li>DeepSea Obfuscator</li><li>Dotfuscator</li><li>.NET Reactor</li><li>Eazfuscator.NET</li><li>Goliath.NET</li><li>ILProtector</li><li>MaxtoCode</li><li>MPRESS</li><li>Rummage</li><li>Skater.NET</li><li>SmartAssembly</li><li>Spices.Net</li><li>Xenocode</li></ul><p>        其中包括.NET Reactor，De4Dot执行很简单，只需用命令行cd到De4Dot所在目录，然后执行“de4dot 您程序的名称加文件类型名”  就会在同目录下生成一个以xxx-cleaned的文件，这就是反混淆过的文件。</p><p>      要想最大限度地防止De4Dot的反混淆，需要在.NET Reactor保护的时候勾选快速设置里的control flow obfuscation，level我选择最大的。这样保护的过程序，被反混淆后还是乱码般地存在。</p><p>                                  <a href=\"https://www.evget.com/product/2399/download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">下载.NET Reactor最新版试用>></a></p><p><br></p>",
      "id": "5ohrwonm2ow0",
      "author": "大猹子",
      "title": "强大的代码保护软件 .NET Reactor使用教程（四）：.NET Reactor针对De4Dot脱壳工具的应对"
    }
  ],
  "hotResList": [
    {
      "url": "https://juejin.im/post/5daeefc8e51d4524f007fb15",
      "k": "juejin",
      "id": "dznpvx6xlg0",
      "author": "张张-💫",
      "title": "JS 原生面经从初级到高级【近1.5W字】",
      "time": "6天前",
      "detail": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<blockquote>\n<p>是时候撸一波 JS 基础啦,撸熟了,银十速拿 offer;<br>\n本文不从传统的问答方式梳理,而是从知识维度梳理,以便形成知识网络;<br>\n包括函数,数组,对象,数据结构,算法,设计模式和 http.</p>\n</blockquote>\n<h1 class=\"heading\" data-id=\"heading-1\">1. 函数</h1>\n<h2 class=\"hea..."
    },
    {
      "url": "https://juejin.im/post/5dafb263f265da5b9b80244d",
      "k": "juejin",
      "id": "38xqu6ut4au0",
      "author": "荒山",
      "title": "web前端面试总结(自认为还算全面哈哈哈哈哈！！！）",
      "time": "4天前",
      "detail": "<h1 class=\"heading\" data-id=\"heading-0\">一、CSS问题</h1>\n<h4 class=\"heading\" data-id=\"heading-1\">1.flex布局</h4>\n<blockquote>\n<p>display:flex; 在父元素设置，子元素受弹性盒影响，默认排成一行，如果超出一行，按比例压缩\nflex:1; 子元素设置，设置子元素如何分配父元素的空间，flex:1,子元素宽度占满整个父元素align-items:center 定义子元素在父容..."
    },
    {
      "url": "https://juejin.im/post/5dadc6045188255a270a0f85",
      "k": "juejin",
      "id": "587ma86ypcg0",
      "author": "_Dreams",
      "title": "这可能是最通俗的 React Fiber(时间分片) 打开方式",
      "time": "7天前",
      "detail": "<p>写一篇关于 React Fiber 的文章， 这个 Flag 立了很久，这也是今年的目标之一。 最近的在掘金的文章获得很多关注和鼓励，给了我很多动力，所以下定决心好好把它写出来。 我会以最通俗的方式将它讲透, 因此这算是一篇科普式的文章。不管你是使用React、还是Vue，这里面的思想值得学习学习!</p>\n<br>\n<p></p><figure><img class=\"lazyload inited\" data-src=\"https://user-gold-cdn.xitu.io/201..."
    },
    {
      "url": "https://juejin.im/post/5dafc3df5188257a63539c64",
      "k": "juejin",
      "id": "46sq9xprubi0",
      "author": "第一名的小蝌蚪",
      "title": "移动端H5页面开发坑点指南",
      "time": "5天前",
      "detail": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>在平时的H5移动端开发时，我们难免会遇到各种各样的坑点，这篇文章就带着大家来看看怎么解决，文章较长，建议收藏方便以后查阅！</p>\n<h2 class=\"heading\" data-id=\"heading-1\">前方高能！</h2>\n<h3 class=\"heading\" data-id=\"heading-2\">canvas在retina屏模糊</h3>\n<p>只需要将画笔根据像素比缩放即可</..."
    },
    {
      "url": "https://juejin.im/post/5db5cf2e6fb9a02074738b25",
      "k": "juejin",
      "id": "5gtok2hezx80",
      "author": "西岚",
      "title": "小蝌蚪传记：200行代码实现前端无痕埋点",
      "time": "1天前",
      "detail": "<p>灰色的天</p>\n<p>妳的脸</p>\n<p>说分手的语气斩钉截铁</p>\n<p>小蝌蚪：“能不走吗”</p>\n<p>女神：“不能”</p>\n<p>小蝌蚪：“那个男人有什么好”</p>\n<p>女神：“他说话好听，长得帅，还有钱”</p>\n<p>小蝌蚪：“我没房没车没存款，但我有一颗爱妳的心”</p>\n<p>高富帅出现：“我有房有车有存款，我也有一颗爱她的心”</p>\n<p>小蝌蚪：“我能跑十公里去为她买宵夜”</p>\n<p>高富帅：“我开兰博基尼去为她买宵夜”</p>\n<p>小蝌蚪：“我一..."
    },
    {
      "url": "https://juejin.im/post/5dadd0236fb9a04de04d968e",
      "k": "juejin",
      "id": "5yzhe5dhsvs0",
      "author": "极客James",
      "title": "Node.js 实现抢票小工具&短信通知提醒",
      "time": "6天前",
      "detail": "<h1 class=\"heading\" data-id=\"heading-0\">写在前言</h1>\n<p>要知道在深圳上班是非常痛苦的事情，特别是我上班的科兴科技园这一块，去的人非常多，每天上班跟春运一样，如果我能换到以前的大冲上班那就幸福了，可惜，换不得。</p>\n<p>尤其是我这个站等车的多的一笔，上班公交挤的不行，车满的时候只有少部分人能硬挤上去。通常我只会用两个字来形容这种人：“公交怪”</p>\n<p>想当年我朋友瘦的像只猴还能上去，老子身高182体重72kg挤个公交，不成问题，反手一个..."
    },
    {
      "url": "https://juejin.im/post/5dafc91a6fb9a04e4047a713",
      "k": "juejin",
      "id": "4672fvo25q00",
      "author": "Void_0",
      "title": "Vue登录注册-掘金可爱萌猫",
      "time": "4天前",
      "detail": "<p><code>阅读时间预计5分钟,干货满满,记得点赞加收藏哦😄</code></p>\n<p></p><figure><img class=\"lazyload inited loaded\" data-src=\"https://user-gold-cdn.xitu.io/2019/10/23/16df7b4e851e3c18?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" data-width=\"1280\" data-height=\"..."
    },
    {
      "url": "https://juejin.im/post/5db52dedf265da4d495c3fb8",
      "k": "juejin",
      "id": "60oc0q6ixic0",
      "author": "黄轶",
      "title": "基于vue+vant搭建H5通用架子",
      "time": "1天前",
      "detail": "<h3 class=\"heading\" data-id=\"heading-0\">项目初衷</h3>\n<p>开发一个H5的通用架子，让前端同学开箱即用，迅速投入战斗。</p>\n<blockquote>\n<p>截止到2019-10-29 10:25，已经被fork了34次，如果您在使用过程中还希望能给我提<a target=\"_blank\" href=\"https://github.com/Ljhhhhhh/h5vue/issues\" rel=\"nofollow noopener noreferre..."
    },
    {
      "url": "https://juejin.im/post/5dafe42451882576534d3858",
      "k": "juejin",
      "id": "3npuf44to0e0",
      "author": "前端小智",
      "title": "Vue.js 3.x 源码解析先导",
      "time": "5天前",
      "detail": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>2018 年 6 月我在慕课网发布了 Vue.js 2.x 的源码解析课程 <a target=\"_blank\" href=\"https://coding.imooc.com/class/228.html\" rel=\"nofollow noopener noreferrer\">《Vue.js 源码全方位深入解析》</a>，同时也开源了课程配套<a target=\"_blank\" href=\"ht..."
    },
    {
      "url": "https://juejin.im/post/5db62f1bf265da4d560906ab",
      "k": "juejin",
      "id": "6lk3u3ywcjc0",
      "author": "dragonet",
      "title": "13 个 JS 数组精简技巧，一起来看看",
      "time": "1天前",
      "detail": "<blockquote>\n<p>作者：Duomly</p>\n<p>译者：前端小智</p>\n<p>来源：dev.to</p>\n</blockquote>\n<hr>\n<p><strong>阿里云服务器很便宜火爆，今年比去年便宜，10.24~11.11购买是1年86元，3年229元，可以点击 下面链接进行参与：</strong>\n<a target=\"_blank\" href=\"https://www.aliyun.com/1111/2019/group-buying-share?ptCode=FBE..."
    },
    {
      "url": "https://juejin.im/post/5dac07675188253d706643f4",
      "k": "juejin",
      "id": "65e6mus54nk0",
      "author": "前端劝退师",
      "title": "面试时面试官想要听到什么答案（关于一些vue的问题）",
      "time": "6天前",
      "detail": "<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>自己也只是一个前端的小白，因为公司大佬都比较忙，面试这种事就落到了我这小白身上，第一次叫我去的时候我是百般拒绝的，因为自己还是有自知之明的，但是别人实在抽不开身，没办法只能去了，他们开玩笑说就按你这水平来就行了，啥时候你问不住了就让他来复试就行。<br>\n前前后后也面了一些人，加上自己面试时候整理的一些问题，写了这篇文章，感谢拨冗翻阅拙作,敬请斧正。</p>\n<p>下面进入正文，本文会列举一些平..."
    }
  ],
  "undefined": [
    {
      "url": "https://juejin.im/post/5bfe84ddf265da61483b50c0",
      "k": "juejin",
      "id": "40pnb4ts8o80",
      "author": "niaonao",
      "title": "De-ui 自己整理的一套微信小程序组件库",
      "time": "11月前"
    },
    {
      "url": "https://juejin.im/post/5c6bcb3d6fb9a049c6446979",
      "k": "juejin",
      "id": "5ohrwonm2ow0",
      "author": "大猹子",
      "title": "强大的代码保护软件 .NET Reactor使用教程（四）：.NET Reactor针对De4Dot脱壳工具的应对",
      "time": "8月前"
    }
  ],
  "user": {
    "name": "typicode"
  }
}