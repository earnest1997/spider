{
  "searchResList": [],
  "articleDetail": [],
  "hotResList": [
    {
      "url": "https://juejin.im/post/5da14778f265da5bb628e590",
      "k": "juejin",
      "id": "1ip007vq7uyo",
      "author": "神三元",
      "title": "写给新手前端的各种文件上传攻略，从小图片到大文件断点续传",
      "time": "6天前",
      "detail": "写在前面今年国庆假期终于可以憋在家里了不用出门了，不用出去看后脑了，真的是一种享受。这么好的光阴怎么浪费，睡觉、吃饭、打豆豆这怎么可能（耍多了也烦），完全不符合我们程序员的作风，赶紧起来把文章写完。这篇文章比较基础，在国庆期间的业余时间写的，这几天又完善了下，力求把更多的前端所涉及到的关于文件上传的各种场景和应用都涵盖了,若有疏漏和问题还请留言斧正和补充。自测读不读以下是本文所涉及到的知识点，breakorcontinue?文件上传原理最原始的文件上传使用koa2作为服务端写一个文件上传接口单文..."
    },
    {
      "url": "https://juejin.im/post/5dac5d82e51d45249850cd20",
      "k": "juejin",
      "id": "5wsijg0hvus0",
      "author": "裂泉",
      "title": "(建议收藏)原生JS灵魂之问, 请问你能接得住几个？(上)",
      "time": "2天前",
      "detail": "笔者最近在对原生JS的知识做系统梳理，因为我觉得JS作为前端工程师的根本技术，学再多遍都不为过。打算来做一个系列，一共分三次发，以一系列的问题为驱动，当然也会有追问和扩展，内容系统且完整，对初中级选手会有很好的提升，高级选手也会得到复习和巩固。敬请大家关注！第一篇:JS数据类型之问——概念篇1.JS原始数据类型有哪些？引用数据类型有哪些？在JS中，存在着7种原始值，分别是：booleannullundefinednumberstringsymbolbigint引用数据类型:对象Object（包含..."
    },
    {
      "url": "https://juejin.im/post/5da53e29e51d457822796ed8",
      "k": "juejin",
      "id": "ozdvut9paj4",
      "author": "取舍🍂",
      "title": "1小时搞定卡片拖拽、自动排列交换位置、拖拽数据存取",
      "time": "7天前",
      "detail": "首先演示一下最终效果：流畅的拖动和交换位置效果，并实时更新数据\">支持组件的样式和内容自定义\">这是这次系列文章的第一篇，我自己封装了一个用vue实现的拖拽排列卡片组件，并且发布到npm，详细地记录下来了整体制作过程。总共有三篇文章，介绍组件的制作思路和遇到的问题，以及在发布到npm上并下载使用的过程中，发生了什么问题并如何解决。第一篇为组件封装后的使用文档及介绍第二篇为组件的实现思路以及细节第三篇为将组件打包并上传至npm，如何实现按需加载和下载后使用的问题这是vue实现的拖动卡片组件，主要实..."
    },
    {
      "url": "https://juejin.im/post/5dac3b4351882576534d33d7",
      "k": "juejin",
      "id": "3zdzo7aoqf00",
      "author": "荒山",
      "title": "7天撸完KTV点歌系统,含后台管理系统(完整版)",
      "time": "2天前",
      "detail": "最近手有点痒琢磨着做个啥,朝思暮想还是写个KTV点歌系统,模拟了一下KTV开户的思路,7天累死我了,不过技术点还挺多的,希望你可以看完（〜^㉨^)〜用Node(Express)教你写KTV点歌系统，包括前台内容和后台管理系统，整合Express框架和Mongodb数据库服务器开发；教你用Vue.JS，ElementUI和iViewUI写出超漂亮的页面,随心点歌随心听作者原创文章,转载前请留言或联系作者!!!思维导图技术栈后端：Express+Mongodb+jsonwebtoken等等前端：Vu..."
    },
    {
      "url": "https://juejin.im/post/5dadc6045188255a270a0f85",
      "k": "juejin",
      "id": "zdjrdterzio",
      "author": "格子熊",
      "title": "这可能是最通俗的 React Fiber(时间分片) 打开方式",
      "time": "1天前",
      "detail": "写一篇关于ReactFiber的文章，这个Flag立了很久，这也是今年的目标之一。最近的在掘金的文章获得很多关注和鼓励，给了我很多动力，所以下定决心好好把它写出来。我会以最通俗的方式将它讲透,因此这算是一篇科普式的文章。不管你是使用React、还是Vue，这里面的思想值得学习学习!\">一年一度的React春晚:ReactConf即将到来，不知道今年会不会有什么惊喜，去年是ReactHooks，前年是ReactFiber...我得赶在ReactConf之前发布这篇文章:😲ReactFiber已经..."
    },
    {
      "url": "https://juejin.im/post/5da90c3e6fb9a04e031c0413",
      "k": "juejin",
      "id": "1wtguwdoxgo0",
      "author": "全栈者",
      "title": "聊聊 Vue 中 axios 的封装",
      "time": "5天前",
      "detail": "axios是Vue官方推荐的一个HTTP库，用axios官方简介来介绍它，就是：Axios是一个基于promise的HTTP库，可以用在浏览器和node.js中。作为一个优秀的HTTP库，axios打败了曾经由Vue官方团队维护的vue-resource，获得了Vue作者尤小右的大力推荐，成为了Vue项目中HTTP库的最佳选择。虽然，axios是个优秀的HTTP库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。下面，我们就来聊聊Vue中..."
    },
    {
      "url": "https://juejin.im/post/5dad09be518825393e52d1bd",
      "k": "juejin",
      "id": "7ie2gqg97o00",
      "author": "云音乐前端技术团队",
      "title": "前端框架用vue还是react？清晰对比两者差异",
      "time": "2天前",
      "detail": "vueorreact？That'saquestion.前言近两年前端技术层出不穷，目前市面上已经有了很多供前端人员使用的开发框架，转眼19年已过大半，前端框架领域日趋成熟，实现了三足鼎立的局面，截止到10月22日，Angular，react和vue数据统计如下图所示:\">最近在学习使用框架的时候，分别使用vue和react开发了两个移动端产品，对这两个框架的学习曲线有了一些感悟，这两个都是现在比较热门的js框架，它俩在使用方式上和学习复杂度上还是有很大区别的，这里简单总结下两者的差异。主要从以下..."
    },
    {
      "url": "https://juejin.im/post/5da88d795188252f051e2b47",
      "k": "juejin",
      "id": "3bnwwpeh6000",
      "author": "前端小智",
      "title": "要进大厂？前端灰度发布必须要知道",
      "time": "5天前",
      "detail": "笔者在刚进入阿里的时候，其实连灰度是什么也不知道，但是灰度这个概念在大厂非常普遍，只要有一定用户量的应用都会涉及到灰度发布，所以准备进大厂的同学，灰度发布这个概念一定要了解一下。一.灰度发布是什么？灰度发布，又被称之为金丝雀发布，是指某次新发布功能特性和旧功能特性之间能够以平滑过渡的方式呈现给用户，就像金丝雀的羽毛一样多种颜色平滑渐变。举个例子，某个已上线处于运行中的系统需要一次新的功能迭代，但是由于功能变动较大，所以发布需要考虑用户的使用反馈以及代码可能存在一些未知的异常，这时候则需要将新的功..."
    },
    {
      "url": "https://juejin.im/post/5dad208ef265da5b7d692340",
      "k": "juejin",
      "id": "6xkk6d7dddg0",
      "author": "火狼1",
      "title": "Server-X：一款可能提升你十倍工作效率的工具",
      "time": "2天前",
      "detail": "本文将介绍一款全新的前端开发工具，希望它能给你的前端开发带来看起来和现在一样但其实又不那么一样的体验。你可能会说，大家都是秃头的成熟的前端程序员了，每一台电脑上都有几套自己辛辛苦苦装好的全家桶，为什么还要新换一个开发工具？对，盲生，你可能发现了华点。数一数你电脑上目前为前端本地开发安装了多少小工具、小插件？这其中仅仅是为代码开发阶段，就可能有本地服务器、远程调试工具、代理工具、浏览器插件等等。它们也许是你一个个尝试无数同款后最终确定安装的，也可能是被各类『震惊！超好用前端开发工具大全』安利的，并..."
    },
    {
      "url": "https://juejin.im/post/5dacf37ef265da5b926bdc9a",
      "k": "juejin",
      "id": "2wzr45l4xb60",
      "author": "政采云前端团队",
      "title": "7 个沙雕又带有陷阱的 JS 面试题",
      "time": "2天前",
      "detail": "作者：DmitriPavlutin译者：前端小智来源：dmitripavlutin这几天自己的公众号无套路送现金200+，参与方式如下mp.weixin.qq.com/s/PTlWMG5Ke…为了保证的可读性，本文采用意译而非直译。在JS面试中，经常会看到一些简单而又沙雕的题目，这些题目包含一些陷阱，但这些在我们规范的编码下或者业务中基本不会出现。有些面试官就是这样，不专注于制定代码的标准和规范上，却用不规范的代码去检验别人是否细心。这魔幻的世界就是一个攀比优越感的，我能考你，我就是比你优越，真..."
    },
    {
      "url": "https://juejin.im/post/5daeefc8e51d4524f007fb15",
      "k": "juejin",
      "id": "4j8g1n4d1uo0",
      "author": "西岚",
      "title": "JS 原生面经从初级到高级【近1.5W字】",
      "time": "9小时前",
      "detail": "前言是时候撸一波JS基础啦,撸熟了,银十速拿offer;本文不从传统的问答方式梳理,而是从知识维度梳理,以便形成知识网络;包括函数,数组,对象,数据结构,算法,设计模式和http.1.函数1.1函数的3种定义方法1.1.1函数声明//ES5functiongetSum(){}function(){}//匿名函数//ES6()=>{}//如果{}内容只有一行{}和return关键字可省,复制代码1.1.2函数表达式(函数字面量)//ES5varsum=function(){}//ES6letsum..."
    },
    {
      "url": "https://juejin.im/post/5da5cb81f265da5b905ef75a",
      "k": "juejin",
      "id": "4587m5w82hu0",
      "author": "浪里行舟",
      "title": "【译】一文洞察 Chrome DevTools 近半年更新了哪些新功能",
      "time": "7天前",
      "detail": "原创不易，希望能关注下我们，再顺手点个赞~~本文首发于政采云前端团队博客：一文洞察ChromeDevTools近半年更新了哪些新功能本文由政采云前端团队@子洋同学翻译，原文可访问：developers.google.com/web/updates…前言工欲善其事，必先利其器。ChromeDevtools是前端开发工程师不可或缺的开发工具，最近半年Chrome更新了6个版本，其中的5个版本里ChromeDevtools也更新了一些新功能，我们对最近的一些更新做了翻译整理，下面我们一起来看看近半年有..."
    },
    {
      "url": "https://juejin.im/post/5dadd0236fb9a04de04d968e",
      "k": "juejin",
      "id": "13rl0e1022rg",
      "author": "寒东设计师",
      "title": "Node.js 实现抢票小工具&短信通知提醒",
      "time": "1天前",
      "detail": "写在前言要知道在深圳上班是非常痛苦的事情，特别是我上班的科兴科技园这一块，去的人非常多，每天上班跟春运一样，如果我能换到以前的大冲上班那就幸福了，可惜，换不得。尤其是我这个站等车的多的一笔，上班公交挤的不行，车满的时候只有少部分人能硬挤上去。通常我只会用两个字来形容这种人：“公交怪”想当年我朋友瘦的像只猴还能上去，老子身高182体重72kg挤个公交，不成问题，反手一个阻挡，闷声发大财，前面的阿姨你快点阿姨，别磨磨唧唧的，快上去啊阿姨，嗯？你还想挤掉我？你能挤掉我？你能挤掉我！我当场！把车吃了！...."
    },
    {
      "url": "https://juejin.im/post/5d9abde7e51d4578110dc77f",
      "k": "juejin",
      "id": "7iwhbolb8s00",
      "author": "是呀呀呀",
      "title": "解密HTTP/2与HTTP/3 的新特性",
      "time": "6天前",
      "detail": "前言HTTP/2相比于HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。虽然HTTP/2提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3就是为了解决HTTP/2所存在的一些问题而被推出来的。想阅读更多优质文章请猛戳GitHub博客一、HTTP/1.1发明以来发生了哪些变化？如果仔细观察打开那些最流行的网站首页所需要下载的资源的话，会发现一个非常明显的趋势。近年来加载..."
    },
    {
      "url": "https://juejin.im/post/5d89ac2ff265da03c34c3cd2",
      "k": "juejin",
      "id": "449gc2a5yv20",
      "author": "RetroAstro",
      "title": "金九银十面试笔记",
      "time": "5天前",
      "detail": "目录JS说说js中的词法作用域什么是闭包说说js的垃圾回收(GC)说说你了解的设计模式Es6ES6模块与CommonJS模块的差异async函数实现原理Node说说浏览器和node中的事件循环（EventLoop）实现一个node中的EventEmiter实现一个node中util模块的promisify方法如何实现一个自定义流性能优化性能优化之dns-prefetch、prefetch、preload、defer、async说说react性能优化网络／浏览器说说浏览器渲染流程说说http2.0..."
    },
    {
      "url": "https://juejin.im/post/5da32d43e51d45781d5e4bdf",
      "k": "juejin",
      "id": "4twy45grxgu0",
      "author": "JessicaC",
      "title": "“寒冬”三年经验前端面试总结（含头条、百度、饿了么、滴滴等）之CSS篇",
      "time": "7天前",
      "detail": "前言不论是寒冬还是暖冬，找工作之前都需要做好充足的准备，面试的时候才能做到游刃有余。此文是把我最近找工作准备的以及笔试面试中涉及到的手写题做一个总结。给自己，也给需要的同学。CSS是前端必须要掌握的技能之一。一般面试也都会从CSS开始。所以CSS问题答的好坏会直接影响你在面试官心中的形象。本文主要介绍面试中常会遇到的CSS问题及给出建议性的答案。往期“寒冬”三年经验前端面试总结（含头条、百度、饿了么、滴滴等）“寒冬”三年经验前端面试总结（含头条、百度、饿了么、滴滴等）之手写题（一）“寒冬”三年经..."
    },
    {
      "url": "https://juejin.im/post/5da9458ae51d4524a43077d2",
      "k": "juejin",
      "id": "4hjoyo91qaw0",
      "author": "dragonet",
      "title": "[译] 为什么 React Suspense 将会逆转 Web 应用开发的游戏规则 ？",
      "time": "5天前",
      "detail": "原文地址：medium.com/react-in-de…原文作者：JulianBurr在本篇文章中，我不想太深入解释有关ReactSuspense的实现细节和它内部的工作原理，因为已经有很多优秀的博客文章、视频和讨论做过这些事情了。相反，我更愿意把重点放在Suspense将会如何影响在应用开发时我们对加载状态和架构应用的思考。Suspense简要介绍鉴于有些人可能没有听说过Suspense或者根本不了解它，因此我会先给出一个关于Suspense的简要总结。在去年冰岛举行的JSConf大会上，Da..."
    },
    {
      "url": "https://juejin.im/post/5daa897c6fb9a04e3902f4e6",
      "k": "juejin",
      "id": "6qo4vz7oo0w0",
      "author": "xiangzhihong",
      "title": "[译] 什么将会替代 JavaScript 呢？",
      "time": "3天前",
      "detail": "原文地址：WhatReplacesJavaScript原文作者：MatthewMacDonald译文出自：掘金翻译计划本文永久链接：github.com/xitu/gold-m…译者：cyz980908校对者：江五渣,Chorer什么将会替代JavaScript呢？JavaScript正在蓬勃发展。但由于WebAssembly的出现，它的衰落可能只是一个时间问题。有些编程语言很受欢迎。而有些只是被开发人员被迫接受。对于许多程序员来说，JavaScript就是后者中的一个例子，每个前端开发人员都需..."
    }
  ],
  "hotArticleDetailList": {
    "source": "掘金",
    "id": "6qo4vz7oo0w0",
    "author": "xiangzhihong",
    "title": "[译] 什么将会替代 JavaScript 呢？",
    "content": "原文地址：WhatReplacesJavaScript原文作者：MatthewMacDonald译文出自：掘金翻译计划本文永久链接：github.com/xitu/gold-m…译者：cyz980908校对者：江五渣,Chorer什么将会替代JavaScript呢？JavaScript正在蓬勃发展。但由于WebAssembly的出现，它的衰落可能只是一个时间问题。有些编程语言很受欢迎。而有些只是被开发人员被迫接受。对于许多程序员来说，JavaScript就是后者中的一个例子，每个前端开发人员都需要学习和理解这种语言，但是却没有人喜欢它。十年前，JavaScript还没有统治世界的迹象。其他的平台，像Java，Flash和Silverlight也依然在被我们使用。以上三个平台都需要运行在一个浏览器插件中，且三者都用一种不同的用户界面替换了HTML。这种方法使它们在功能特性方面远远领先于JavaScript——例如，早在\\元素、CSS动画或HTMLcanvas之前，我们就能使用它们添加视频、动画和绘图。但这也意味着它们的衰落。当移动浏览爆炸式增长，HTML转向拥抱移动浏览器时，这些平台也已过时。讽刺的是，就在JavaScript征服世界的同时，一颗小小的种子被播下。它将在未来的某个时候，宣告JavaScript的终结。这颗种子就是一种叫asm.js的实验技术。但是介绍它之前，我们还是退一步来审视当下的形势。转码：目前的做法自从我们有了JavaScript，开发人员就一直试图避开它。一种早期的方法是使用插件将代码从浏览器中取出。（该方法失败。）另一种想法是开发可以转换代码的开发工具，将用另一种更受欢迎的语言编写的代码转换成JavaScript。这样，开发人员就可以如愿地让代码到处运行，同时又能避免弄脏双手。把一种语言转换成另一种语言的过程叫做转码，但这个过程并非一帆风顺。高级语言有不同的特性、语法和习惯用法，你不能单纯直接地映射到另一个等价的结构上。就算你可以，这也是有潜在危险的。如果社区停止开发你最喜欢的转码器怎么办？或者如果转码器引入了自己的bug怎么办？如果要插入Angular，React或Vue这样的JavaScript框架怎么办？如果你在团队中不使用相同的语言开发，你又将如何与团队合作呢？如同许多开发案例一样，一个工具的好坏取决于它背后的社区。\">如今，转码器已经是再常见不过了，但它们的用途往往只有一种——处理向后兼容性。开发人员都是尽可能使用最新的JavaScript版本，然后使用类似Babel之类的转码器将他们的代码转换成同等的（但不那么优雅的）旧版本JavaScript代码，这样代码就可以兼容所有的运行环境。或者更好的是，他们使用TypeScript（一种添加了强类型、泛型和不可为空类型等特性的现代化JavaScript）并将TypeScript转换成JavaScript。无论哪种方式，你都是在JavaScript这片小花园里打转。Asm.js：一块垫脚石一种新的可能性的曙光来自于2013年，Mozilla的开发人员做的一个独特实验——asm.js。他们那时正在寻找一种在浏览器中运行高性能代码的方法。但与插件不同的是，asm.js并没有试图与浏览器为邻。相反，它的目标是直达JavaScript虚拟机。从本质上讲，asm.js是一种简洁、优化的JavaScript语法。它比普通的JavaScript运行得更快，因为它避开了语言中缓慢的动态部分。但是，意识到这一点的web浏览器也可以应用其他方法优化，从而大大提高性能。换句话说，asm.js遵循了黄金法则——不要破坏web，同时还提供了未来改进的方法。Firefox团队借助asm.js和一款叫做Emscripten的转换工具，把用C++构建的实时3D游戏放到了web浏览器中，只需要JavaScript和一颗初心便可畅玩。\">asm.js最重要的部分是它迫使开发人员重新思考JavaScript的作用。Asm.js代码是JavaScript代码，但这不意味着程序员应该手动编写和操作asm.js代码。相反，asm.js代码应该由自动化过程（一个转码器）构建，并直接提供给浏览器。JavaScript是中间的媒介，而不是最终传递的信息。WebAssembly：一项新的技术尽管asm.js实验产生了一些耀眼的演示，但它在很大程度上被工作的开发人员忽略了。对他们来说，这只是另一项有趣的新兴技术。但随着WebAssembly的诞生，这一切都改变了。WebAssembly既是asm.js的接班人，同时又是一项截然不同的技术。它是一种紧凑的二进制代码格式。与asm.js一样，WebAssembly代码也被输入到JavaScript执行环境中。它们俩具有相同的沙箱和相同的运行时环境。与asm.js一样，WebAssembly的编译方式使得更进一步的效率提升成为可能。但是现在的效率就已经比以前快多了了，浏览器可以完全跳过JavaScript解析阶段。对于一个普通的逻辑位来说（例如，耗时的计算），WebAssembly的速度远远快于常规的JavaScript，几乎与本机编译的代码一样快。\">如果你想知道WASM写起来是什么样的，那么你可以想象一下你有这样一个C函数：intfactorial(intn){if(n==0)return1;elsereturnn*factorial(n-1);}复制代码它将被编译成如下所示的WASM代码：get_local0i64.eqzif(resulti64)i64.const1elseget_local0get_local0i64.const1i64.subcall0i64.mulend复制代码当通过网络发送时，WASM代码被进一步压缩成二进制编码。WebAssembly的定位是编译器。你永远不会手写它。（但是，如果你想进行深入的探索，你当然可以去做。）WebAssembly首次出现在2015年。今天，桌面和移动设备上的四大浏览器完全支持它（Chrome，Edge，Safari和Firefox）。它在InternetExplorer中不受支持，尽管将WebAssembly代码转换为asm.js可以实现向后兼容。（性能将会受到影响，拜托请让IE消失吧！）WebAssembly和网站开发的未来WebAssembly开箱即用，为开发人员提供了一种通常使用C++编写优化代码例程的方法。这是个强大的功能，但是使用范围有限。如果你需要提高复杂计算的性能，这将很有用。（例如，fastq.bio使用WebAssembly加快了他们的DNA测序计算。）如果你需要移植高性能游戏或编写在浏览器中运行的模拟器，那么WebAssembly你值得拥有。如果这就是WebAssembly的全部功能，那就太没意思了——它也将不会有取代JavaScript的希望。WebAssembly还为其他框架开发人员提供了一条小路，使得框架开发人员可以将其平台压缩到JavaScript环境中。事情在这里发生了有趣的转变。WebAssembly不能是脱离JavaScript的，因为它被锁定在JavaScript运行环境中。实际上，WebAssembly至少需要与一些普通的JavaScript代码一起运行，因为它无法直接访问页面。这意味着，如果不经过JavaScript层，它就无法操纵DOM或接收事件。这听起来像是一个要突破原则的限制。但是，聪明的开发人员已经找到了在WebAssembly中偷偷搬运运行环境的方法。例如，Microsoft的Blazor框架，下载一个小型.NET的运行环境作为编译后的WASM文件。这个运行环境处理JavaScript的互操作，并提供基本服务（如垃圾收集）和更高级的功能（布局、路由和用户界面小部件）。换句话说，Blazor使用了一个存在于另一个虚拟机中的虚拟机。这既可以说是一个令人费解的悖论，也可以说是一种创建在浏览器中运行的非JavaScript应用程序框架的聪明方法。Blazor并不是唯一一个由WebAssembly支持的实验。以Pyodide为例，它的目标是将Python放到浏览器中，并提供用于数据分析的高级数学工具包。这就是未来。WebAssembly一开始只是为了满足C++、Rust的需求，但很快就被用于创建一些更有野心的实验。不久后，它将会带来那些非JavaScript框架与基于JavaScript的标准框架（如Angular、React和Vue）同台竞技的机会。而且WebAssembly仍在迅速发展。它目前的实现是一个最小可行性的产品——仅能够在一些重要的场景中发挥作用，而不是在web上开发的通用方法。随着WebAssembly的逐步普及，这个现象将得到改善。例如，如果像Blazor这样的平台流行起来，WebAssembly可能会支持直接访问DOM。现在，浏览器制造商们已经在计划添加垃圾回收和多线程的机制，有了WebAssembly，运行环境这些细节他们也不需要自己实现。如果你认为这条WebAssembly的发展之路看起来漫长而且令人怀疑，那么想想JavaScript的例子吧。首先，我们看到，如果有些事情JavaScript可以做到，那么它就会被完成。然后，我们了解到，如果浏览器频繁做某件事，那么浏览器会让它工作得更高效更好，等等。所以说，如果WebAssembly流行了，它将进入一个良性循环的发展过程，并且很容易超越JavaScript的固有优势。人们常说，WebAssembly不是用来替代JavaScript的。但这适用于之前的每一个发生革命性改变的的平台。JavaScript不是用来取代浏览器嵌入Java的。Web应用程序也不是为了取代桌面应用程序而设计的。但一旦它们可以，它们就会替代。如果发现译文存在错误或其他需要改进的地方，欢迎到掘金翻译计划对译文进行修改并PR，也可获得相应奖励积分。文章开头的本文永久链接即为本文在GitHub上的MarkDown链接。掘金翻译计划是一个翻译优质互联网技术文章的社区，文章来源为掘金上的英文分享文章。内容覆盖Android、iOS、前端、后端、区块链、产品、设计、人工智能等领域，想要查看更多优质译文请持续关注掘金翻译计划、官方微博、知乎专栏。",
    "time": "2019年10月19日"
  }
}